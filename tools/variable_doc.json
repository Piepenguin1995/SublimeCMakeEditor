{
    "CMAKE_BUILD_TOOL": "CMAKE_BUILD_TOOL\n----------------\n\nThis variable exists only for backwards compatibility.\nIt contains the same value as :variable:`CMAKE_MAKE_PROGRAM`.\nUse that variable instead.\n", 
    "CMAKE_COMMAND": "CMAKE_COMMAND\n-------------\n\nThe full path to the cmake executable.\n\nThis is the full path to the CMake executable cmake which is useful\nfrom custom commands that want to use the cmake -E option for portable\nsystem commands.  (e.g.  /usr/local/bin/cmake\n", 
    "CMAKE_SYSTEM": "CMAKE_SYSTEM\n------------\n\nName of system cmake is compiling for.\n\nThis variable is the composite of CMAKE_SYSTEM_NAME and\nCMAKE_SYSTEM_VERSION, like this\n${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}.  If CMAKE_SYSTEM_VERSION\nis not set, then CMAKE_SYSTEM is the same as CMAKE_SYSTEM_NAME.\n", 
    "CMAKE_LANG_IGNORE_EXTENSIONS": "CMAKE_<LANG>_IGNORE_EXTENSIONS\n------------------------------\n\nFile extensions that should be ignored by the build.\n\nThis is a list of file extensions that may be part of a project for a\ngiven language but are not compiled.\n", 
    "CMAKE_MAJOR_VERSION": "CMAKE_MAJOR_VERSION\n-------------------\n\nFirst version number component of the :variable:`CMAKE_VERSION`\nvariable.\n", 
    "CMAKE_SKIP_BUILD_RPATH": "CMAKE_SKIP_BUILD_RPATH\n----------------------\n\nDo not include RPATHs in the build tree.\n\nNormally CMake uses the build tree for the RPATH when building\nexecutables etc on systems that use RPATH.  When the software is\ninstalled the executables etc are relinked by CMake to have the\ninstall RPATH.  If this variable is set to true then the software is\nalways built with no RPATH.\n", 
    "CMAKE_ARGC": "CMAKE_ARGC\n----------\n\nNumber of command line arguments passed to CMake in script mode.\n\nWhen run in -P script mode, CMake sets this variable to the number of\ncommand line arguments.  See also CMAKE_ARGV0, 1, 2 ...\n", 
    "CMAKE_SHARED_LINKER_FLAGS": "CMAKE_SHARED_LINKER_FLAGS\n-------------------------\n\nLinker flags to be used to create shared libraries.\n\nThese flags will be used by the linker when creating a shared library.\n", 
    "CPACK_ABSOLUTE_DESTINATION_FILES": "CPACK_ABSOLUTE_DESTINATION_FILES\n--------------------------------\n\nList of files which have been installed using  an ABSOLUTE DESTINATION path.\n\nThis variable is a Read-Only variable which is set internally by CPack\nduring installation and before packaging using\nCMAKE_ABSOLUTE_DESTINATION_FILES defined in cmake_install.cmake\nscripts.  The value can be used within CPack project configuration\nfile and/or CPack<GEN>.cmake file of <GEN> generator.\n", 
    "CMAKE_Fortran_MODULE_DIRECTORY": "CMAKE_Fortran_MODULE_DIRECTORY\n------------------------------\n\nFortran module output directory.\n\nThis variable is used to initialize the Fortran_MODULE_DIRECTORY\nproperty on all the targets.  See that target property for additional\ninformation.\n", 
    "CMAKE_LANG_PLATFORM_ID": "CMAKE_<LANG>_PLATFORM_ID\n------------------------\n\nAn internal variable subject to change.\n\nThis is used in determining the platform and is subject to change.\n", 
    "CMAKE_IGNORE_PATH": "CMAKE_IGNORE_PATH\n-----------------\n\nPath to be ignored by FIND_XXX() commands.\n\nSpecifies directories to be ignored by searches in FIND_XXX()\ncommands.  This is useful in cross-compiled environments where some\nsystem directories contain incompatible but possibly linkable\nlibraries.  For example, on cross-compiled cluster environments, this\nallows a user to ignore directories containing libraries meant for the\nfront-end machine that modules like FindX11 (and others) would\nnormally search.  By default this is empty; it is intended to be set\nby the project.  Note that CMAKE_IGNORE_PATH takes a list of directory\nnames, NOT a list of prefixes.  If you want to ignore paths under\nprefixes (bin, include, lib, etc.), you'll need to specify them\nexplicitly.  See also CMAKE_PREFIX_PATH, CMAKE_LIBRARY_PATH,\nCMAKE_INCLUDE_PATH, CMAKE_PROGRAM_PATH.\n", 
    "MSVC70": "MSVC70\n------\n\nTrue when using Microsoft Visual C 7.0\n\nSet to true when the compiler is version 7.0 of Microsoft Visual C.\n", 
    "MSVC71": "MSVC71\n------\n\nTrue when using Microsoft Visual C 7.1\n\nSet to true when the compiler is version 7.1 of Microsoft Visual C.\n", 
    "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY": "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY\n------------------------------------------\n\nBoolean toggle to include/exclude top level directory (component case).\n\nSimilar usage as CPACK_INCLUDE_TOPLEVEL_DIRECTORY but for the\ncomponent case.  See CPACK_INCLUDE_TOPLEVEL_DIRECTORY documentation\nfor the detail.\n", 
    "PROJECT_VERSION": "PROJECT_VERSION\n---------------\n\nValue given to the ``VERSION`` option of the most recent call to the\n:command:`project` command, if any.\n\nSee also the component-wise version variables\n:variable:`PROJECT_VERSION_MAJOR`,\n:variable:`PROJECT_VERSION_MINOR`,\n:variable:`PROJECT_VERSION_PATCH`, and\n:variable:`PROJECT_VERSION_TWEAK`.\n", 
    "CMAKE_ERROR_DEPRECATED": "CMAKE_ERROR_DEPRECATED\n----------------------\n\nWhether to issue deprecation errors for macros and functions.\n\nIf TRUE, this can be used by macros and functions to issue fatal\nerrors when deprecated macros or functions are used.  This variable is\nFALSE by default.\n", 
    "CMAKE_AUTORCC_OPTIONS": "CMAKE_AUTORCC_OPTIONS\n---------------------\n\nWhether to handle ``rcc`` automatically for Qt targets.\n\nThis variable is used to initialize the :prop_tgt:`AUTORCC_OPTIONS` property on\nall the targets.  See that target property for additional information.\n", 
    "CMAKE_CACHE_MAJOR_VERSION": "CMAKE_CACHE_MAJOR_VERSION\n-------------------------\n\nMajor version of CMake used to create the CMakeCache.txt file\n\nThis stores the major version of CMake used to write a CMake cache\nfile.  It is only different when a different version of CMake is run\non a previously created cache file.\n", 
    "CMAKE_OSX_SYSROOT": "CMAKE_OSX_SYSROOT\n-----------------\n\nSpecify the location or name of the OS X platform SDK to be used.\nCMake uses this value to compute the value of the ``-isysroot`` flag\nor equivalent and to help the ``find_*`` commands locate files in\nthe SDK.\n\nIf not set explicitly the value is initialized by the ``SDKROOT``\nenvironment variable, if set, and otherwise computed based on the\n:variable:`CMAKE_OSX_DEPLOYMENT_TARGET` or the host platform.\n\n.. include:: CMAKE_OSX_VARIABLE.txt\n", 
    "CMAKE_PDB_OUTPUT_DIRECTORY_CONFIG": "CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>\n-----------------------------------\n\nPer-configuration output directory for MS debug symbol ``.pdb`` files\ngenerated by the linker for executable and shared library targets.\n\nThis is a per-configuration version of :variable:`CMAKE_PDB_OUTPUT_DIRECTORY`.\nThis variable is used to initialize the\n:prop_tgt:`PDB_OUTPUT_DIRECTORY_<CONFIG>`\nproperty on all the targets.  See that target property for additional\ninformation.\n", 
    "PROJECT-NAME_VERSION_TWEAK": "<PROJECT-NAME>_VERSION_TWEAK\n----------------------------\n\nFourth version number component of the :variable:`<PROJECT-NAME>_VERSION`\nvariable as set by the :command:`project` command.\n", 
    "CMAKE_CURRENT_LIST_LINE": "CMAKE_CURRENT_LIST_LINE\n-----------------------\n\nThe line number of the current file being processed.\n\nThis is the line number of the file currently being processed by\ncmake.\n", 
    "CMAKE_SYSTEM_INCLUDE_PATH": "CMAKE_SYSTEM_INCLUDE_PATH\n-------------------------\n\nPath used for searching by FIND_FILE() and FIND_PATH().\n\nSpecifies a path which will be used both by FIND_FILE() and\nFIND_PATH().  Both commands will check each of the contained\ndirectories for the existence of the file which is currently searched.\nBy default it contains the standard directories for the current\nsystem.  It is NOT intended to be modified by the project, use\nCMAKE_INCLUDE_PATH for this.  See also CMAKE_SYSTEM_PREFIX_PATH.\n", 
    "CMAKE_Fortran_MODDIR_DEFAULT": "CMAKE_Fortran_MODDIR_DEFAULT\n----------------------------\n\nFortran default module output directory.\n\nMost Fortran compilers write .mod files to the current working\ndirectory.  For those that do not, this is set to \".\" and used when\nthe Fortran_MODULE_DIRECTORY target property is not set.\n", 
    "CMAKE_SHARED_MODULE_PREFIX": "CMAKE_SHARED_MODULE_PREFIX\n--------------------------\n\nThe prefix for loadable modules that you link to.\n\nThe prefix to use for the name of a loadable module on this platform.\n\nCMAKE_SHARED_MODULE_PREFIX_<LANG> overrides this for language <LANG>.\n", 
    "CMAKE_Fortran_FORMAT": "CMAKE_Fortran_FORMAT\n--------------------\n\nSet to FIXED or FREE to indicate the Fortran source layout.\n\nThis variable is used to initialize the Fortran_FORMAT property on all\nthe targets.  See that target property for additional information.\n", 
    "CMAKE_LIBRARY_ARCHITECTURE_REGEX": "CMAKE_LIBRARY_ARCHITECTURE_REGEX\n--------------------------------\n\nRegex matching possible target architecture library directory names.\n\nThis is used to detect CMAKE_<lang>_LIBRARY_ARCHITECTURE from the\nimplicit linker search path by matching the <arch> name.\n", 
    "PROJECT-NAME_VERSION_MINOR": "<PROJECT-NAME>_VERSION_MINOR\n----------------------------\n\nSecond version number component of the :variable:`<PROJECT-NAME>_VERSION`\nvariable as set by the :command:`project` command.\n", 
    "CMAKE_FIND_PACKAGE_WARN_NO_MODULE": "CMAKE_FIND_PACKAGE_WARN_NO_MODULE\n---------------------------------\n\nTell find_package to warn if called without an explicit mode.\n\nIf find_package is called without an explicit mode option (MODULE,\nCONFIG or NO_MODULE) and no Find<pkg>.cmake module is in\nCMAKE_MODULE_PATH then CMake implicitly assumes that the caller\nintends to search for a package configuration file.  If no package\nconfiguration file is found then the wording of the failure message\nmust account for both the case that the package is really missing and\nthe case that the project has a bug and failed to provide the intended\nFind module.  If instead the caller specifies an explicit mode option\nthen the failure message can be more specific.\n\nSet CMAKE_FIND_PACKAGE_WARN_NO_MODULE to TRUE to tell find_package to\nwarn when it implicitly assumes Config mode.  This helps developers\nenforce use of an explicit mode in all calls to find_package within a\nproject.\n", 
    "CMAKE_STATIC_LIBRARY_SUFFIX": "CMAKE_STATIC_LIBRARY_SUFFIX\n---------------------------\n\nThe suffix for static libraries that you link to.\n\nThe suffix to use for the end of a static library filename, .lib on\nWindows.\n\nCMAKE_STATIC_LIBRARY_SUFFIX_<LANG> overrides this for language <LANG>.\n", 
    "CMAKE_SKIP_INSTALL_RPATH": "CMAKE_SKIP_INSTALL_RPATH\n------------------------\n\nDo not include RPATHs in the install tree.\n\nNormally CMake uses the build tree for the RPATH when building\nexecutables etc on systems that use RPATH.  When the software is\ninstalled the executables etc are relinked by CMake to have the\ninstall RPATH.  If this variable is set to true then the software is\nalways installed without RPATH, even if RPATH is enabled when\nbuilding.  This can be useful for example to allow running tests from\nthe build directory with RPATH enabled before the installation step.\nTo omit RPATH in both the build and install steps, use\nCMAKE_SKIP_RPATH instead.\n", 
    "CMAKE_STATIC_LIBRARY_PREFIX": "CMAKE_STATIC_LIBRARY_PREFIX\n---------------------------\n\nThe prefix for static libraries that you link to.\n\nThe prefix to use for the name of a static library, lib on UNIX.\n\nCMAKE_STATIC_LIBRARY_PREFIX_<LANG> overrides this for language <LANG>.\n", 
    "CMAKE_LANG_COMPILER_LOADED": "CMAKE_<LANG>_COMPILER_LOADED\n----------------------------\n\nDefined to true if the language is enabled.\n\nWhen language <LANG> is enabled by project() or enable_language() this\nvariable is defined to 1.\n", 
    "CMAKE_RUNTIME_OUTPUT_DIRECTORY": "CMAKE_RUNTIME_OUTPUT_DIRECTORY\n------------------------------\n\nWhere to put all the RUNTIME targets when built.\n\nThis variable is used to initialize the RUNTIME_OUTPUT_DIRECTORY\nproperty on all the targets.  See that target property for additional\ninformation.\n", 
    "CMAKE_HOST_SYSTEM_VERSION": "CMAKE_HOST_SYSTEM_VERSION\n-------------------------\n\nOS version CMake is running on.\n\nThe same as CMAKE_SYSTEM_VERSION but for the host system instead of\nthe target system when cross compiling.\n", 
    "CMAKE_GNUtoMS": "CMAKE_GNUtoMS\n-------------\n\nConvert GNU import libraries (.dll.a) to MS format (.lib).\n\nThis variable is used to initialize the GNUtoMS property on targets\nwhen they are created.  See that target property for additional\ninformation.\n", 
    "CMAKE_SHARED_LINKER_FLAGS_CONFIG": "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>\n----------------------------------\n\nFlags to be used when linking a shared library.\n\nSame as CMAKE_C_FLAGS_* but used by the linker when creating shared\nlibraries.\n", 
    "MSVC60": "MSVC60\n------\n\nTrue when using Microsoft Visual C 6.0\n\nSet to true when the compiler is version 6.0 of Microsoft Visual C.\n", 
    "CMAKE_LANG_LINKER_PREFERENCE_PROPAGATES": "CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES\n-----------------------------------------\n\nTrue if CMAKE_<LANG>_LINKER_PREFERENCE propagates across targets.\n\nThis is used when CMake selects a linker language for a target.\nLanguages compiled directly into the target are always considered.  A\nlanguage compiled into static libraries linked by the target is\nconsidered if this variable is true.\n", 
    "CMAKE_EXE_LINKER_FLAGS": "CMAKE_EXE_LINKER_FLAGS\n----------------------\n\nLinker flags to be used to create executables.\n\nThese flags will be used by the linker when creating an executable.\n", 
    "CMAKE_LANG_COMPILER_ABI": "CMAKE_<LANG>_COMPILER_ABI\n-------------------------\n\nAn internal variable subject to change.\n\nThis is used in determining the compiler ABI and is subject to change.\n", 
    "CMAKE_LANG_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES": "CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES\n------------------------------------------------\n\nImplicit linker framework search path detected for language <LANG>.\n\nThese paths are implicit linker framework search directories for the\ncompiler's language.  CMake automatically detects these directories\nfor each language and reports the results in this variable.\n", 
    "CMAKE_AUTORCC": "CMAKE_AUTORCC\n-------------\n\nWhether to handle ``rcc`` automatically for Qt targets.\n\nThis variable is used to initialize the :prop_tgt:`AUTORCC` property on all the targets.\nSee that target property for additional information.\n", 
    "CMAKE_LANG_FLAGS": "CMAKE_<LANG>_FLAGS\n------------------\n\nFlags for all build types.\n\n<LANG> flags used regardless of the value of CMAKE_BUILD_TYPE.\n", 
    "CMAKE_AR": "CMAKE_AR\n--------\n\nName of archiving tool for static libraries.\n\nThis specifies the name of the program that creates archive or static\nlibraries.\n", 
    "PROJECT_BINARY_DIR": "PROJECT_BINARY_DIR\n------------------\n\nFull path to build directory for project.\n\nThis is the binary directory of the most recent :command:`project` command.\n", 
    "CMAKE_LANG_COMPILER_EXTERNAL_TOOLCHAIN": "CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN\n----------------------------------------\n\nThe external toolchain for cross-compiling, if supported.\n\nSome compiler toolchains do not ship their own auxilliary utilities such as\narchivers and linkers.  The compiler driver may support a command-line argument\nto specify the location of such tools.  CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN\nmay be set to a path to a path to the external toolchain and will be passed\nto the compiler driver if supported.\n\nThis variable may only be set in a toolchain file specified by\nthe :variable:`CMAKE_TOOLCHAIN_FILE` variable.\n", 
    "CMAKE_VS_MSDEV_COMMAND": "CMAKE_VS_MSDEV_COMMAND\n----------------------\n\nThe :generator:`Visual Studio 6` generator sets this variable to the\n``msdev.exe`` command installed with Visual Studio 6.\n\nThis variable is not defined by other generators even if ``msdev.exe``\nis installed on the computer.\n\nSee also the :variable:`CMAKE_MAKE_PROGRAM` variable.\n", 
    "CMAKE_POLICY_WARNING_CMPNNNN": "CMAKE_POLICY_WARNING_CMP<NNNN>\n------------------------------\n\nExplicitly enable or disable the warning when CMake Policy ``CMP<NNNN>``\nis not set.  This is meaningful only for the few policies that do not\nwarn by default:\n\n* ``CMAKE_POLICY_WARNING_CMP0025`` controls the warning for\n  policy :policy:`CMP0025`.\n* ``CMAKE_POLICY_WARNING_CMP0047`` controls the warning for\n  policy :policy:`CMP0047`.\n\nThis variable should not be set by a project in CMake code.  Project\ndevelopers running CMake may set this variable in their cache to\nenable the warning (e.g. ``-DCMAKE_POLICY_WARNING_CMP<NNNN>=ON``).\nAlternatively, running :manual:`cmake(1)` with the ``--debug-output``\nor ``--trace`` option will also enable the warning.\n", 
    "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME": "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME\n------------------------------------\n\nDefault component used in install() commands.\n\nIf an install() command is used without the COMPONENT argument, these\nfiles will be grouped into a default component.  The name of this\ndefault install component will be taken from this variable.  It\ndefaults to \"Unspecified\".\n", 
    "PROJECT-NAME_VERSION_PATCH": "<PROJECT-NAME>_VERSION_PATCH\n----------------------------\n\nThird version number component of the :variable:`<PROJECT-NAME>_VERSION`\nvariable as set by the :command:`project` command.\n", 
    "CMAKE_LANG_LINKER_PREFERENCE": "CMAKE_<LANG>_LINKER_PREFERENCE\n------------------------------\n\nPreference value for linker language selection.\n\nThe \"linker language\" for executable, shared library, and module\ntargets is the language whose compiler will invoke the linker.  The\nLINKER_LANGUAGE target property sets the language explicitly.\nOtherwise, the linker language is that whose linker preference value\nis highest among languages compiled and linked into the target.  See\nalso the CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES variable.\n", 
    "CMAKE_OSX_DEPLOYMENT_TARGET": "CMAKE_OSX_DEPLOYMENT_TARGET\n---------------------------\n\nSpecify the minimum version of OS X on which the target binaries are\nto be deployed.  CMake uses this value for the ``-mmacosx-version-min``\nflag and to help choose the default SDK\n(see :variable:`CMAKE_OSX_SYSROOT`).\n\nIf not set explicitly the value is initialized by the\n``MACOSX_DEPLOYMENT_TARGET`` environment variable, if set,\nand otherwise computed based on the host platform.\n\n.. include:: CMAKE_OSX_VARIABLE.txt\n", 
    "CMAKE_LANG_CREATE_STATIC_LIBRARY": "CMAKE_<LANG>_CREATE_STATIC_LIBRARY\n----------------------------------\n\nRule variable to create a static library.\n\nThis is a rule variable that tells CMake how to create a static\nlibrary for the language <LANG>.\n", 
    "CMAKE_MAKE_PROGRAM": "CMAKE_MAKE_PROGRAM\n------------------\n\nTool that can launch the native build system.\nThe value may be the full path to an executable or just the tool\nname if it is expected to be in the ``PATH``.\n\nThe tool selected depends on the :variable:`CMAKE_GENERATOR` used\nto configure the project:\n\n* The Makefile generators set this to ``make``, ``gmake``, or\n  a generator-specific tool (e.g. ``nmake`` for \"NMake Makefiles\").\n\n  These generators store ``CMAKE_MAKE_PROGRAM`` in the CMake cache\n  so that it may be edited by the user.\n\n* The Ninja generator sets this to ``ninja``.\n\n  This generator stores ``CMAKE_MAKE_PROGRAM`` in the CMake cache\n  so that it may be edited by the user.\n\n* The Xcode generator sets this to ``xcodebuild`` (or possibly an\n  otherwise undocumented ``cmakexbuild`` wrapper implementing some\n  workarounds).\n\n  This generator stores ``CMAKE_MAKE_PROGRAM`` in the CMake cache\n  so that it may be edited by the user.\n\n* The Visual Studio generators set this to the full path to\n  ``MSBuild.exe`` (VS >= 10), ``devenv.com`` (VS 7,8,9),\n  ``VCExpress.exe`` (VS Express 8,9), or ``msdev.exe`` (VS 6).\n  (See also variables\n  :variable:`CMAKE_VS_MSBUILD_COMMAND`,\n  :variable:`CMAKE_VS_DEVENV_COMMAND`, and\n  :variable:`CMAKE_VS_MSDEV_COMMAND`.)\n\n  These generators prefer to lookup the build tool at build time\n  rather than to store ``CMAKE_MAKE_PROGRAM`` in the CMake cache\n  ahead of time.  This is because the tools are version-specific\n  and can be located using the Windows Registry.  It is also\n  necessary because the proper build tool may depend on the\n  project content (e.g. the Intel Fortran plugin to VS 10 and 11\n  requires ``devenv.com`` to build its ``.vfproj`` project files\n  even though ``MSBuild.exe`` is normally preferred to support\n  the :variable:`CMAKE_GENERATOR_TOOLSET`).\n\n  For compatibility with versions of CMake prior to 3.0, if\n  a user or project explicitly adds ``CMAKE_MAKE_PROGRAM`` to\n  the CMake cache then CMake will use the specified value if\n  possible.\n\nThe ``CMAKE_MAKE_PROGRAM`` variable is set for use by project code.\nThe value is also used by the :manual:`cmake(1)` ``--build`` and\n:manual:`ctest(1)` ``--build-and-test`` tools to launch the native\nbuild process.\n", 
    "CMAKE_INCLUDE_DIRECTORIES_BEFORE": "CMAKE_INCLUDE_DIRECTORIES_BEFORE\n--------------------------------\n\nWhether to append or prepend directories by default in :command:`include_directories`.\n\nThis variable affects the default behavior of the :command:`include_directories`\ncommand. Setting this variable to 'ON' is equivalent to using the BEFORE option\nin all uses of that command.\n", 
    "CMAKE_LANG_SIMULATE_ID": "CMAKE_<LANG>_SIMULATE_ID\n------------------------\n\nIdentification string of \"simulated\" compiler.\n\nSome compilers simulate other compilers to serve as drop-in\nreplacements.  When CMake detects such a compiler it sets this\nvariable to what would have been the CMAKE_<LANG>_COMPILER_ID for the\nsimulated compiler.\n", 
    "CMAKE_BACKWARDS_COMPATIBILITY": "CMAKE_BACKWARDS_COMPATIBILITY\n-----------------------------\n\nDeprecated.  See CMake Policy :policy:`CMP0001` documentation.\n", 
    "CMAKE_EDIT_COMMAND": "CMAKE_EDIT_COMMAND\n------------------\n\nFull path to cmake-gui or ccmake.  Defined only for Makefile generators\nwhen not using an \"extra\" generator for an IDE.\n\nThis is the full path to the CMake executable that can graphically\nedit the cache.  For example, cmake-gui or ccmake.\n", 
    "CMAKE_COMPILER_IS_GNULANG": "CMAKE_COMPILER_IS_GNU<LANG>\n---------------------------\n\nTrue if the compiler is GNU.\n\nIf the selected <LANG> compiler is the GNU compiler then this is TRUE,\nif not it is FALSE.  Unlike the other per-language variables, this\nuses the GNU syntax for identifying languages instead of the CMake\nsyntax.  Recognized values of the <LANG> suffix are:\n\n::\n\n  CC = C compiler\n  CXX = C++ compiler\n  G77 = Fortran compiler\n", 
    "CYGWIN": "CYGWIN\n------\n\nTrue for Cygwin.\n\nSet to true when using Cygwin.\n", 
    "CMAKE_AUTOUIC_OPTIONS": "CMAKE_AUTOUIC_OPTIONS\n---------------------\n\nWhether to handle ``uic`` automatically for Qt targets.\n\nThis variable is used to initialize the :prop_tgt:`AUTOUIC_OPTIONS` property on\nall the targets.  See that target property for additional information.\n", 
    "CMAKE_MAP_IMPORTED_CONFIG_CONFIG": "CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>\n----------------------------------\n\nDefault value for MAP_IMPORTED_CONFIG_<CONFIG> of targets.\n\nThis variable is used to initialize the MAP_IMPORTED_CONFIG_<CONFIG>\nproperty on all the targets.  See that target property for additional\ninformation.\n", 
    "CMAKE_COLOR_MAKEFILE": "CMAKE_COLOR_MAKEFILE\n--------------------\n\nEnables color output when using the Makefile generator.\n\nWhen enabled, the generated Makefiles will produce colored output.\nDefault is ON.\n", 
    "CMAKE_MACOSX_BUNDLE": "CMAKE_MACOSX_BUNDLE\n-------------------\n\nDefault value for MACOSX_BUNDLE of targets.\n\nThis variable is used to initialize the MACOSX_BUNDLE property on all\nthe targets.  See that target property for additional information.\n", 
    "CMAKE_HOST_SYSTEM": "CMAKE_HOST_SYSTEM\n-----------------\n\nName of system cmake is being run on.\n\nThe same as CMAKE_SYSTEM but for the host system instead of the target\nsystem when cross compiling.\n", 
    "CMAKE_SOURCE_DIR": "CMAKE_SOURCE_DIR\n----------------\n\nThe path to the top level of the source tree.\n\nThis is the full path to the top level of the current CMake source\ntree.  For an in-source build, this would be the same as\nCMAKE_BINARY_DIR.\n", 
    "CMAKE_VISIBILITY_INLINES_HIDDEN": "CMAKE_VISIBILITY_INLINES_HIDDEN\n-------------------------------\n\nDefault value for VISIBILITY_INLINES_HIDDEN of targets.\n\nThis variable is used to initialize the VISIBILITY_INLINES_HIDDEN\nproperty on all the targets.  See that target property for additional\ninformation.\n", 
    "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION": "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION\n--------------------------------------\n\nWhen generating for Visual Studio 7 or greater with the Intel Fortran\nplugin installed, this specifies the .vfproj project file format\nversion.  This is intended for internal use by CMake and should not be\nused by project code.\n", 
    "CMAKE_INCLUDE_CURRENT_DIR": "CMAKE_INCLUDE_CURRENT_DIR\n-------------------------\n\nAutomatically add the current source- and build directories to the include path.\n\nIf this variable is enabled, CMake automatically adds in each\ndirectory ${CMAKE_CURRENT_SOURCE_DIR} and ${CMAKE_CURRENT_BINARY_DIR}\nto the include path for this directory.  These additional include\ndirectories do not propagate down to subdirectories.  This is useful\nmainly for out-of-source builds, where files generated into the build\ntree are included by files located in the source tree.\n\nBy default CMAKE_INCLUDE_CURRENT_DIR is OFF.\n", 
    "CMAKE_RANLIB": "CMAKE_RANLIB\n------------\n\nName of randomizing tool for static libraries.\n\nThis specifies name of the program that randomizes libraries on UNIX,\nnot used on Windows, but may be present.\n", 
    "CMAKE_INSTALL_NAME_DIR": "CMAKE_INSTALL_NAME_DIR\n----------------------\n\nMac OS X directory name for installed targets.\n\nCMAKE_INSTALL_NAME_DIR is used to initialize the INSTALL_NAME_DIR\nproperty on all targets.  See that target property for more\ninformation.\n", 
    "CMAKE_PREFIX_PATH": "CMAKE_PREFIX_PATH\n-----------------\n\nPath used for searching by FIND_XXX(), with appropriate suffixes added.\n\nSpecifies a path which will be used by the FIND_XXX() commands.  It\ncontains the \"base\" directories, the FIND_XXX() commands append\nappropriate subdirectories to the base directories.  So FIND_PROGRAM()\nadds /bin to each of the directories in the path, FIND_LIBRARY()\nappends /lib to each of the directories, and FIND_PATH() and\nFIND_FILE() append /include .  By default it is empty, it is intended\nto be set by the project.  See also CMAKE_SYSTEM_PREFIX_PATH,\nCMAKE_INCLUDE_PATH, CMAKE_LIBRARY_PATH, CMAKE_PROGRAM_PATH.\n", 
    "CMAKE_PROJECT_PROJECT-NAME_INCLUDE": "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE\n------------------------------------\n\nA CMake language file or module to be included by the :command:`project`\ncommand.  This is is intended for injecting custom code into project\nbuilds without modifying their source.\n", 
    "CMAKE_CFG_INTDIR": "CMAKE_CFG_INTDIR\n----------------\n\nBuild-time reference to per-configuration output subdirectory.\n\nFor native build systems supporting multiple configurations in the\nbuild tree (such as Visual Studio and Xcode), the value is a reference\nto a build-time variable specifying the name of the per-configuration\noutput subdirectory.  On Makefile generators this evaluates to \".\"\nbecause there is only one configuration in a build tree.  Example\nvalues:\n\n::\n\n  $(IntDir)        = Visual Studio 6\n  $(OutDir)        = Visual Studio 7, 8, 9\n  $(Configuration) = Visual Studio 10\n  $(CONFIGURATION) = Xcode\n  .                = Make-based tools\n\nSince these values are evaluated by the native build system, this\nvariable is suitable only for use in command lines that will be\nevaluated at build time.  Example of intended usage:\n\n::\n\n  add_executable(mytool mytool.c)\n  add_custom_command(\n    OUTPUT out.txt\n    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool\n            ${CMAKE_CURRENT_SOURCE_DIR}/in.txt out.txt\n    DEPENDS mytool in.txt\n    )\n  add_custom_target(drive ALL DEPENDS out.txt)\n\nNote that CMAKE_CFG_INTDIR is no longer necessary for this purpose but\nhas been left for compatibility with existing projects.  Instead\nadd_custom_command() recognizes executable target names in its COMMAND\noption, so \"${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool\"\ncan be replaced by just \"mytool\".\n\nThis variable is read-only.  Setting it is undefined behavior.  In\nmulti-configuration build systems the value of this variable is passed\nas the value of preprocessor symbol \"CMAKE_INTDIR\" to the compilation\nof all source files.\n", 
    "CMAKE_MFC_FLAG": "CMAKE_MFC_FLAG\n--------------\n\nTell cmake to use MFC for an executable or dll.\n\nThis can be set in a CMakeLists.txt file and will enable MFC in the\napplication.  It should be set to 1 for the static MFC library, and 2\nfor the shared MFC library.  This is used in Visual Studio 6 and 7\nproject files.  The CMakeSetup dialog used MFC and the CMakeLists.txt\nlooks like this:\n\n::\n\n  add_definitions(-D_AFXDLL)\n  set(CMAKE_MFC_FLAG 2)\n  add_executable(CMakeSetup WIN32 ${SRCS})\n", 
    "CMAKE_VS_DEVENV_COMMAND": "CMAKE_VS_DEVENV_COMMAND\n-----------------------\n\nThe generators for :generator:`Visual Studio 7` and above set this\nvariable to the ``devenv.com`` command installed with the corresponding\nVisual Studio version.  Note that this variable may be empty on\nVisual Studio Express editions because they do not provide this tool.\n\nThis variable is not defined by other generators even if ``devenv.com``\nis installed on the computer.\n\nThe :variable:`CMAKE_VS_MSBUILD_COMMAND` is also provided for\n:generator:`Visual Studio 10 2010` and above.\nSee also the :variable:`CMAKE_MAKE_PROGRAM` variable.\n", 
    "CMAKE_VERSION": "CMAKE_VERSION\n-------------\n\nThe CMake version string as three non-negative integer components\nseparated by ``.`` and possibly followed by ``-`` and other information.\nThe first two components represent the feature level and the third\ncomponent represents either a bug-fix level or development date.\n\nRelease versions and release candidate versions of CMake use the format::\n\n  <major>.<minor>.<patch>[-rc<n>]\n\nwhere the ``<patch>`` component is less than ``20000000``.  Development\nversions of CMake use the format::\n\n  <major>.<minor>.<date>[-<id>]\n\nwhere the ``<date>`` component is of format ``CCYYMMDD`` and ``<id>``\nmay contain arbitrary text.  This represents development as of a\nparticular date following the ``<major>.<minor>`` feature release.\n\nIndividual component values are also available in variables:\n\n* :variable:`CMAKE_MAJOR_VERSION`\n* :variable:`CMAKE_MINOR_VERSION`\n* :variable:`CMAKE_PATCH_VERSION`\n* :variable:`CMAKE_TWEAK_VERSION`\n\nUse the :command:`if` command ``VERSION_LESS``, ``VERSION_EQUAL``, or\n``VERSION_GREATER`` operators to compare version string values against\n``CMAKE_VERSION`` using a component-wise test.  Version component\nvalues may be 10 or larger so do not attempt to compare version\nstrings as floating-point numbers.\n\n.. note::\n\n  CMake versions 2.8.2 through 2.8.12 used three components for the\n  feature level.  Release versions represented the bug-fix level in a\n  fourth component, i.e. ``<major>.<minor>.<patch>[.<tweak>][-rc<n>]``.\n  Development versions represented the development date in the fourth\n  component, i.e. ``<major>.<minor>.<patch>.<date>[-<id>]``.\n\n  CMake versions prior to 2.8.2 used three components for the\n  feature level and had no bug-fix component.  Release versions\n  used an even-valued second component, i.e.\n  ``<major>.<even-minor>.<patch>[-rc<n>]``.  Development versions\n  used an odd-valued second component with the development date as\n  the third component, i.e. ``<major>.<odd-minor>.<date>``.\n\n  The ``CMAKE_VERSION`` variable is defined by CMake 2.6.3 and higher.\n  Earlier versions defined only the individual component variables.\n", 
    "CMAKE_LANG_COMPILER_TARGET": "CMAKE_<LANG>_COMPILER_TARGET\n----------------------------\n\nThe target for cross-compiling, if supported.\n\nSome compiler drivers are inherently cross-compilers, such as clang and\nQNX qcc. These compiler drivers support a command-line argument to specify\nthe target to cross-compile for.\n\nThis variable may only be set in a toolchain file specified by\nthe :variable:`CMAKE_TOOLCHAIN_FILE` variable.\n", 
    "CMAKE_FIND_LIBRARY_PREFIXES": "CMAKE_FIND_LIBRARY_PREFIXES\n---------------------------\n\nPrefixes to prepend when looking for libraries.\n\nThis specifies what prefixes to add to library names when the\nfind_library command looks for libraries.  On UNIX systems this is\ntypically lib, meaning that when trying to find the foo library it\nwill look for libfoo.\n", 
    "CMAKE_PROGRAM_PATH": "CMAKE_PROGRAM_PATH\n------------------\n\nPath used for searching by FIND_PROGRAM().\n\nSpecifies a path which will be used by FIND_PROGRAM().  FIND_PROGRAM()\nwill check each of the contained directories for the existence of the\nprogram which is currently searched.  By default it is empty, it is\nintended to be set by the project.  See also\nCMAKE_SYSTEM_PROGRAM_PATH, CMAKE_PREFIX_PATH.\n", 
    "CMAKE_ARCHIVE_OUTPUT_DIRECTORY": "CMAKE_ARCHIVE_OUTPUT_DIRECTORY\n------------------------------\n\nWhere to put all the ARCHIVE targets when built.\n\nThis variable is used to initialize the ARCHIVE_OUTPUT_DIRECTORY\nproperty on all the targets.  See that target property for additional\ninformation.\n", 
    "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION\n------------------------------------------\n\nAsk cmake_install.cmake script to warn each time a file with absolute INSTALL DESTINATION is encountered.\n\nThis variable is used by CMake-generated cmake_install.cmake scripts.\nIf one sets this variable to ON while running the script, it may get\nwarning messages from the script.\n", 
    "CMAKE_LANG_VISIBILITY_PRESET": "CMAKE_<LANG>_VISIBILITY_PRESET\n------------------------------\n\nDefault value for <LANG>_VISIBILITY_PRESET of targets.\n\nThis variable is used to initialize the <LANG>_VISIBILITY_PRESET\nproperty on all the targets.  See that target property for additional\ninformation.\n", 
    "CMAKE_MODULE_LINKER_FLAGS_CONFIG": "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>\n----------------------------------\n\nFlags to be used when linking a module.\n\nSame as CMAKE_C_FLAGS_* but used by the linker when creating modules.\n", 
    "CPACK_SET_DESTDIR": "CPACK_SET_DESTDIR\n-----------------\n\nBoolean toggle to make CPack use DESTDIR mechanism when packaging.\n\nDESTDIR means DESTination DIRectory.  It is commonly used by makefile\nusers in order to install software at non-default location.  It is a\nbasic relocation mechanism that should not be used on Windows (see\nCMAKE_INSTALL_PREFIX documentation).  It is usually invoked like this:\n\n::\n\n make DESTDIR=/home/john install\n\nwhich will install the concerned software using the installation\nprefix, e.g.  \"/usr/local\" prepended with the DESTDIR value which\nfinally gives \"/home/john/usr/local\".  When preparing a package, CPack\nfirst installs the items to be packaged in a local (to the build tree)\ndirectory by using the same DESTDIR mechanism.  Nevertheless, if\nCPACK_SET_DESTDIR is set then CPack will set DESTDIR before doing the\nlocal install.  The most noticeable difference is that without\nCPACK_SET_DESTDIR, CPack uses CPACK_PACKAGING_INSTALL_PREFIX as a\nprefix whereas with CPACK_SET_DESTDIR set, CPack will use\nCMAKE_INSTALL_PREFIX as a prefix.\n\nManually setting CPACK_SET_DESTDIR may help (or simply be necessary)\nif some install rules uses absolute DESTINATION (see CMake INSTALL\ncommand).  However, starting with CPack/CMake 2.8.3 RPM and DEB\ninstallers tries to handle DESTDIR automatically so that it is seldom\nnecessary for the user to set it.\n", 
    "CMAKE_STATIC_LINKER_FLAGS": "CMAKE_STATIC_LINKER_FLAGS\n-------------------------\n\nLinker flags to be used to create static libraries.\n\nThese flags will be used by the linker when creating a static library.\n", 
    "CMAKE_USER_MAKE_RULES_OVERRIDE_LANG": "CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>\n-------------------------------------\n\nSpecify a CMake file that overrides platform information for <LANG>.\n\nThis is a language-specific version of CMAKE_USER_MAKE_RULES_OVERRIDE\nloaded only when enabling language <LANG>.\n", 
    "CMAKE_LANG_ARCHIVE_FINISH": "CMAKE_<LANG>_ARCHIVE_FINISH\n---------------------------\n\nRule variable to finish an existing static archive.\n\nThis is a rule variable that tells CMake how to finish a static\narchive.  It is used in place of CMAKE_<LANG>_CREATE_STATIC_LIBRARY on\nsome platforms in order to support large object counts.  See also\nCMAKE_<LANG>_ARCHIVE_CREATE and CMAKE_<LANG>_ARCHIVE_APPEND.\n", 
    "CMAKE_SHARED_LIBRARY_PREFIX": "CMAKE_SHARED_LIBRARY_PREFIX\n---------------------------\n\nThe prefix for shared libraries that you link to.\n\nThe prefix to use for the name of a shared library, lib on UNIX.\n\nCMAKE_SHARED_LIBRARY_PREFIX_<LANG> overrides this for language <LANG>.\n", 
    "CMAKE_MODULE_PATH": "CMAKE_MODULE_PATH\n-----------------\n\nList of directories to search for CMake modules.\n\nCommands like include() and find_package() search for files in\ndirectories listed by this variable before checking the default\nmodules that come with CMake.\n", 
    "CMAKE_CURRENT_LIST_DIR": "CMAKE_CURRENT_LIST_DIR\n----------------------\n\nFull directory of the listfile currently being processed.\n\nAs CMake processes the listfiles in your project this variable will\nalways be set to the directory where the listfile which is currently\nbeing processed (CMAKE_CURRENT_LIST_FILE) is located.  The value has\ndynamic scope.  When CMake starts processing commands in a source file\nit sets this variable to the directory where this file is located.\nWhen CMake finishes processing commands from the file it restores the\nprevious value.  Therefore the value of the variable inside a macro or\nfunction is the directory of the file invoking the bottom-most entry\non the call stack, not the directory of the file containing the macro\nor function definition.\n\nSee also CMAKE_CURRENT_LIST_FILE.\n", 
    "CMAKE_SHARED_LIBRARY_SUFFIX": "CMAKE_SHARED_LIBRARY_SUFFIX\n---------------------------\n\nThe suffix for shared libraries that you link to.\n\nThe suffix to use for the end of a shared library filename, .dll on\nWindows.\n\nCMAKE_SHARED_LIBRARY_SUFFIX_<LANG> overrides this for language <LANG>.\n", 
    "CMAKE_LANG_LINK_EXECUTABLE": "CMAKE_<LANG>_LINK_EXECUTABLE\n----------------------------\n\nRule variable to link an executable.\n\nRule variable to link an executable for the given language.\n", 
    "CMAKE_LANG_FLAGS_RELWITHDEBINFO": "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO\n---------------------------------\n\nFlags for RelWithDebInfo type or configuration.\n\n<LANG> flags used when CMAKE_BUILD_TYPE is RelWithDebInfo.  Short for\nRelease With Debug Information.\n", 
    "CMAKE_LIBRARY_ARCHITECTURE": "CMAKE_LIBRARY_ARCHITECTURE\n--------------------------\n\nTarget architecture library directory name, if detected.\n\nThis is the value of CMAKE_<lang>_LIBRARY_ARCHITECTURE as detected for\none of the enabled languages.\n", 
    "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM": "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM\n---------------------------------\n\n.. |FIND_XXX| replace:: :command:`find_program`\n\n.. include:: CMAKE_FIND_ROOT_PATH_MODE_XXX.txt\n", 
    "CMAKE_DL_LIBS": "CMAKE_DL_LIBS\n-------------\n\nName of library containing dlopen and dlcose.\n\nThe name of the library that has dlopen and dlclose in it, usually\n-ldl on most UNIX machines.\n", 
    "CMAKE_TRY_COMPILE_CONFIGURATION": "CMAKE_TRY_COMPILE_CONFIGURATION\n-------------------------------\n\nBuild configuration used for try_compile and try_run projects.\n\nProjects built by try_compile and try_run are built synchronously\nduring the CMake configuration step.  Therefore a specific build\nconfiguration must be chosen even if the generated build system\nsupports multiple configurations.\n", 
    "CMAKE_FIND_LIBRARY_SUFFIXES": "CMAKE_FIND_LIBRARY_SUFFIXES\n---------------------------\n\nSuffixes to append when looking for libraries.\n\nThis specifies what suffixes to add to library names when the\nfind_library command looks for libraries.  On Windows systems this is\ntypically .lib and .dll, meaning that when trying to find the foo\nlibrary it will look for foo.dll etc.\n", 
    "CMAKE_LANG_COMPILER_ID": "CMAKE_<LANG>_COMPILER_ID\n------------------------\n\nCompiler identification string.\n\nA short string unique to the compiler vendor.  Possible values\ninclude:\n\n::\n\n  Absoft = Absoft Fortran (absoft.com)\n  ADSP = Analog VisualDSP++ (analog.com)\n  AppleClang = Apple Clang (apple.com)\n  Clang = LLVM Clang (clang.llvm.org)\n  Cray = Cray Compiler (cray.com)\n  Embarcadero, Borland = Embarcadero (embarcadero.com)\n  G95 = G95 Fortran (g95.org)\n  GNU = GNU Compiler Collection (gcc.gnu.org)\n  HP = Hewlett-Packard Compiler (hp.com)\n  Intel = Intel Compiler (intel.com)\n  MIPSpro = SGI MIPSpro (sgi.com)\n  MSVC = Microsoft Visual Studio (microsoft.com)\n  PGI = The Portland Group (pgroup.com)\n  PathScale = PathScale (pathscale.com)\n  SDCC = Small Device C Compiler (sdcc.sourceforge.net)\n  SunPro = Oracle Solaris Studio (oracle.com)\n  TI = Texas Instruments (ti.com)\n  TinyCC = Tiny C Compiler (tinycc.org)\n  Watcom = Open Watcom (openwatcom.org)\n  XL, VisualAge, zOS = IBM XL (ibm.com)\n\nThis variable is not guaranteed to be defined for all compilers or\nlanguages.\n", 
    "CMAKE_LANG_CREATE_SHARED_LIBRARY": "CMAKE_<LANG>_CREATE_SHARED_LIBRARY\n----------------------------------\n\nRule variable to create a shared library.\n\nThis is a rule variable that tells CMake how to create a shared\nlibrary for the language <LANG>.\n", 
    "CMAKE_CURRENT_LIST_FILE": "CMAKE_CURRENT_LIST_FILE\n-----------------------\n\nFull path to the listfile currently being processed.\n\nAs CMake processes the listfiles in your project this variable will\nalways be set to the one currently being processed.  The value has\ndynamic scope.  When CMake starts processing commands in a source file\nit sets this variable to the location of the file.  When CMake\nfinishes processing commands from the file it restores the previous\nvalue.  Therefore the value of the variable inside a macro or function\nis the file invoking the bottom-most entry on the call stack, not the\nfile containing the macro or function definition.\n\nSee also CMAKE_PARENT_LIST_FILE.\n", 
    "UNIX": "UNIX\n----\n\nTrue for UNIX and UNIX like operating systems.\n\nSet to true when the target system is UNIX or UNIX like (i.e.  APPLE\nand CYGWIN).\n", 
    "CMAKE_SKIP_RPATH": "CMAKE_SKIP_RPATH\n----------------\n\nIf true, do not add run time path information.\n\nIf this is set to TRUE, then the rpath information is not added to\ncompiled executables.  The default is to add rpath information if the\nplatform supports it.  This allows for easy running from the build\ntree.  To omit RPATH in the install step, but not the build step, use\nCMAKE_SKIP_INSTALL_RPATH instead.\n", 
    "PROJECT-NAME_VERSION_MAJOR": "<PROJECT-NAME>_VERSION_MAJOR\n----------------------------\n\nFirst version number component of the :variable:`<PROJECT-NAME>_VERSION`\nvariable as set by the :command:`project` command.\n", 
    "ENV": "ENV\n---\n\nAccess environment variables.\n\nUse the syntax $ENV{VAR} to read environment variable VAR.  See also\nthe set() command to set ENV{VAR}.\n", 
    "CMAKE_SYSTEM_PROCESSOR": "CMAKE_SYSTEM_PROCESSOR\n----------------------\n\nThe name of the CPU CMake is building for.\n\nOn systems that support uname, this variable is set to the output of\nuname -p, on windows it is set to the value of the environment\nvariable PROCESSOR_ARCHITECTURE\n", 
    "CMAKE_TOOLCHAIN_FILE": "CMAKE_TOOLCHAIN_FILE\n--------------------\n\nPath to toolchain file supplied to :manual:`cmake(1)`.\n\nThis variable is specified on the command line when cross-compiling with CMake.\nIt is the path to a file which is read early in the CMake run and which specifies\nlocations for compilers and toolchain utilities, and other target platform and\ncompiler related information.\n", 
    "CMAKE_GENERATOR_TOOLSET": "CMAKE_GENERATOR_TOOLSET\n-----------------------\n\nNative build system toolset name specified by user.\n\nSome CMake generators support a toolset name to be given to the native\nbuild system to choose a compiler.  If the user specifies a toolset\nname (e.g.  via the cmake -T option) the value will be available in\nthis variable.\n", 
    "CMAKE_AUTOMOC_MOC_OPTIONS": "CMAKE_AUTOMOC_MOC_OPTIONS\n-------------------------\n\nAdditional options for ``moc`` when using :variable:`CMAKE_AUTOMOC`.\n\nThis variable is used to initialize the :prop_tgt:`AUTOMOC_MOC_OPTIONS` property\non all the targets.  See that target property for additional information.\n", 
    "CMAKE_SKIP_INSTALL_RULES": "CMAKE_SKIP_INSTALL_RULES\n------------------------\n\nWhether to disable generation of installation rules.\n\nIf TRUE, cmake will neither generate installaton rules nor\nwill it generate cmake_install.cmake files. This variable is FALSE by default.\n", 
    "CMAKE_TWEAK_VERSION": "CMAKE_TWEAK_VERSION\n-------------------\n\nDefined to ``0`` for compatibility with code written for older\nCMake versions that may have defined higher values.\n\n.. note::\n\n  In CMake versions 2.8.2 through 2.8.12, this variable holds\n  the fourth version number component of the\n  :variable:`CMAKE_VERSION` variable.\n", 
    "CMAKE_AUTOUIC": "CMAKE_AUTOUIC\n-------------\n\nWhether to handle ``uic`` automatically for Qt targets.\n\nThis variable is used to initialize the :prop_tgt:`AUTOUIC` property on all the targets.\nSee that target property for additional information.\n", 
    "CMAKE_SHARED_MODULE_SUFFIX": "CMAKE_SHARED_MODULE_SUFFIX\n--------------------------\n\nThe suffix for shared libraries that you link to.\n\nThe suffix to use for the end of a loadable module filename on this\nplatform\n\nCMAKE_SHARED_MODULE_SUFFIX_<LANG> overrides this for language <LANG>.\n", 
    "WIN32": "WIN32\n-----\n\nTrue on windows systems, including win64.\n\nSet to true when the target system is Windows.\n", 
    "CMAKE_LANG_FLAGS_RELEASE": "CMAKE_<LANG>_FLAGS_RELEASE\n--------------------------\n\nFlags for Release build type or configuration.\n\n<LANG> flags used when CMAKE_BUILD_TYPE is Release\n", 
    "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE": "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE\n----------------------------------------\n\nWhether to force prepending of project include directories.\n\nThis variable affects the order of include directories generated in compiler\ncommand lines.  If set to 'ON', it causes the :variable:`CMAKE_SOURCE_DIR` and\nthe :variable:`CMAKE_BINARY_DIR` to appear first.\n", 
    "CMAKE_Fortran_MODDIR_FLAG": "CMAKE_Fortran_MODDIR_FLAG\n-------------------------\n\nFortran flag for module output directory.\n\nThis stores the flag needed to pass the value of the\nFortran_MODULE_DIRECTORY target property to the compiler.\n", 
    "CMAKE_SIZEOF_VOID_P": "CMAKE_SIZEOF_VOID_P\n-------------------\n\nSize of a void pointer.\n\nThis is set to the size of a pointer on the machine, and is determined\nby a try compile.  If a 64 bit size is found, then the library search\npath is modified to look for 64 bit libraries first.\n", 
    "CMAKE_LIBRARY_PATH": "CMAKE_LIBRARY_PATH\n------------------\n\nPath used for searching by FIND_LIBRARY().\n\nSpecifies a path which will be used by FIND_LIBRARY().  FIND_LIBRARY()\nwill check each of the contained directories for the existence of the\nlibrary which is currently searched.  By default it is empty, it is\nintended to be set by the project.  See also\nCMAKE_SYSTEM_LIBRARY_PATH, CMAKE_PREFIX_PATH.\n", 
    "MSVC_VERSION": "MSVC_VERSION\n------------\n\nThe version of Microsoft Visual C/C++ being used if any.\n\nKnown version numbers are:\n\n::\n\n  1200 = VS  6.0\n  1300 = VS  7.0\n  1310 = VS  7.1\n  1400 = VS  8.0\n  1500 = VS  9.0\n  1600 = VS 10.0\n  1700 = VS 11.0\n  1800 = VS 12.0\n", 
    "CMAKE_LANG_OUTPUT_EXTENSION": "CMAKE_<LANG>_OUTPUT_EXTENSION\n-----------------------------\n\nExtension for the output of a compile for a single file.\n\nThis is the extension for an object file for the given <LANG>.  For\nexample .obj for C on Windows.\n", 
    "CMAKE_FIND_NO_INSTALL_PREFIX": "CMAKE_FIND_NO_INSTALL_PREFIX\n----------------------------\n\nIgnore the :variable:`CMAKE_INSTALL_PREFIX` when searching for assets.\n\nCMake adds the :variable:`CMAKE_INSTALL_PREFIX` and the\n:variable:`CMAKE_STAGING_PREFIX` variable to the\n:variable:`CMAKE_SYSTEM_PREFIX_PATH` by default. This variable may be set\non the command line to control that behavior.\n\nSet :variable:`CMAKE_FIND_NO_INSTALL_PREFIX` to TRUE to tell find_package not\nto search in the :variable:`CMAKE_INSTALL_PREFIX` or\n:variable:`CMAKE_STAGING_PREFIX` by default.  Note that the\nprefix may still be searched for other reasons, such as being the same prefix\nas the CMake installation, or for being a built-in system prefix.\n", 
    "CMAKE_XCODE_PLATFORM_TOOLSET": "CMAKE_XCODE_PLATFORM_TOOLSET\n----------------------------\n\nXcode compiler selection.\n\nXcode supports selection of a compiler from one of the installed\ntoolsets.  CMake provides the name of the chosen toolset in this\nvariable, if any is explicitly selected (e.g.  via the cmake -T\noption).\n", 
    "CMAKE_LANG_COMPILER_VERSION": "CMAKE_<LANG>_COMPILER_VERSION\n-----------------------------\n\nCompiler version string.\n\nCompiler version in major[.minor[.patch[.tweak]]] format.  This\nvariable is not guaranteed to be defined for all compilers or\nlanguages.\n", 
    "CMAKE_LANG_SIMULATE_VERSION": "CMAKE_<LANG>_SIMULATE_VERSION\n-----------------------------\n\nVersion string of \"simulated\" compiler.\n\nSome compilers simulate other compilers to serve as drop-in\nreplacements.  When CMake detects such a compiler it sets this\nvariable to what would have been the CMAKE_<LANG>_COMPILER_VERSION for\nthe simulated compiler.\n", 
    "CMAKE_POLICY_DEFAULT_CMPNNNN": "CMAKE_POLICY_DEFAULT_CMP<NNNN>\n------------------------------\n\nDefault for CMake Policy CMP<NNNN> when it is otherwise left unset.\n\nCommands cmake_minimum_required(VERSION) and cmake_policy(VERSION) by\ndefault leave policies introduced after the given version unset.  Set\nCMAKE_POLICY_DEFAULT_CMP<NNNN> to OLD or NEW to specify the default\nfor policy CMP<NNNN>, where <NNNN> is the policy number.\n\nThis variable should not be set by a project in CMake code; use\ncmake_policy(SET) instead.  Users running CMake may set this variable\nin the cache (e.g.  -DCMAKE_POLICY_DEFAULT_CMP<NNNN>=<OLD|NEW>) to set\na policy not otherwise set by the project.  Set to OLD to quiet a\npolicy warning while using old behavior or to NEW to try building the\nproject with new behavior.\n", 
    "CMAKE_HOST_APPLE": "CMAKE_HOST_APPLE\n----------------\n\nTrue for Apple OS X operating systems.\n\nSet to true when the host system is Apple OS X.\n", 
    "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY": "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY\n---------------------------------\n\nDon't make the install target depend on the all target.\n\nBy default, the \"install\" target depends on the \"all\" target.  This\nhas the effect, that when \"make install\" is invoked or INSTALL is\nbuilt, first the \"all\" target is built, then the installation starts.\nIf CMAKE_SKIP_INSTALL_ALL_DEPENDENCY is set to TRUE, this dependency\nis not created, so the installation process will start immediately,\nindependent from whether the project has been completely built or not.\n", 
    "CMAKE_LINK_LIBRARY_FLAG": "CMAKE_LINK_LIBRARY_FLAG\n-----------------------\n\nFlag to be used to link a library into an executable.\n\nThe flag will be used to specify a library to link to an executable.\nOn most compilers this is \"-l\".\n", 
    "CMAKE_MACOSX_RPATH": "CMAKE_MACOSX_RPATH\n-------------------\n\nWhether to use rpaths on Mac OS X.\n\nThis variable is used to initialize the :prop_tgt:`MACOSX_RPATH` property on\nall targets.\n", 
    "PROJECT_VERSION_PATCH": "PROJECT_VERSION_PATCH\n---------------------\n\nThird version number component of the :variable:`PROJECT_VERSION`\nvariable as set by the :command:`project` command.\n", 
    "CMAKE_SYSROOT": "CMAKE_SYSROOT\n-------------\n\nPath to pass to the compiler in the ``--sysroot`` flag.\n\nThe ``CMAKE_SYSROOT`` content is passed to the compiler in the ``--sysroot``\nflag, if supported.  The path is also stripped from the RPATH/RUNPATH if\nnecessary on installation.  The ``CMAKE_SYSROOT`` is also used to prefix\npaths searched by the ``find_*`` commands.\n\nThis variable may only be set in a toolchain file specified by\nthe :variable:`CMAKE_TOOLCHAIN_FILE` variable.\n", 
    "CMAKE_STAGING_PREFIX": "CMAKE_STAGING_PREFIX\n--------------------\n\nThis variable may be set to a path to install to when cross-compiling. This can\nbe useful if the path in :variable:`CMAKE_SYSROOT` is read-only, or otherwise\nshould remain pristine.\n\nThe CMAKE_STAGING_PREFIX location is also used as a search prefix by the ``find_*``\ncommands. This can be controlled by setting the :variable:`CMAKE_FIND_NO_INSTALL_PREFIX`\nvariable.\n\nIf any RPATH/RUNPATH entries passed to the linker contain the CMAKE_STAGING_PREFIX,\nthe matching path fragments are replaced with the :variable:`CMAKE_INSTALL_PREFIX`.\n", 
    "CMAKE_ABSOLUTE_DESTINATION_FILES": "CMAKE_ABSOLUTE_DESTINATION_FILES\n--------------------------------\n\nList of files which have been installed using  an ABSOLUTE DESTINATION path.\n\nThis variable is defined by CMake-generated cmake_install.cmake\nscripts.  It can be used (read-only) by programs or scripts that\nsource those install scripts.  This is used by some CPack generators\n(e.g.  RPM).\n", 
    "LIBRARY_OUTPUT_PATH": "LIBRARY_OUTPUT_PATH\n-------------------\n\nOld library location variable.\n\nThe target properties ARCHIVE_OUTPUT_DIRECTORY,\nLIBRARY_OUTPUT_DIRECTORY, and RUNTIME_OUTPUT_DIRECTORY supercede this\nvariable for a target if they are set.  Library targets are otherwise\nplaced in this directory.\n", 
    "EXECUTABLE_OUTPUT_PATH": "EXECUTABLE_OUTPUT_PATH\n----------------------\n\nOld executable location variable.\n\nThe target property RUNTIME_OUTPUT_DIRECTORY supercedes this variable\nfor a target if it is set.  Executable targets are otherwise placed in\nthis directory.\n", 
    "CMAKE_EXTRA_GENERATOR": "CMAKE_EXTRA_GENERATOR\n---------------------\n\nThe extra generator used to build the project.\n\nWhen using the Eclipse, CodeBlocks or KDevelop generators, CMake\ngenerates Makefiles (CMAKE_GENERATOR) and additionally project files\nfor the respective IDE.  This IDE project file generator is stored in\nCMAKE_EXTRA_GENERATOR (e.g.  \"Eclipse CDT4\").\n", 
    "XCODE_VERSION": "XCODE_VERSION\n-------------\n\nVersion of Xcode (Xcode generator only).\n\nUnder the Xcode generator, this is the version of Xcode as specified\nin \"Xcode.app/Contents/version.plist\" (such as \"3.1.2\").\n", 
    "CPACK_INCLUDE_TOPLEVEL_DIRECTORY": "CPACK_INCLUDE_TOPLEVEL_DIRECTORY\n--------------------------------\n\nBoolean toggle to include/exclude top level directory.\n\nWhen preparing a package CPack installs the item under the so-called\ntop level directory.  The purpose of is to include (set to 1 or ON or\nTRUE) the top level directory in the package or not (set to 0 or OFF\nor FALSE).\n\nEach CPack generator has a built-in default value for this variable.\nE.g.  Archive generators (ZIP, TGZ, ...) includes the top level\nwhereas RPM or DEB don't.  The user may override the default value by\nsetting this variable.\n\nThere is a similar variable CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY\nwhich may be used to override the behavior for the component packaging\ncase which may have different default value for historical (now\nbackward compatibility) reason.\n", 
    "CMAKE_LANG_IMPLICIT_INCLUDE_DIRECTORIES": "CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES\n-----------------------------------------\n\nDirectories implicitly searched by the compiler for header files.\n\nCMake does not explicitly specify these directories on compiler\ncommand lines for language <LANG>.  This prevents system include\ndirectories from being treated as user include directories on some\ncompilers.\n", 
    "CMAKE_CURRENT_BINARY_DIR": "CMAKE_CURRENT_BINARY_DIR\n------------------------\n\nThe path to the binary directory currently being processed.\n\nThis the full path to the build directory that is currently being\nprocessed by cmake.  Each directory added by add_subdirectory will\ncreate a binary directory in the build tree, and as it is being\nprocessed this variable will be set.  For in-source builds this is the\ncurrent source directory being processed.\n", 
    "CMAKE_CACHEFILE_DIR": "CMAKE_CACHEFILE_DIR\n-------------------\n\nThe directory with the CMakeCache.txt file.\n\nThis is the full path to the directory that has the CMakeCache.txt\nfile in it.  This is the same as CMAKE_BINARY_DIR.\n", 
    "PROJECT_VERSION_MINOR": "PROJECT_VERSION_MINOR\n---------------------\n\nSecond version number component of the :variable:`PROJECT_VERSION`\nvariable as set by the :command:`project` command.\n", 
    "MSVC11": "MSVC11\n------\n\nTrue when using Microsoft Visual C 11.0\n\nSet to true when the compiler is version 11.0 of Microsoft Visual C.\n", 
    "CMAKE_DISABLE_FIND_PACKAGE_PackageName": "CMAKE_DISABLE_FIND_PACKAGE_<PackageName>\n----------------------------------------\n\nVariable for disabling find_package() calls.\n\nEvery non-REQUIRED find_package() call in a project can be disabled by\nsetting the variable CMAKE_DISABLE_FIND_PACKAGE_<PackageName> to TRUE.\nThis can be used to build a project without an optional package,\nalthough that package is installed.\n\nThis switch should be used during the initial CMake run.  Otherwise if\nthe package has already been found in a previous CMake run, the\nvariables which have been stored in the cache will still be there.  In\nthat case it is recommended to remove the cache variables for this\npackage from the cache using the cache editor or cmake -U\n", 
    "BUILD_SHARED_LIBS": "BUILD_SHARED_LIBS\n-----------------\n\nGlobal flag to cause add_library to create shared libraries if on.\n\nIf present and true, this will cause all libraries to be built shared\nunless the library was explicitly added as a static library.  This\nvariable is often added to projects as an OPTION so that each user of\na project can decide if they want to build the project using shared or\nstatic libraries.\n", 
    "CMAKE_STANDARD_LIBRARIES": "CMAKE_STANDARD_LIBRARIES\n------------------------\n\nLibraries linked into every executable and shared library.\n\nThis is the list of libraries that are linked into all executables and\nlibraries.\n", 
    "PROJECT-NAME_SOURCE_DIR": "<PROJECT-NAME>_SOURCE_DIR\n-------------------------\n\nTop level source directory for the named project.\n\nA variable is created with the name used in the :command:`project` command,\nand is the source directory for the project.  This can be useful when\n:command:`add_subdirectory` is used to connect several projects.\n", 
    "APPLE": "APPLE\n-----\n\nTrue if running on Mac OS X.\n\nSet to true on Mac OS X.\n", 
    "CMAKE_JOB_POOL_LINK": "CMAKE_JOB_POOL_LINK\n----------------------\n\nThis variable is used to initialize the :prop_tgt:`JOB_POOL_LINK`\nproperty on all the targets. See :prop_tgt:`JOB_POOL_LINK`\nfor additional information.\n", 
    "CMAKE_LANG_COMPILE_OBJECT": "CMAKE_<LANG>_COMPILE_OBJECT\n---------------------------\n\nRule variable to compile a single object file.\n\nThis is a rule variable that tells CMake how to compile a single\nobject file for the language <LANG>.\n", 
    "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION\n------------------------------------------\n\nAsk CPack to warn each time a file with absolute INSTALL DESTINATION is encountered.\n\nThis variable triggers the definition of\nCMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION when CPack runs\ncmake_install.cmake scripts.\n", 
    "CMAKE_BINARY_DIR": "CMAKE_BINARY_DIR\n----------------\n\nThe path to the top level of the build tree.\n\nThis is the full path to the top level of the current CMake build\ntree.  For an in-source build, this would be the same as\nCMAKE_SOURCE_DIR.\n", 
    "CMAKE_CONFIG_POSTFIX": "CMAKE_<CONFIG>_POSTFIX\n----------------------\n\nDefault filename postfix for libraries under configuration <CONFIG>.\n\nWhen a non-executable target is created its <CONFIG>_POSTFIX target\nproperty is initialized with the value of this variable if it is set.\n", 
    "CMAKE_EXECUTABLE_SUFFIX": "CMAKE_EXECUTABLE_SUFFIX\n-----------------------\n\nThe suffix for executables on this platform.\n\nThe suffix to use for the end of an executable filename if any, .exe\non Windows.\n\nCMAKE_EXECUTABLE_SUFFIX_<LANG> overrides this for language <LANG>.\n", 
    "CMAKE_OSX_ARCHITECTURES": "CMAKE_OSX_ARCHITECTURES\n-----------------------\n\nTarget specific architectures for OS X.\n\nThis variable is used to initialize the :prop_tgt:`OSX_ARCHITECTURES`\nproperty on each target as it is creaed.  See that target property\nfor additional information.\n\n.. include:: CMAKE_OSX_VARIABLE.txt\n", 
    "CMAKE_WARN_DEPRECATED": "CMAKE_WARN_DEPRECATED\n---------------------\n\nWhether to issue deprecation warnings for macros and functions.\n\nIf TRUE, this can be used by macros and functions to issue deprecation\nwarnings.  This variable is FALSE by default.\n", 
    "CMAKE_FRAMEWORK_PATH": "CMAKE_FRAMEWORK_PATH\n--------------------\n\nSearch path for OS X frameworks used by the :command:`find_library`,\n:command:`find_package`, :command:`find_path`, and :command:`find_file`\ncommands.\n", 
    "CMAKE_BUILD_TYPE": "CMAKE_BUILD_TYPE\n----------------\n\nSpecifies the build type on single-configuration generators.\n\nThis statically specifies what build type (configuration) will be\nbuilt in this build tree.  Possible values are empty, Debug, Release,\nRelWithDebInfo and MinSizeRel.  This variable is only meaningful to\nsingle-configuration generators (such as make and Ninja) i.e.  those\nwhich choose a single configuration when CMake runs to generate a\nbuild tree as opposed to multi-configuration generators which offer\nselection of the build configuration within the generated build\nenvironment.  There are many per-config properties and variables\n(usually following clean SOME_VAR_<CONFIG> order conventions), such as\nCMAKE_C_FLAGS_<CONFIG>, specified as uppercase:\nCMAKE_C_FLAGS_[DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL].  For example,\nin a build tree configured to build type Debug, CMake will see to\nhaving CMAKE_C_FLAGS_DEBUG settings get added to the CMAKE_C_FLAGS\nsettings.  See also CMAKE_CONFIGURATION_TYPES.\n", 
    "CMAKE_AUTOMOC_RELAXED_MODE": "CMAKE_AUTOMOC_RELAXED_MODE\n--------------------------\n\nSwitch between strict and relaxed automoc mode.\n\nBy default, :prop_tgt:`AUTOMOC` behaves exactly as described in the documentation\nof the :prop_tgt:`AUTOMOC` target property.  When set to ``TRUE``, it accepts more\ninput and tries to find the correct input file for ``moc`` even if it\ndiffers from the documented behaviour.  In this mode it e.g.  also\nchecks whether a header file is intended to be processed by moc when a\n``\"foo.moc\"`` file has been included.\n\nRelaxed mode has to be enabled for KDE4 compatibility.\n", 
    "CMAKE_LIBRARY_PATH_FLAG": "CMAKE_LIBRARY_PATH_FLAG\n-----------------------\n\nThe flag to be used to add a library search path to a compiler.\n\nThe flag will be used to specify a library directory to the compiler.\nOn most compilers this is \"-L\".\n", 
    "CMAKE_HOST_WIN32": "CMAKE_HOST_WIN32\n----------------\n\nTrue on windows systems, including win64.\n\nSet to true when the host system is Windows and on Cygwin.\n", 
    "PROJECT_VERSION_TWEAK": "PROJECT_VERSION_TWEAK\n---------------------\n\nFourth version number component of the :variable:`PROJECT_VERSION`\nvariable as set by the :command:`project` command.\n", 
    "CMAKE_JOB_POOL_COMPILE": "CMAKE_JOB_POOL_COMPILE\n----------------------\n\nThis variable is used to initialize the :prop_tgt:`JOB_POOL_COMPILE`\nproperty on all the targets. See :prop_tgt:`JOB_POOL_COMPILE`\nfor additional information.\n", 
    "CMAKE_CACHE_MINOR_VERSION": "CMAKE_CACHE_MINOR_VERSION\n-------------------------\n\nMinor version of CMake used to create the CMakeCache.txt file\n\nThis stores the minor version of CMake used to write a CMake cache\nfile.  It is only different when a different version of CMake is run\non a previously created cache file.\n", 
    "CMAKE_LIBRARY_OUTPUT_DIRECTORY": "CMAKE_LIBRARY_OUTPUT_DIRECTORY\n------------------------------\n\nWhere to put all the LIBRARY targets when built.\n\nThis variable is used to initialize the LIBRARY_OUTPUT_DIRECTORY\nproperty on all the targets.  See that target property for additional\ninformation.\n", 
    "CMAKE_LANG_IMPLICIT_LINK_LIBRARIES": "CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES\n------------------------------------\n\nImplicit link libraries and flags detected for language <LANG>.\n\nCompilers typically pass language runtime library names and other\nflags when they invoke a linker.  These flags are implicit link\noptions for the compiler's language.  CMake automatically detects\nthese libraries and flags for each language and reports the results in\nthis variable.\n", 
    "BORLAND": "BORLAND\n-------\n\nTrue if the Borland compiler is being used.\n\nThis is set to true if the Borland compiler is being used.\n", 
    "CMAKE_LANG_FLAGS_MINSIZEREL": "CMAKE_<LANG>_FLAGS_MINSIZEREL\n-----------------------------\n\nFlags for MinSizeRel build type or configuration.\n\n<LANG> flags used when CMAKE_BUILD_TYPE is MinSizeRel.Short for\nminimum size release.\n", 
    "CMAKE_PDB_OUTPUT_DIRECTORY": "CMAKE_PDB_OUTPUT_DIRECTORY\n--------------------------\n\nOutput directory for MS debug symbol ``.pdb`` files generated by the\nlinker for executable and shared library targets.\n\nThis variable is used to initialize the :prop_tgt:`PDB_OUTPUT_DIRECTORY`\nproperty on all the targets.  See that target property for additional\ninformation.\n", 
    "MSVC10": "MSVC10\n------\n\nTrue when using Microsoft Visual C 10.0\n\nSet to true when the compiler is version 10.0 of Microsoft Visual C.\n", 
    "PROJECT_SOURCE_DIR": "PROJECT_SOURCE_DIR\n------------------\n\nTop level source directory for the current project.\n\nThis is the source directory of the most recent :command:`project` command.\n", 
    "CMAKE_PARENT_LIST_FILE": "CMAKE_PARENT_LIST_FILE\n----------------------\n\nFull path to the CMake file that included the current one.\n\nWhile processing a CMake file loaded by include() or find_package()\nthis variable contains the full path to the file including it.  The\ntop of the include stack is always the CMakeLists.txt for the current\ndirectory.  See also CMAKE_CURRENT_LIST_FILE.\n", 
    "CMAKE_INTERNAL_PLATFORM_ABI": "CMAKE_INTERNAL_PLATFORM_ABI\n---------------------------\n\nAn internal variable subject to change.\n\nThis is used in determining the compiler ABI and is subject to change.\n", 
    "CMAKE_PATCH_VERSION": "CMAKE_PATCH_VERSION\n-------------------\n\nThird version number component of the :variable:`CMAKE_VERSION`\nvariable.\n", 
    "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE": "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE\n---------------------------------\n\n.. |FIND_XXX| replace:: :command:`find_file` and :command:`find_path`\n\n.. include:: CMAKE_FIND_ROOT_PATH_MODE_XXX.txt\n", 
    "CMAKE_EXE_LINKER_FLAGS_CONFIG": "CMAKE_EXE_LINKER_FLAGS_<CONFIG>\n-------------------------------\n\nFlags to be used when linking an executable.\n\nSame as CMAKE_C_FLAGS_* but used by the linker when creating\nexecutables.\n", 
    "CMAKE_VS_PLATFORM_TOOLSET": "CMAKE_VS_PLATFORM_TOOLSET\n-------------------------\n\nVisual Studio Platform Toolset name.\n\nVS 10 and above use MSBuild under the hood and support multiple\ncompiler toolchains.  CMake may specify a toolset explicitly, such as\n\"v110\" for VS 11 or \"Windows7.1SDK\" for 64-bit support in VS 10\nExpress.  CMake provides the name of the chosen toolset in this\nvariable.\n", 
    "CMAKE_SYSTEM_NAME": "CMAKE_SYSTEM_NAME\n-----------------\n\nName of the OS CMake is building for.\n\nThis is the name of the operating system on which CMake is targeting.\nOn systems that have the uname command, this variable is set to the\noutput of uname -s.  Linux, Windows, and Darwin for Mac OS X are the\nvalues found on the big three operating systems.\n", 
    "CMAKE_HOST_UNIX": "CMAKE_HOST_UNIX\n---------------\n\nTrue for UNIX and UNIX like operating systems.\n\nSet to true when the host system is UNIX or UNIX like (i.e.  APPLE and\nCYGWIN).\n", 
    "MSVC": "MSVC\n----\n\nTrue when using Microsoft Visual C\n\nSet to true when the compiler is some version of Microsoft Visual C.\n", 
    "CMAKE_SYSTEM_VERSION": "CMAKE_SYSTEM_VERSION\n--------------------\n\nOS version CMake is building for.\n\nA numeric version string for the system, on systems that support\nuname, this variable is set to the output of uname -r.  On other\nsystems this is set to major-minor version numbers.\n", 
    "CMAKE_INSTALL_PREFIX": "CMAKE_INSTALL_PREFIX\n--------------------\n\nInstall directory used by install.\n\nIf \"make install\" is invoked or INSTALL is built, this directory is\nprepended onto all install directories.  This variable defaults to\n/usr/local on UNIX and c:/Program Files on Windows.\n\nOn UNIX one can use the DESTDIR mechanism in order to relocate the\nwhole installation.  DESTDIR means DESTination DIRectory.  It is\ncommonly used by makefile users in order to install software at\nnon-default location.  It is usually invoked like this:\n\n::\n\n make DESTDIR=/home/john install\n\nwhich will install the concerned software using the installation\nprefix, e.g.  \"/usr/local\" prepended with the DESTDIR value which\nfinally gives \"/home/john/usr/local\".\n\nWARNING: DESTDIR may not be used on Windows because installation\nprefix usually contains a drive letter like in \"C:/Program Files\"\nwhich cannot be prepended with some other prefix.\n\nThe installation prefix is also added to CMAKE_SYSTEM_PREFIX_PATH so\nthat find_package, find_program, find_library, find_path, and\nfind_file will search the prefix for other software.\n", 
    "CMAKE_STATIC_LINKER_FLAGS_CONFIG": "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>\n----------------------------------\n\nFlags to be used when linking a static library.\n\nSame as CMAKE_C_FLAGS_* but used by the linker when creating static\nlibraries.\n", 
    "MSVC80": "MSVC80\n------\n\nTrue when using Microsoft Visual C 8.0\n\nSet to true when the compiler is version 8.0 of Microsoft Visual C.\n", 
    "PROJECT-NAME_VERSION": "<PROJECT-NAME>_VERSION\n----------------------\n\nValue given to the ``VERSION`` option of the most recent call to the\n:command:`project` command with project name ``<PROJECT-NAME>``, if any.\n\nSee also the component-wise version variables\n:variable:`<PROJECT-NAME>_VERSION_MAJOR`,\n:variable:`<PROJECT-NAME>_VERSION_MINOR`,\n:variable:`<PROJECT-NAME>_VERSION_PATCH`, and\n:variable:`<PROJECT-NAME>_VERSION_TWEAK`.\n", 
    "CMAKE_AUTOMOC": "CMAKE_AUTOMOC\n-------------\n\nWhether to handle ``moc`` automatically for Qt targets.\n\nThis variable is used to initialize the :prop_tgt:`AUTOMOC` property on all the\ntargets.  See that target property for additional information.\n", 
    "MSVC_IDE": "MSVC_IDE\n--------\n\nTrue when using the Microsoft Visual C IDE\n\nSet to true when the target platform is the Microsoft Visual C IDE, as\nopposed to the command line compiler.\n", 
    "CMAKE_APPBUNDLE_PATH": "CMAKE_APPBUNDLE_PATH\n--------------------\n\nSearch path for OS X application bundles used by the :command:`find_program`,\nand :command:`find_package` commands.\n", 
    "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE": "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE\n---------------------------------\n\n.. |FIND_XXX| replace:: :command:`find_package`\n\n.. include:: CMAKE_FIND_ROOT_PATH_MODE_XXX.txt\n", 
    "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY": "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY\n---------------------------------\n\n.. |FIND_XXX| replace:: :command:`find_library`\n\n.. include:: CMAKE_FIND_ROOT_PATH_MODE_XXX.txt\n", 
    "CMAKE_CURRENT_SOURCE_DIR": "CMAKE_CURRENT_SOURCE_DIR\n------------------------\n\nThe path to the source directory currently being processed.\n\nThis the full path to the source directory that is currently being\nprocessed by cmake.\n", 
    "CMAKE_LINK_LIBRARY_SUFFIX": "CMAKE_LINK_LIBRARY_SUFFIX\n-------------------------\n\nThe suffix for libraries that you link to.\n\nThe suffix to use for the end of a library filename, .lib on Windows.\n", 
    "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION\n-------------------------------------------\n\nAsk cmake_install.cmake script to error out as soon as a file with absolute INSTALL DESTINATION is encountered.\n\nThe fatal error is emitted before the installation of the offending\nfile takes place.  This variable is used by CMake-generated\ncmake_install.cmake scripts.  If one sets this variable to ON while\nrunning the script, it may get fatal error messages from the script.\n", 
    "CMAKE_WIN32_EXECUTABLE": "CMAKE_WIN32_EXECUTABLE\n----------------------\n\nDefault value for WIN32_EXECUTABLE of targets.\n\nThis variable is used to initialize the WIN32_EXECUTABLE property on\nall the targets.  See that target property for additional information.\n", 
    "CMAKE_LANG_SOURCE_FILE_EXTENSIONS": "CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS\n-----------------------------------\n\nExtensions of source files for the given language.\n\nThis is the list of extensions for a given language's source files.\n", 
    "CMAKE_IMPORT_LIBRARY_SUFFIX": "CMAKE_IMPORT_LIBRARY_SUFFIX\n---------------------------\n\nThe suffix for import libraries that you link to.\n\nThe suffix to use for the end of an import library filename if used on\nthis platform.\n\nCMAKE_IMPORT_LIBRARY_SUFFIX_<LANG> overrides this for language <LANG>.\n", 
    "PROJECT-NAME_BINARY_DIR": "<PROJECT-NAME>_BINARY_DIR\n-------------------------\n\nTop level binary directory for the named project.\n\nA variable is created with the name used in the :command:`project` command,\nand is the binary directory for the project.  This can be useful when\n:command:`add_subdirectory` is used to connect several projects.\n", 
    "CMAKE_MINOR_VERSION": "CMAKE_MINOR_VERSION\n-------------------\n\nSecond version number component of the :variable:`CMAKE_VERSION`\nvariable.\n", 
    "MSVC12": "MSVC12\n------\n\nTrue when using Microsoft Visual C 12.0\n\nSet to true when the compiler is version 12.0 of Microsoft Visual C.\n", 
    "CMAKE_HOST_SYSTEM_PROCESSOR": "CMAKE_HOST_SYSTEM_PROCESSOR\n---------------------------\n\nThe name of the CPU CMake is running on.\n\nThe same as CMAKE_SYSTEM_PROCESSOR but for the host system instead of\nthe target system when cross compiling.\n", 
    "CMAKE_VS_MSBUILD_COMMAND": "CMAKE_VS_MSBUILD_COMMAND\n------------------------\n\nThe generators for :generator:`Visual Studio 10 2010` and above set this\nvariable to the ``MSBuild.exe`` command installed with the corresponding\nVisual Studio version.\n\nThis variable is not defined by other generators even if ``MSBuild.exe``\nis installed on the computer.\n\nThe :variable:`CMAKE_VS_DEVENV_COMMAND` is also provided for the\nnon-Express editions of Visual Studio.\nSee also the :variable:`CMAKE_MAKE_PROGRAM` variable.\n", 
    "CMAKE_NOT_USING_CONFIG_FLAGS": "CMAKE_NOT_USING_CONFIG_FLAGS\n----------------------------\n\nSkip _BUILD_TYPE flags if true.\n\nThis is an internal flag used by the generators in CMake to tell CMake\nto skip the _BUILD_TYPE flags.\n", 
    "CMAKE_DEBUG_TARGET_PROPERTIES": "CMAKE_DEBUG_TARGET_PROPERTIES\n-----------------------------\n\nEnables tracing output for target properties.\n\nThis variable can be populated with a list of properties to generate\ndebug output for when evaluating target properties.  Currently it can\nonly be used when evaluating the :prop_tgt:`INCLUDE_DIRECTORIES`,\n:prop_tgt:`COMPILE_DEFINITIONS`, :prop_tgt:`COMPILE_OPTIONS`, :prop_tgt:`AUTOUIC_OPTIONS`,\n:prop_tgt:`POSITION_INDEPENDENT_CODE` target properties and any other property\nlisted in :prop_tgt:`COMPATIBLE_INTERFACE_STRING` and other ``COMPATIBLE_INTERFACE_``\nproperties.  It outputs an origin for each entry in the target property.\nDefault is unset.\n", 
    "CMAKE_SYSTEM_LIBRARY_PATH": "CMAKE_SYSTEM_LIBRARY_PATH\n-------------------------\n\nPath used for searching by FIND_LIBRARY().\n\nSpecifies a path which will be used by FIND_LIBRARY().  FIND_LIBRARY()\nwill check each of the contained directories for the existence of the\nlibrary which is currently searched.  By default it contains the\nstandard directories for the current system.  It is NOT intended to be\nmodified by the project, use CMAKE_LIBRARY_PATH for this.  See also\nCMAKE_SYSTEM_PREFIX_PATH.\n", 
    "CMAKE_FIND_ROOT_PATH": "CMAKE_FIND_ROOT_PATH\n--------------------\n\nList of root paths to search on the filesystem.\n\nThis variable is most useful when cross-compiling. CMake uses the paths in\nthis list as alternative roots to find filesystem items with :command:`find_package`,\n:command:`find_library` etc.\n", 
    "CMAKE_CL_64": "CMAKE_CL_64\n-----------\n\nUsing the 64 bit compiler from Microsoft\n\nSet to true when using the 64 bit cl compiler from Microsoft.\n", 
    "CMAKE_LANG_CREATE_SHARED_MODULE": "CMAKE_<LANG>_CREATE_SHARED_MODULE\n---------------------------------\n\nRule variable to create a shared module.\n\nThis is a rule variable that tells CMake how to create a shared\nlibrary for the language <LANG>.\n", 
    "CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES": "CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES\n--------------------------------------\n\nImplicit linker search path detected for language <LANG>.\n\nCompilers typically pass directories containing language runtime\nlibraries and default library search paths when they invoke a linker.\nThese paths are implicit linker search directories for the compiler's\nlanguage.  CMake automatically detects these directories for each\nlanguage and reports the results in this variable.\n\nWhen a library in one of these directories is given by full path to\ntarget_link_libraries() CMake will generate the -l<name> form on link\nlines to ensure the linker searches its implicit directories for the\nlibrary.  Note that some toolchains read implicit directories from an\nenvironment variable such as LIBRARY_PATH so keep its value consistent\nwhen operating in a given build tree.\n", 
    "CMAKE_MODULE_LINKER_FLAGS": "CMAKE_MODULE_LINKER_FLAGS\n-------------------------\n\nLinker flags to be used to create modules.\n\nThese flags will be used by the linker when creating a module.\n", 
    "CMAKE_LANG_COMPILER": "CMAKE_<LANG>_COMPILER\n---------------------\n\nThe full path to the compiler for LANG.\n\nThis is the command that will be used as the <LANG> compiler.  Once\nset, you can not change this variable.\n", 
    "CMAKE_LANG_SIZEOF_DATA_PTR": "CMAKE_<LANG>_SIZEOF_DATA_PTR\n----------------------------\n\nSize of pointer-to-data types for language <LANG>.\n\nThis holds the size (in bytes) of pointer-to-data types in the target\nplatform ABI.  It is defined for languages C and CXX (C++).\n", 
    "CMAKE_SCRIPT_MODE_FILE": "CMAKE_SCRIPT_MODE_FILE\n----------------------\n\nFull path to the -P script file currently being processed.\n\nWhen run in -P script mode, CMake sets this variable to the full path\nof the script file.  When run to configure a CMakeLists.txt file, this\nvariable is not set.\n", 
    "CMAKE_CONFIGURATION_TYPES": "CMAKE_CONFIGURATION_TYPES\n-------------------------\n\nSpecifies the available build types on multi-config generators.\n\nThis specifies what build types (configurations) will be available\nsuch as Debug, Release, RelWithDebInfo etc.  This has reasonable\ndefaults on most platforms, but can be extended to provide other build\ntypes.  See also CMAKE_BUILD_TYPE for details of managing\nconfiguration data, and CMAKE_CFG_INTDIR.\n", 
    "CMAKE_LINK_DEF_FILE_FLAG": "CMAKE_LINK_DEF_FILE_FLAG\n------------------------\n\nLinker flag to be used to specify a .def file for dll creation.\n\nThe flag will be used to add a .def file when creating a dll on\nWindows; this is only defined on Windows.\n", 
    "CMAKE_MINIMUM_REQUIRED_VERSION": "CMAKE_MINIMUM_REQUIRED_VERSION\n------------------------------\n\nVersion specified to cmake_minimum_required command\n\nVariable containing the VERSION component specified in the\ncmake_minimum_required command.\n", 
    "CMAKE_COMPILER_2005": "CMAKE_COMPILER_2005\n-------------------\n\nUsing the Visual Studio 2005 compiler from Microsoft\n\nSet to true when using the Visual Studio 2005 compiler from Microsoft.\n", 
    "CMAKE_LANG_ARCHIVE_CREATE": "CMAKE_<LANG>_ARCHIVE_CREATE\n---------------------------\n\nRule variable to create a new static archive.\n\nThis is a rule variable that tells CMake how to create a static\narchive.  It is used in place of CMAKE_<LANG>_CREATE_STATIC_LIBRARY on\nsome platforms in order to support large object counts.  See also\nCMAKE_<LANG>_ARCHIVE_APPEND and CMAKE_<LANG>_ARCHIVE_FINISH.\n", 
    "CMAKE_CROSSCOMPILING": "CMAKE_CROSSCOMPILING\n--------------------\n\nIs CMake currently cross compiling.\n\nThis variable will be set to true by CMake if CMake is cross\ncompiling.  Specifically if the build platform is different from the\ntarget platform.\n", 
    "CPACK_INSTALL_SCRIPT": "CPACK_INSTALL_SCRIPT\n--------------------\n\nExtra CMake script provided by the user.\n\nIf set this CMake script will be executed by CPack during its local\n[CPack-private] installation which is done right before packaging the\nfiles.  The script is not called by e.g.: make install.\n", 
    "CMAKE_IMPORT_LIBRARY_PREFIX": "CMAKE_IMPORT_LIBRARY_PREFIX\n---------------------------\n\nThe prefix for import libraries that you link to.\n\nThe prefix to use for the name of an import library if used on this\nplatform.\n\nCMAKE_IMPORT_LIBRARY_PREFIX_<LANG> overrides this for language <LANG>.\n", 
    "CMAKE_INCLUDE_PATH": "CMAKE_INCLUDE_PATH\n------------------\n\nPath used for searching by FIND_FILE() and FIND_PATH().\n\nSpecifies a path which will be used both by FIND_FILE() and\nFIND_PATH().  Both commands will check each of the contained\ndirectories for the existence of the file which is currently searched.\nBy default it is empty, it is intended to be set by the project.  See\nalso CMAKE_SYSTEM_INCLUDE_PATH, CMAKE_PREFIX_PATH.\n", 
    "CMAKE_LANG_LIBRARY_ARCHITECTURE": "CMAKE_<LANG>_LIBRARY_ARCHITECTURE\n---------------------------------\n\nTarget architecture library directory name detected for <lang>.\n\nIf the <lang> compiler passes to the linker an architecture-specific\nsystem library search directory such as <prefix>/lib/<arch> this\nvariable contains the <arch> name if/as detected by CMake.\n", 
    "CMAKE_OBJECT_PATH_MAX": "CMAKE_OBJECT_PATH_MAX\n---------------------\n\nMaximum object file full-path length allowed by native build tools.\n\nCMake computes for every source file an object file name that is\nunique to the source file and deterministic with respect to the full\npath to the source file.  This allows multiple source files in a\ntarget to share the same name if they lie in different directories\nwithout rebuilding when one is added or removed.  However, it can\nproduce long full paths in a few cases, so CMake shortens the path\nusing a hashing scheme when the full path to an object file exceeds a\nlimit.  CMake has a built-in limit for each platform that is\nsufficient for common tools, but some native tools may have a lower\nlimit.  This variable may be set to specify the limit explicitly.  The\nvalue must be an integer no less than 128.\n", 
    "CMAKE_DEBUG_POSTFIX": "CMAKE_DEBUG_POSTFIX\n-------------------\n\nSee variable CMAKE_<CONFIG>_POSTFIX.\n\nThis variable is a special case of the more-general\nCMAKE_<CONFIG>_POSTFIX variable for the DEBUG configuration.\n", 
    "CMAKE_LANG_FLAGS_DEBUG": "CMAKE_<LANG>_FLAGS_DEBUG\n------------------------\n\nFlags for Debug build type or configuration.\n\n<LANG> flags used when CMAKE_BUILD_TYPE is Debug.\n", 
    "CMAKE_Fortran_MODOUT_FLAG": "CMAKE_Fortran_MODOUT_FLAG\n-------------------------\n\nFortran flag to enable module output.\n\nMost Fortran compilers write .mod files out by default.  For others,\nthis stores the flag needed to enable module output.\n", 
    "CMAKE_SYSTEM_PROGRAM_PATH": "CMAKE_SYSTEM_PROGRAM_PATH\n-------------------------\n\nPath used for searching by FIND_PROGRAM().\n\nSpecifies a path which will be used by FIND_PROGRAM().  FIND_PROGRAM()\nwill check each of the contained directories for the existence of the\nprogram which is currently searched.  By default it contains the\nstandard directories for the current system.  It is NOT intended to be\nmodified by the project, use CMAKE_PROGRAM_PATH for this.  See also\nCMAKE_SYSTEM_PREFIX_PATH.\n", 
    "CMAKE_LINK_INTERFACE_LIBRARIES": "CMAKE_LINK_INTERFACE_LIBRARIES\n------------------------------\n\nDefault value for LINK_INTERFACE_LIBRARIES of targets.\n\nThis variable is used to initialize the LINK_INTERFACE_LIBRARIES\nproperty on all the targets.  See that target property for additional\ninformation.\n", 
    "CMAKE_SYSTEM_PREFIX_PATH": "CMAKE_SYSTEM_PREFIX_PATH\n------------------------\n\nPath used for searching by FIND_XXX(), with appropriate suffixes added.\n\nSpecifies a path which will be used by the FIND_XXX() commands.  It\ncontains the \"base\" directories, the FIND_XXX() commands append\nappropriate subdirectories to the base directories.  So FIND_PROGRAM()\nadds /bin to each of the directories in the path, FIND_LIBRARY()\nappends /lib to each of the directories, and FIND_PATH() and\nFIND_FILE() append /include .  By default this contains the standard\ndirectories for the current system, the CMAKE_INSTALL_PREFIX and\nthe :variable:`CMAKE_STAGING_PREFIX`.  It is NOT intended to be modified by\nthe project, use CMAKE_PREFIX_PATH for this.  See also CMAKE_SYSTEM_INCLUDE_PATH,\nCMAKE_SYSTEM_LIBRARY_PATH, CMAKE_SYSTEM_PROGRAM_PATH, and\nCMAKE_SYSTEM_IGNORE_PATH.\n", 
    "CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES": "CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES\n-----------------------------------\n\nAdditional suffixes for shared libraries.\n\nExtensions for shared libraries other than that specified by\nCMAKE_SHARED_LIBRARY_SUFFIX, if any.  CMake uses this to recognize\nexternal shared library files during analysis of libraries linked by a\ntarget.\n", 
    "CMAKE_LINK_DEPENDS_NO_SHARED": "CMAKE_LINK_DEPENDS_NO_SHARED\n----------------------------\n\nWhether to skip link dependencies on shared library files.\n\nThis variable initializes the LINK_DEPENDS_NO_SHARED property on\ntargets when they are created.  See that target property for\nadditional information.\n", 
    "CMAKE_CTEST_COMMAND": "CMAKE_CTEST_COMMAND\n-------------------\n\nFull path to ctest command installed with cmake.\n\nThis is the full path to the CTest executable ctest which is useful\nfrom custom commands that want to use the cmake -E option for portable\nsystem commands.\n", 
    "CMAKE_INSTALL_RPATH_USE_LINK_PATH": "CMAKE_INSTALL_RPATH_USE_LINK_PATH\n---------------------------------\n\nAdd paths to linker search and installed rpath.\n\nCMAKE_INSTALL_RPATH_USE_LINK_PATH is a boolean that if set to true\nwill append directories in the linker search path and outside the\nproject to the INSTALL_RPATH.  This is used to initialize the target\nproperty INSTALL_RPATH_USE_LINK_PATH for all targets.\n", 
    "CMAKE_USE_RELATIVE_PATHS": "CMAKE_USE_RELATIVE_PATHS\n------------------------\n\nUse relative paths (May not work!).\n\nIf this is set to TRUE, then CMake will use relative paths between the\nsource and binary tree.  This option does not work for more\ncomplicated projects, and relative paths are used when possible.  In\ngeneral, it is not possible to move CMake generated makefiles to a\ndifferent location regardless of the value of this variable.\n", 
    "PROJECT_NAME": "PROJECT_NAME\n------------\n\nName of the project given to the project command.\n\nThis is the name given to the most recent :command:`project` command.\n", 
    "CMAKE_ROOT": "CMAKE_ROOT\n----------\n\nInstall directory for running cmake.\n\nThis is the install root for the running CMake and the Modules\ndirectory can be found here.  This is commonly used in this format:\n${CMAKE_ROOT}/Modules\n", 
    "CMAKE_VERBOSE_MAKEFILE": "CMAKE_VERBOSE_MAKEFILE\n----------------------\n\nEnable verbose output from Makefile builds.\n\nThis variable is a cache entry initialized (to FALSE) by\nthe :command:`project` command.  Users may enable the option\nin their local build tree to get more verbose output from\nMakefile builds and show each command line as it is launched.\n", 
    "CMAKE_POSITION_INDEPENDENT_CODE": "CMAKE_POSITION_INDEPENDENT_CODE\n-------------------------------\n\nDefault value for POSITION_INDEPENDENT_CODE of targets.\n\nThis variable is used to initialize the POSITION_INDEPENDENT_CODE\nproperty on all the targets.  See that target property for additional\ninformation.\n", 
    "CMAKE_INSTALL_RPATH": "CMAKE_INSTALL_RPATH\n-------------------\n\nThe rpath to use for installed targets.\n\nA semicolon-separated list specifying the rpath to use in installed\ntargets (for platforms that support it).  This is used to initialize\nthe target property INSTALL_RPATH for all targets.\n", 
    "CPACK_PACKAGING_INSTALL_PREFIX": "CPACK_PACKAGING_INSTALL_PREFIX\n------------------------------\n\nThe prefix used in the built package.\n\nEach CPack generator has a default value (like /usr).  This default\nvalue may be overwritten from the CMakeLists.txt or the cpack command\nline by setting an alternative value.\n\ne.g.  set(CPACK_PACKAGING_INSTALL_PREFIX \"/opt\")\n\nThis is not the same purpose as CMAKE_INSTALL_PREFIX which is used\nwhen installing from the build tree without building a package.\n", 
    "CMAKE_NO_SYSTEM_FROM_IMPORTED": "CMAKE_NO_SYSTEM_FROM_IMPORTED\n-----------------------------\n\nDefault value for NO_SYSTEM_FROM_IMPORTED of targets.\n\nThis variable is used to initialize the NO_SYSTEM_FROM_IMPORTED\nproperty on all the targets.  See that target property for additional\ninformation.\n", 
    "CMAKE_HOME_DIRECTORY": "CMAKE_HOME_DIRECTORY\n--------------------\n\nPath to top of source tree.\n\nThis is the path to the top level of the source tree.\n", 
    "CMAKE_PROJECT_NAME": "CMAKE_PROJECT_NAME\n------------------\n\nThe name of the current project.\n\nThis specifies name of the current project from the closest inherited\nPROJECT command.\n", 
    "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION\n-------------------------------------------\n\nAsk CPack to error out as soon as a file with absolute INSTALL DESTINATION is encountered.\n\nThe fatal error is emitted before the installation of the offending\nfile takes place.  Some CPack generators, like NSIS,enforce this\ninternally.  This variable triggers the definition\nofCMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION when CPack runsVariables\ncommon to all CPack generators\n", 
    "CMAKE_USER_MAKE_RULES_OVERRIDE": "CMAKE_USER_MAKE_RULES_OVERRIDE\n------------------------------\n\nSpecify a CMake file that overrides platform information.\n\nCMake loads the specified file while enabling support for each\nlanguage from either the project() or enable_language() commands.  It\nis loaded after CMake's builtin compiler and platform information\nmodules have been loaded but before the information is used.  The file\nmay set platform information variables to override CMake's defaults.\n\nThis feature is intended for use only in overriding information\nvariables that must be set before CMake builds its first test project\nto check that the compiler for a language works.  It should not be\nused to load a file in cases that a normal include() will work.  Use\nit only as a last resort for behavior that cannot be achieved any\nother way.  For example, one may set CMAKE_C_FLAGS_INIT to change the\ndefault value used to initialize CMAKE_C_FLAGS before it is cached.\nThe override file should NOT be used to set anything that could be set\nafter languages are enabled, such as variables like\nCMAKE_RUNTIME_OUTPUT_DIRECTORY that affect the placement of binaries.\nInformation set in the file will be used for try_compile and try_run\nbuilds too.\n", 
    "CMAKE_NO_BUILTIN_CHRPATH": "CMAKE_NO_BUILTIN_CHRPATH\n------------------------\n\nDo not use the builtin ELF editor to fix RPATHs on installation.\n\nWhen an ELF binary needs to have a different RPATH after installation\nthan it does in the build tree, CMake uses a builtin editor to change\nthe RPATH in the installed copy.  If this variable is set to true then\nCMake will relink the binary before installation instead of using its\nbuiltin editor.\n", 
    "PROJECT_VERSION_MAJOR": "PROJECT_VERSION_MAJOR\n---------------------\n\nFirst version number component of the :variable:`PROJECT_VERSION`\nvariable as set by the :command:`project` command.\n", 
    "CMAKE_HOST_SYSTEM_NAME": "CMAKE_HOST_SYSTEM_NAME\n----------------------\n\nName of the OS CMake is running on.\n\nThe same as CMAKE_SYSTEM_NAME but for the host system instead of the\ntarget system when cross compiling.\n", 
    "CMAKE_GENERATOR": "CMAKE_GENERATOR\n---------------\n\nThe generator used to build the project.\n\nThe name of the generator that is being used to generate the build\nfiles.  (e.g.  \"Unix Makefiles\", \"Visual Studio 6\", etc.)\n", 
    "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE": "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE\n--------------------------------------\n\nAutomatically add the current source- and build directories to the INTERFACE_INCLUDE_DIRECTORIES.\n\nIf this variable is enabled, CMake automatically adds for each shared\nlibrary target, static library target, module target and executable\ntarget, ${CMAKE_CURRENT_SOURCE_DIR} and ${CMAKE_CURRENT_BINARY_DIR} to\nthe INTERFACE_INCLUDE_DIRECTORIES.By default\nCMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE is OFF.\n", 
    "CMAKE_BUILD_WITH_INSTALL_RPATH": "CMAKE_BUILD_WITH_INSTALL_RPATH\n------------------------------\n\nUse the install path for the RPATH\n\nNormally CMake uses the build tree for the RPATH when building\nexecutables etc on systems that use RPATH.  When the software is\ninstalled the executables etc are relinked by CMake to have the\ninstall RPATH.  If this variable is set to true then the software is\nalways built with the install path for the RPATH and does not need to\nbe relinked when installed.\n", 
    "CMAKE_CACHE_PATCH_VERSION": "CMAKE_CACHE_PATCH_VERSION\n-------------------------\n\nPatch version of CMake used to create the CMakeCache.txt file\n\nThis stores the patch version of CMake used to write a CMake cache\nfile.  It is only different when a different version of CMake is run\non a previously created cache file.\n", 
    "CMAKE_LANG_ARCHIVE_APPEND": "CMAKE_<LANG>_ARCHIVE_APPEND\n---------------------------\n\nRule variable to append to a static archive.\n\nThis is a rule variable that tells CMake how to append to a static\narchive.  It is used in place of CMAKE_<LANG>_CREATE_STATIC_LIBRARY on\nsome platforms in order to support large object counts.  See also\nCMAKE_<LANG>_ARCHIVE_CREATE and CMAKE_<LANG>_ARCHIVE_FINISH.\n", 
    "CMAKE_ARGV0": "CMAKE_ARGV0\n-----------\n\nCommand line argument passed to CMake in script mode.\n\nWhen run in -P script mode, CMake sets this variable to the first\ncommand line argument.  It then also sets CMAKE_ARGV1, CMAKE_ARGV2,\n...  and so on, up to the number of command line arguments given.  See\nalso CMAKE_ARGC.\n", 
    "CMAKE_SYSTEM_IGNORE_PATH": "CMAKE_SYSTEM_IGNORE_PATH\n------------------------\n\nPath to be ignored by FIND_XXX() commands.\n\nSpecifies directories to be ignored by searches in FIND_XXX()\ncommands.  This is useful in cross-compiled environments where some\nsystem directories contain incompatible but possibly linkable\nlibraries.  For example, on cross-compiled cluster environments, this\nallows a user to ignore directories containing libraries meant for the\nfront-end machine that modules like FindX11 (and others) would\nnormally search.  By default this contains a list of directories\ncontaining incompatible binaries for the host system.  See also\nCMAKE_SYSTEM_PREFIX_PATH, CMAKE_SYSTEM_LIBRARY_PATH,\nCMAKE_SYSTEM_INCLUDE_PATH, and CMAKE_SYSTEM_PROGRAM_PATH.\n", 
    "MSVC90": "MSVC90\n------\n\nTrue when using Microsoft Visual C 9.0\n\nSet to true when the compiler is version 9.0 of Microsoft Visual C.\n", 
    "CMAKE_LINK_LIBRARY_FILE_FLAG": "CMAKE_LINK_LIBRARY_FILE_FLAG\n----------------------------\n\nFlag to be used to link a library specified by a path to its file.\n\nThe flag will be used before a library file path is given to the\nlinker.  This is needed only on very few platforms.\n"
}