{
    "find_package": "find_package\n------------\n\nLoad settings for an external project.\n\n::\n\n  find_package(<package> [version] [EXACT] [QUIET] [MODULE]\n               [REQUIRED] [[COMPONENTS] [components...]]\n               [OPTIONAL_COMPONENTS components...]\n               [NO_POLICY_SCOPE])\n\nFinds and loads settings from an external project.  ``<package>_FOUND``\nwill be set to indicate whether the package was found.  When the\npackage is found package-specific information is provided through\nvariables and :ref:`Imported Targets` documented by the package itself.  The\n``QUIET`` option disables messages if the package cannot be found.  The\n``MODULE`` option disables the second signature documented below.  The\n``REQUIRED`` option stops processing with an error message if the package\ncannot be found.\n\nA package-specific list of required components may be listed after the\n``COMPONENTS`` option (or after the ``REQUIRED`` option if present).\nAdditional optional components may be listed after\n``OPTIONAL_COMPONENTS``.  Available components and their influence on\nwhether a package is considered to be found are defined by the target\npackage.\n\nThe ``[version]`` argument requests a version with which the package found\nshould be compatible (format is ``major[.minor[.patch[.tweak]]]``).  The\n``EXACT`` option requests that the version be matched exactly.  If no\n``[version]`` and/or component list is given to a recursive invocation\ninside a find-module, the corresponding arguments are forwarded\nautomatically from the outer call (including the ``EXACT`` flag for\n``[version]``).  Version support is currently provided only on a\npackage-by-package basis (details below).\n\nUser code should generally look for packages using the above simple\nsignature.  The remainder of this command documentation specifies the\nfull command signature and details of the search process.  Project\nmaintainers wishing to provide a package to be found by this command\nare encouraged to read on.\n\nThe command has two modes by which it searches for packages: \"Module\"\nmode and \"Config\" mode.  Module mode is available when the command is\ninvoked with the above reduced signature.  CMake searches for a file\ncalled ``Find<package>.cmake`` in the :variable:`CMAKE_MODULE_PATH`\nfollowed by the CMake installation.  If the file is found, it is read\nand processed by CMake.  It is responsible for finding the package,\nchecking the version, and producing any needed messages.  Many\nfind-modules provide limited or no support for versioning; check\nthe module documentation.  If no module is found and the ``MODULE``\noption is not given the command proceeds to Config mode.\n\nThe complete Config mode command signature is::\n\n  find_package(<package> [version] [EXACT] [QUIET]\n               [REQUIRED] [[COMPONENTS] [components...]]\n               [CONFIG|NO_MODULE]\n               [NO_POLICY_SCOPE]\n               [NAMES name1 [name2 ...]]\n               [CONFIGS config1 [config2 ...]]\n               [HINTS path1 [path2 ... ]]\n               [PATHS path1 [path2 ... ]]\n               [PATH_SUFFIXES suffix1 [suffix2 ...]]\n               [NO_DEFAULT_PATH]\n               [NO_CMAKE_ENVIRONMENT_PATH]\n               [NO_CMAKE_PATH]\n               [NO_SYSTEM_ENVIRONMENT_PATH]\n               [NO_CMAKE_PACKAGE_REGISTRY]\n               [NO_CMAKE_BUILDS_PATH]\n               [NO_CMAKE_SYSTEM_PATH]\n               [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY]\n               [CMAKE_FIND_ROOT_PATH_BOTH |\n                ONLY_CMAKE_FIND_ROOT_PATH |\n                NO_CMAKE_FIND_ROOT_PATH])\n\nThe ``CONFIG`` option may be used to skip Module mode explicitly and\nswitch to Config mode.  It is synonymous to using ``NO_MODULE``.  Config\nmode is also implied by use of options not specified in the reduced\nsignature.\n\nConfig mode attempts to locate a configuration file provided by the\npackage to be found.  A cache entry called ``<package>_DIR`` is created to\nhold the directory containing the file.  By default the command\nsearches for a package with the name ``<package>``.  If the ``NAMES`` option\nis given the names following it are used instead of ``<package>``.  The\ncommand searches for a file called ``<name>Config.cmake`` or\n``<lower-case-name>-config.cmake`` for each name specified.  A\nreplacement set of possible configuration file names may be given\nusing the ``CONFIGS`` option.  The search procedure is specified below.\nOnce found, the configuration file is read and processed by CMake.\nSince the file is provided by the package it already knows the\nlocation of package contents.  The full path to the configuration file\nis stored in the cmake variable ``<package>_CONFIG``.\n\nAll configuration files which have been considered by CMake while\nsearching for an installation of the package with an appropriate\nversion are stored in the cmake variable ``<package>_CONSIDERED_CONFIGS``,\nthe associated versions in ``<package>_CONSIDERED_VERSIONS``.\n\nIf the package configuration file cannot be found CMake will generate\nan error describing the problem unless the ``QUIET`` argument is\nspecified.  If ``REQUIRED`` is specified and the package is not found a\nfatal error is generated and the configure step stops executing.  If\n``<package>_DIR`` has been set to a directory not containing a\nconfiguration file CMake will ignore it and search from scratch.\n\nWhen the ``[version]`` argument is given Config mode will only find a\nversion of the package that claims compatibility with the requested\nversion (format is ``major[.minor[.patch[.tweak]]]``).  If the ``EXACT``\noption is given only a version of the package claiming an exact match\nof the requested version may be found.  CMake does not establish any\nconvention for the meaning of version numbers.  Package version\nnumbers are checked by \"version\" files provided by the packages\nthemselves.  For a candidate package configuration file\n``<config-file>.cmake`` the corresponding version file is located next\nto it and named either ``<config-file>-version.cmake`` or\n``<config-file>Version.cmake``.  If no such version file is available\nthen the configuration file is assumed to not be compatible with any\nrequested version.  A basic version file containing generic version\nmatching code can be created using the\n:module:`CMakePackageConfigHelpers` module.  When a version file\nis found it is loaded to check the requested version number.  The\nversion file is loaded in a nested scope in which the following\nvariables have been defined:\n\n``PACKAGE_FIND_NAME``\n  the ``<package>`` name\n``PACKAGE_FIND_VERSION``\n  full requested version string\n``PACKAGE_FIND_VERSION_MAJOR``\n  major version if requested, else 0\n``PACKAGE_FIND_VERSION_MINOR``\n  minor version if requested, else 0\n``PACKAGE_FIND_VERSION_PATCH``\n  patch version if requested, else 0\n``PACKAGE_FIND_VERSION_TWEAK``\n  tweak version if requested, else 0\n``PACKAGE_FIND_VERSION_COUNT``\n  number of version components, 0 to 4\n\nThe version file checks whether it satisfies the requested version and\nsets these variables:\n\n``PACKAGE_VERSION``\n  full provided version string\n``PACKAGE_VERSION_EXACT``\n  true if version is exact match\n``PACKAGE_VERSION_COMPATIBLE``\n  true if version is compatible\n``PACKAGE_VERSION_UNSUITABLE``\n  true if unsuitable as any version\n\nThese variables are checked by the ``find_package`` command to determine\nwhether the configuration file provides an acceptable version.  They\nare not available after the find_package call returns.  If the version\nis acceptable the following variables are set:\n\n``<package>_VERSION``\n  full provided version string\n``<package>_VERSION_MAJOR``\n  major version if provided, else 0\n``<package>_VERSION_MINOR``\n  minor version if provided, else 0\n``<package>_VERSION_PATCH``\n  patch version if provided, else 0\n``<package>_VERSION_TWEAK``\n  tweak version if provided, else 0\n``<package>_VERSION_COUNT``\n  number of version components, 0 to 4\n\nand the corresponding package configuration file is loaded.  When\nmultiple package configuration files are available whose version files\nclaim compatibility with the version requested it is unspecified which\none is chosen.  No attempt is made to choose a highest or closest\nversion number.\n\nConfig mode provides an elaborate interface and search procedure.\nMuch of the interface is provided for completeness and for use\ninternally by find-modules loaded by Module mode.  Most user code\nshould simply call::\n\n  find_package(<package> [major[.minor]] [EXACT] [REQUIRED|QUIET])\n\nin order to find a package.  Package maintainers providing CMake\npackage configuration files are encouraged to name and install them\nsuch that the procedure outlined below will find them without\nrequiring use of additional options.\n\nCMake constructs a set of possible installation prefixes for the\npackage.  Under each prefix several directories are searched for a\nconfiguration file.  The tables below show the directories searched.\nEach entry is meant for installation trees following Windows (W), UNIX\n(U), or Apple (A) conventions::\n\n  <prefix>/                                               (W)\n  <prefix>/(cmake|CMake)/                                 (W)\n  <prefix>/<name>*/                                       (W)\n  <prefix>/<name>*/(cmake|CMake)/                         (W)\n  <prefix>/(lib/<arch>|lib|share)/cmake/<name>*/          (U)\n  <prefix>/(lib/<arch>|lib|share)/<name>*/                (U)\n  <prefix>/(lib/<arch>|lib|share)/<name>*/(cmake|CMake)/  (U)\n\nOn systems supporting OS X Frameworks and Application Bundles the\nfollowing directories are searched for frameworks or bundles\ncontaining a configuration file::\n\n  <prefix>/<name>.framework/Resources/                    (A)\n  <prefix>/<name>.framework/Resources/CMake/              (A)\n  <prefix>/<name>.framework/Versions/*/Resources/         (A)\n  <prefix>/<name>.framework/Versions/*/Resources/CMake/   (A)\n  <prefix>/<name>.app/Contents/Resources/                 (A)\n  <prefix>/<name>.app/Contents/Resources/CMake/           (A)\n\nIn all cases the ``<name>`` is treated as case-insensitive and corresponds\nto any of the names specified (``<package>`` or names given by ``NAMES``).\nPaths with ``lib/<arch>`` are enabled if the\n:variable:`CMAKE_LIBRARY_ARCHITECTURE` variable is set.  If ``PATH_SUFFIXES``\nis specified the suffixes are appended to each (W) or (U) directory entry\none-by-one.\n\nThis set of directories is intended to work in cooperation with\nprojects that provide configuration files in their installation trees.\nDirectories above marked with (W) are intended for installations on\nWindows where the prefix may point at the top of an application's\ninstallation directory.  Those marked with (U) are intended for\ninstallations on UNIX platforms where the prefix is shared by multiple\npackages.  This is merely a convention, so all (W) and (U) directories\nare still searched on all platforms.  Directories marked with (A) are\nintended for installations on Apple platforms.  The cmake variables\n``CMAKE_FIND_FRAMEWORK`` and ``CMAKE_FIND_APPBUNDLE``\ndetermine the order of preference as specified below.\n\nThe set of installation prefixes is constructed using the following\nsteps.  If ``NO_DEFAULT_PATH`` is specified all ``NO_*`` options are\nenabled.\n\n1. Search paths specified in cmake-specific cache variables.  These\n   are intended to be used on the command line with a ``-DVAR=value``.\n   This can be skipped if ``NO_CMAKE_PATH`` is passed::\n\n     CMAKE_PREFIX_PATH\n     CMAKE_FRAMEWORK_PATH\n     CMAKE_APPBUNDLE_PATH\n\n2. Search paths specified in cmake-specific environment variables.\n   These are intended to be set in the user's shell configuration.\n   This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed::\n\n     <package>_DIR\n     CMAKE_PREFIX_PATH\n     CMAKE_FRAMEWORK_PATH\n     CMAKE_APPBUNDLE_PATH\n\n3. Search paths specified by the ``HINTS`` option.  These should be paths\n   computed by system introspection, such as a hint provided by the\n   location of another item already found.  Hard-coded guesses should\n   be specified with the ``PATHS`` option.\n\n4. Search the standard system environment variables.  This can be\n   skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is passed.  Path entries\n   ending in ``/bin`` or ``/sbin`` are automatically converted to their\n   parent directories::\n\n     PATH\n\n5. Search project build trees recently configured in a :manual:`cmake-gui(1)`.\n   This can be skipped if ``NO_CMAKE_BUILDS_PATH`` is passed.  It is intended\n   for the case when a user is building multiple dependent projects one\n   after another.\n   (This step is implemented only on Windows.)\n\n6. Search paths stored in the CMake :ref:`User Package Registry`.\n   This can be skipped if ``NO_CMAKE_PACKAGE_REGISTRY`` is passed.\n   See the :manual:`cmake-packages(7)` manual for details on the user\n   package registry.\n\n7. Search cmake variables defined in the Platform files for the\n   current system.  This can be skipped if ``NO_CMAKE_SYSTEM_PATH`` is\n   passed::\n\n     CMAKE_SYSTEM_PREFIX_PATH\n     CMAKE_SYSTEM_FRAMEWORK_PATH\n     CMAKE_SYSTEM_APPBUNDLE_PATH\n\n8. Search paths stored in the CMake :ref:`System Package Registry`.\n   This can be skipped if ``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` is passed.\n   See the :manual:`cmake-packages(7)` manual for details on the system\n   package registry.\n\n9. Search paths specified by the ``PATHS`` option.  These are typically\n   hard-coded guesses.\n\n.. |FIND_XXX| replace:: find_package\n.. |FIND_ARGS_XXX| replace:: <package>\n.. |CMAKE_FIND_ROOT_PATH_MODE_XXX| replace::\n   :variable:`CMAKE_FIND_ROOT_PATH_MODE_PACKAGE`\n\n.. include:: FIND_XXX_MAC.txt\n.. include:: FIND_XXX_ROOT.txt\n.. include:: FIND_XXX_ORDER.txt\n\nEvery non-REQUIRED ``find_package`` call can be disabled by setting the\n:variable:`CMAKE_DISABLE_FIND_PACKAGE_<PackageName>` variable to ``TRUE``.\n\nWhen loading a find module or package configuration file ``find_package``\ndefines variables to provide information about the call arguments (and\nrestores their original state before returning):\n\n``<package>_FIND_REQUIRED``\n  true if ``REQUIRED`` option was given\n``<package>_FIND_QUIETLY``\n  true if ``QUIET`` option was given\n``<package>_FIND_VERSION``\n  full requested version string\n``<package>_FIND_VERSION_MAJOR``\n  major version if requested, else 0\n``<package>_FIND_VERSION_MINOR``\n  minor version if requested, else 0\n``<package>_FIND_VERSION_PATCH``\n  patch version if requested, else 0\n``<package>_FIND_VERSION_TWEAK``\n  tweak version if requested, else 0\n``<package>_FIND_VERSION_COUNT``\n  number of version components, 0 to 4\n``<package>_FIND_VERSION_EXACT``\n  true if ``EXACT`` option was given\n``<package>_FIND_COMPONENTS``\n  list of requested components\n``<package>_FIND_REQUIRED_<c>``\n  true if component ``<c>`` is required,\n  false if component ``<c>`` is optional\n\nIn Module mode the loaded find module is responsible to honor the\nrequest detailed by these variables; see the find module for details.\nIn Config mode ``find_package`` handles ``REQUIRED``, ``QUIET``, and\n``[version]`` options automatically but leaves it to the package\nconfiguration file to handle components in a way that makes sense\nfor the package.  The package configuration file may set\n``<package>_FOUND`` to false to tell ``find_package`` that component\nrequirements are not satisfied.\n\nSee the :command:`cmake_policy` command documentation for discussion\nof the ``NO_POLICY_SCOPE`` option.\n", 
    "try_compile": "try_compile\n-----------\n\nTry building some code.\n\n::\n\n  try_compile(RESULT_VAR <bindir> <srcdir>\n              <projectName> [targetName] [CMAKE_FLAGS flags...]\n              [OUTPUT_VARIABLE <var>])\n\nTry building a project.  In this form, srcdir should contain a\ncomplete CMake project with a CMakeLists.txt file and all sources.\nThe bindir and srcdir will not be deleted after this command is run.\nSpecify targetName to build a specific target instead of the 'all' or\n'ALL_BUILD' target.\n\n::\n\n  try_compile(RESULT_VAR <bindir> <srcfile|SOURCES srcfile...>\n              [CMAKE_FLAGS flags...]\n              [COMPILE_DEFINITIONS flags...]\n              [LINK_LIBRARIES libs...]\n              [OUTPUT_VARIABLE <var>]\n              [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]])\n\nTry building an executable from one or more source files.  In this\nform the user need only supply one or more source files that include a\ndefinition for 'main'.  CMake will create a CMakeLists.txt file to\nbuild the source(s) as an executable.  Specify COPY_FILE to get a copy\nof the linked executable at the given fileName and optionally\nCOPY_FILE_ERROR to capture any error.\n\nIn this version all files in bindir/CMakeFiles/CMakeTmp will be\ncleaned automatically.  For debugging, --debug-trycompile can be\npassed to cmake to avoid this clean.  However, multiple sequential\ntry_compile operations reuse this single output directory.  If you use\n--debug-trycompile, you can only debug one try_compile call at a time.\nThe recommended procedure is to configure with cmake all the way\nthrough once, then delete the cache entry associated with the\ntry_compile call of interest, and then re-run cmake again with\n--debug-trycompile.\n\nSome extra flags that can be included are, INCLUDE_DIRECTORIES,\nLINK_DIRECTORIES, and LINK_LIBRARIES.  COMPILE_DEFINITIONS are\n-Ddefinition that will be passed to the compile line.\n\nThe srcfile signature also accepts a LINK_LIBRARIES argument which may\ncontain a list of libraries or IMPORTED targets which will be linked\nto in the generated project.  If LINK_LIBRARIES is specified as a\nparameter to try_compile, then any LINK_LIBRARIES passed as\nCMAKE_FLAGS will be ignored.\n\ntry_compile creates a CMakeList.txt file on the fly that looks like\nthis:\n\n::\n\n  add_definitions( <expanded COMPILE_DEFINITIONS from calling cmake>)\n  include_directories(${INCLUDE_DIRECTORIES})\n  link_directories(${LINK_DIRECTORIES})\n  add_executable(cmTryCompileExec sources)\n  target_link_libraries(cmTryCompileExec ${LINK_LIBRARIES})\n\nIn both versions of the command, if OUTPUT_VARIABLE is specified, then\nthe output from the build process is stored in the given variable.\nThe success or failure of the try_compile, i.e.  TRUE or FALSE\nrespectively, is returned in RESULT_VAR.  CMAKE_FLAGS can be used to\npass -DVAR:TYPE=VALUE flags to the cmake that is run during the build.\nSet variable CMAKE_TRY_COMPILE_CONFIGURATION to choose a build\nconfiguration.\n", 
    "get_source_file_property": "get_source_file_property\n------------------------\n\nGet a property for a source file.\n\n::\n\n  get_source_file_property(VAR file property)\n\nGet a property from a source file.  The value of the property is\nstored in the variable VAR.  If the property is not found, VAR will be\nset to \"NOTFOUND\".  Use set_source_files_properties to set property\nvalues.  Source file properties usually control how the file is built.\nOne property that is always there is LOCATION\n\nSee also the more general get_property() command.\n", 
    "cmake_host_system_information": "cmake_host_system_information\n-----------------------------\n\nQuery host system specific information.\n\n::\n\n  cmake_host_system_information(RESULT <variable> QUERY <key> ...)\n\nQueries system information of the host system on which cmake runs.\nOne or more <key> can be provided to select the information to be\nqueried.  The list of queried values is stored in <variable>.\n\n<key> can be one of the following values:\n\n::\n\n  NUMBER_OF_LOGICAL_CORES   = Number of logical cores.\n  NUMBER_OF_PHYSICAL_CORES  = Number of physical cores.\n  HOSTNAME                  = Hostname.\n  FQDN                      = Fully qualified domain name.\n  TOTAL_VIRTUAL_MEMORY      = Total virtual memory in megabytes.\n  AVAILABLE_VIRTUAL_MEMORY  = Available virtual memory in megabytes.\n  TOTAL_PHYSICAL_MEMORY     = Total physical memory in megabytes.\n  AVAILABLE_PHYSICAL_MEMORY = Available physical memory in megabytes.\n", 
    "cmake_policy": "cmake_policy\n------------\n\nManage CMake Policy settings.\n\nAs CMake evolves it is sometimes necessary to change existing behavior\nin order to fix bugs or improve implementations of existing features.\nThe CMake Policy mechanism is designed to help keep existing projects\nbuilding as new versions of CMake introduce changes in behavior.  Each\nnew policy (behavioral change) is given an identifier of the form\n\"CMP<NNNN>\" where \"<NNNN>\" is an integer index.  Documentation\nassociated with each policy describes the OLD and NEW behavior and the\nreason the policy was introduced.  Projects may set each policy to\nselect the desired behavior.  When CMake needs to know which behavior\nto use it checks for a setting specified by the project.  If no\nsetting is available the OLD behavior is assumed and a warning is\nproduced requesting that the policy be set.\n\nThe cmake_policy command is used to set policies to OLD or NEW\nbehavior.  While setting policies individually is supported, we\nencourage projects to set policies based on CMake versions.\n\n::\n\n  cmake_policy(VERSION major.minor[.patch[.tweak]])\n\nSpecify that the current CMake list file is written for the given\nversion of CMake.  All policies introduced in the specified version or\nearlier will be set to use NEW behavior.  All policies introduced\nafter the specified version will be unset (unless variable\nCMAKE_POLICY_DEFAULT_CMP<NNNN> sets a default).  This effectively\nrequests behavior preferred as of a given CMake version and tells\nnewer CMake versions to warn about their new policies.  The policy\nversion specified must be at least 2.4 or the command will report an\nerror.  In order to get compatibility features supporting versions\nearlier than 2.4 see documentation of policy CMP0001.\n\n::\n\n  cmake_policy(SET CMP<NNNN> NEW)\n  cmake_policy(SET CMP<NNNN> OLD)\n\nTell CMake to use the OLD or NEW behavior for a given policy.\nProjects depending on the old behavior of a given policy may silence a\npolicy warning by setting the policy state to OLD.  Alternatively one\nmay fix the project to work with the new behavior and set the policy\nstate to NEW.\n\n::\n\n  cmake_policy(GET CMP<NNNN> <variable>)\n\nCheck whether a given policy is set to OLD or NEW behavior.  The\noutput variable value will be \"OLD\" or \"NEW\" if the policy is set, and\nempty otherwise.\n\nCMake keeps policy settings on a stack, so changes made by the\ncmake_policy command affect only the top of the stack.  A new entry on\nthe policy stack is managed automatically for each subdirectory to\nprotect its parents and siblings.  CMake also manages a new entry for\nscripts loaded by include() and find_package() commands except when\ninvoked with the NO_POLICY_SCOPE option (see also policy CMP0011).\nThe cmake_policy command provides an interface to manage custom\nentries on the policy stack:\n\n::\n\n  cmake_policy(PUSH)\n  cmake_policy(POP)\n\nEach PUSH must have a matching POP to erase any changes.  This is\nuseful to make temporary changes to policy settings.\n\nFunctions and macros record policy settings when they are created and\nuse the pre-record policies when they are invoked.  If the function or\nmacro implementation sets policies, the changes automatically\npropagate up through callers until they reach the closest nested\npolicy stack entry.\n", 
    "mark_as_advanced": "mark_as_advanced\n----------------\n\nMark cmake cached variables as advanced.\n\n::\n\n  mark_as_advanced([CLEAR|FORCE] VAR [VAR2 ...])\n\nMark the named cached variables as advanced.  An advanced variable\nwill not be displayed in any of the cmake GUIs unless the show\nadvanced option is on.  If CLEAR is the first argument advanced\nvariables are changed back to unadvanced.  If FORCE is the first\nargument, then the variable is made advanced.  If neither FORCE nor\nCLEAR is specified, new values will be marked as advanced, but if the\nvariable already has an advanced/non-advanced state, it will not be\nchanged.\n\nIt does nothing in script mode.\n", 
    "ctest_start": "ctest_start\n-----------\n\nStarts the testing for a given model\n\n::\n\n  ctest_start(Model [TRACK <track>] [APPEND] [source [binary]])\n\nStarts the testing for a given model.  The command should be called\nafter the binary directory is initialized.  If the 'source' and\n'binary' directory are not specified, it reads the\nCTEST_SOURCE_DIRECTORY and CTEST_BINARY_DIRECTORY.  If the track is\nspecified, the submissions will go to the specified track.  If APPEND\nis used, the existing TAG is used rather than creating a new one based\non the current time stamp.\n", 
    "execute_process": "execute_process\n---------------\n\nExecute one or more child processes.\n\n.. code-block:: cmake\n\n  execute_process(COMMAND <cmd1> [args1...]]\n                  [COMMAND <cmd2> [args2...] [...]]\n                  [WORKING_DIRECTORY <directory>]\n                  [TIMEOUT <seconds>]\n                  [RESULT_VARIABLE <variable>]\n                  [OUTPUT_VARIABLE <variable>]\n                  [ERROR_VARIABLE <variable>]\n                  [INPUT_FILE <file>]\n                  [OUTPUT_FILE <file>]\n                  [ERROR_FILE <file>]\n                  [OUTPUT_QUIET]\n                  [ERROR_QUIET]\n                  [OUTPUT_STRIP_TRAILING_WHITESPACE]\n                  [ERROR_STRIP_TRAILING_WHITESPACE])\n\nRuns the given sequence of one or more commands with the standard\noutput of each process piped to the standard input of the next.\nA single standard error pipe is used for all processes.\n\nOptions:\n\nCOMMAND\n A child process command line.\n\n CMake executes the child process using operating system APIs directly.\n All arguments are passed VERBATIM to the child process.\n No intermediate shell is used, so shell operators such as ``>``\n are treated as normal arguments.\n (Use the ``INPUT_*``, ``OUTPUT_*``, and ``ERROR_*`` options to\n redirect stdin, stdout, and stderr.)\n\nWORKING_DIRECTORY\n The named directory will be set as the current working directory of\n the child processes.\n\nTIMEOUT\n The child processes will be terminated if they do not finish in the\n specified number of seconds (fractions are allowed).\n\nRESULT_VARIABLE\n The variable will be set to contain the result of running the processes.\n This will be an integer return code from the last child or a string\n describing an error condition.\n\nOUTPUT_VARIABLE, ERROR_VARIABLE\n The variable named will be set with the contents of the standard output\n and standard error pipes, respectively.  If the same variable is named\n for both pipes their output will be merged in the order produced.\n\nINPUT_FILE, OUTPUT_FILE, ERROR_FILE\n The file named will be attached to the standard input of the first\n process, standard output of the last process, or standard error of\n all processes, respectively.\n\nOUTPUT_QUIET, ERROR_QUIET\n The standard output or standard error results will be quietly ignored.\n\nIf more than one ``OUTPUT_*`` or ``ERROR_*`` option is given for the\nsame pipe the precedence is not specified.\nIf no ``OUTPUT_*`` or ``ERROR_*`` options are given the output will\nbe shared with the corresponding pipes of the CMake process itself.\n\nThe :command:`execute_process` command is a newer more powerful version of\n:command:`exec_program`, but the old command has been kept for compatibility.\nBoth commands run while CMake is processing the project prior to build\nsystem generation.  Use :command:`add_custom_target` and\n:command:`add_custom_command` to create custom commands that run at\nbuild time.\n", 
    "add_definitions": "add_definitions\n---------------\n\nAdds -D define flags to the compilation of source files.\n\n::\n\n  add_definitions(-DFOO -DBAR ...)\n\nAdds definitions to the compiler command line for sources in the current\ndirectory and below.  This command can be used to add any flags, but\nit is intended to add preprocessor definitions.  Flags\nbeginning in -D or /D that look like preprocessor definitions are\nautomatically added to the :prop_dir:`COMPILE_DEFINITIONS` directory\nproperty for the current directory.  Definitions with non-trivial values\nmay be left in the set of flags instead of being converted for reasons of\nbackwards compatibility.  See documentation of the\n:prop_dir:`directory <COMPILE_DEFINITIONS>`,\n:prop_tgt:`target <COMPILE_DEFINITIONS>`,\n:prop_sf:`source file <COMPILE_DEFINITIONS>` ``COMPILE_DEFINITIONS``\nproperties for details on adding preprocessor definitions to specific\nscopes and configurations.\n\nSee the :manual:`cmake-buildsystem(7)` manual for more on defining\nbuildsystem properties.\n", 
    "ctest_sleep": "ctest_sleep\n-----------\n\nsleeps for some amount of time\n\n::\n\n  ctest_sleep(<seconds>)\n\nSleep for given number of seconds.\n\n::\n\n  ctest_sleep(<time1> <duration> <time2>)\n\nSleep for t=(time1 + duration - time2) seconds if t > 0.\n", 
    "find_library": "find_library\n------------\n\n.. |FIND_XXX| replace:: find_library\n.. |NAMES| replace:: NAMES name1 [name2 ...] [NAMES_PER_DIR]\n.. |SEARCH_XXX| replace:: library\n.. |SEARCH_XXX_DESC| replace:: library\n.. |XXX_SUBDIR| replace:: lib\n\n.. |CMAKE_PREFIX_PATH_XXX| replace::\n   <prefix>/lib/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and\n   |CMAKE_PREFIX_PATH_XXX_SUBDIR|\n.. |CMAKE_XXX_PATH| replace:: CMAKE_LIBRARY_PATH\n.. |CMAKE_XXX_MAC_PATH| replace:: CMAKE_FRAMEWORK_PATH\n\n.. |SYSTEM_ENVIRONMENT_PATH_XXX| replace:: PATH and LIB\n\n.. |CMAKE_SYSTEM_PREFIX_PATH_XXX| replace::\n   <prefix>/lib/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and\n   |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR|\n.. |CMAKE_SYSTEM_XXX_PATH| replace:: CMAKE_SYSTEM_LIBRARY_PATH\n.. |CMAKE_SYSTEM_XXX_MAC_PATH| replace:: CMAKE_SYSTEM_FRAMEWORK_PATH\n\n.. |CMAKE_FIND_ROOT_PATH_MODE_XXX| replace::\n   :variable:`CMAKE_FIND_ROOT_PATH_MODE_LIBRARY`\n\n.. include:: FIND_XXX.txt\n\nWhen more than one value is given to the NAMES option this command by\ndefault will consider one name at a time and search every directory\nfor it.  The NAMES_PER_DIR option tells this command to consider one\ndirectory at a time and search for all names in it.\n\nIf the library found is a framework, then VAR will be set to the full\npath to the framework <fullPath>/A.framework.  When a full path to a\nframework is used as a library, CMake will use a -framework A, and a\n-F<fullPath> to link the framework to the target.\n\nIf the global property FIND_LIBRARY_USE_LIB64_PATHS is set all search\npaths will be tested as normal, with \"64/\" appended, and with all\nmatches of \"lib/\" replaced with \"lib64/\".  This property is\nautomatically set for the platforms that are known to need it if at\nleast one of the languages supported by the PROJECT command is\nenabled.\n", 
    "add_executable": "add_executable\n--------------\n\nAdd an executable to the project using the specified source files.\n\n::\n\n  add_executable(<name> [WIN32] [MACOSX_BUNDLE]\n                 [EXCLUDE_FROM_ALL]\n                 source1 [source2 ...])\n\nAdds an executable target called ``<name>`` to be built from the source\nfiles listed in the command invocation.  The ``<name>`` corresponds to the\nlogical target name and must be globally unique within a project.  The\nactual file name of the executable built is constructed based on\nconventions of the native platform (such as ``<name>.exe`` or just\n``<name>``.\n\nBy default the executable file will be created in the build tree\ndirectory corresponding to the source tree directory in which the\ncommand was invoked.  See documentation of the\n:prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` target property to change this\nlocation.  See documentation of the :prop_tgt:`OUTPUT_NAME` target property\nto change the ``<name>`` part of the final file name.\n\nIf ``WIN32`` is given the property :prop_tgt:`WIN32_EXECUTABLE` will be\nset on the target created.  See documentation of that target property for\ndetails.\n\nIf ``MACOSX_BUNDLE`` is given the corresponding property will be set on\nthe created target.  See documentation of the :prop_tgt:`MACOSX_BUNDLE`\ntarget property for details.\n\nIf ``EXCLUDE_FROM_ALL`` is given the corresponding property will be set on\nthe created target.  See documentation of the :prop_tgt:`EXCLUDE_FROM_ALL`\ntarget property for details.\n\nSee the :manual:`cmake-buildsystem(7)` manual for more on defining\nbuildsystem properties.\n\n--------------------------------------------------------------------------\n\n::\n\n  add_executable(<name> IMPORTED [GLOBAL])\n\nAn :ref:`IMPORTED executable target <Imported Targets>` references an\nexecutable file located outside the project.  No rules are generated to\nbuild it, and the :prop_tgt:`IMPORTED` target property is ``True``.  The\ntarget name has scope in the directory in which it is created and below, but\nthe ``GLOBAL`` option extends visibility.  It may be referenced like any\ntarget built within the project.  ``IMPORTED`` executables are useful\nfor convenient reference from commands like :command:`add_custom_command`.\nDetails about the imported executable are specified by setting properties\nwhose names begin in ``IMPORTED_``.  The most important such property is\n:prop_tgt:`IMPORTED_LOCATION` (and its per-configuration version\n:prop_tgt:`IMPORTED_LOCATION_<CONFIG>`) which specifies the location of\nthe main executable file on disk.  See documentation of the ``IMPORTED_*``\nproperties for more information.\n\n--------------------------------------------------------------------------\n\n::\n\n  add_executable(<name> ALIAS <target>)\n\nCreates an :ref:`Alias Target <Alias Targets>`, such that ``<name>`` can\nbe used to refer to ``<target>`` in subsequent commands.  The ``<name>``\ndoes not appear in the generated buildsystem as a make target.  The\n``<target>`` may not be an :ref:`Imported Target <Imported Targets>` or an\n``ALIAS``.  ``ALIAS`` targets can be used as targets to read properties\nfrom, executables for custom commands and custom targets.  They can also be\ntested for existance with the regular :command:`if(TARGET)` subcommand.\nThe ``<name>`` may not be used to modify properties of ``<target>``, that\nis, it may not be used as the operand of :command:`set_property`,\n:command:`set_target_properties`, :command:`target_link_libraries` etc.\nAn ``ALIAS`` target may not be installed or exported.\n", 
    "define_property": "define_property\n---------------\n\nDefine and document custom properties.\n\n::\n\n  define_property(<GLOBAL | DIRECTORY | TARGET | SOURCE |\n                   TEST | VARIABLE | CACHED_VARIABLE>\n                   PROPERTY <name> [INHERITED]\n                   BRIEF_DOCS <brief-doc> [docs...]\n                   FULL_DOCS <full-doc> [docs...])\n\nDefine one property in a scope for use with the set_property and\nget_property commands.  This is primarily useful to associate\ndocumentation with property names that may be retrieved with the\nget_property command.  The first argument determines the kind of scope\nin which the property should be used.  It must be one of the\nfollowing:\n\n::\n\n  GLOBAL    = associated with the global namespace\n  DIRECTORY = associated with one directory\n  TARGET    = associated with one target\n  SOURCE    = associated with one source file\n  TEST      = associated with a test named with add_test\n  VARIABLE  = documents a CMake language variable\n  CACHED_VARIABLE = documents a CMake cache variable\n\nNote that unlike set_property and get_property no actual scope needs\nto be given; only the kind of scope is important.\n\nThe required PROPERTY option is immediately followed by the name of\nthe property being defined.\n\nIf the INHERITED option then the get_property command will chain up to\nthe next higher scope when the requested property is not set in the\nscope given to the command.  DIRECTORY scope chains to GLOBAL.\nTARGET, SOURCE, and TEST chain to DIRECTORY.\n\nThe BRIEF_DOCS and FULL_DOCS options are followed by strings to be\nassociated with the property as its brief and full documentation.\nCorresponding options to the get_property command will retrieve the\ndocumentation.\n", 
    "set_tests_properties": "set_tests_properties\n--------------------\n\nSet a property of the tests.\n\n::\n\n  set_tests_properties(test1 [test2...] PROPERTIES prop1 value1 prop2 value2)\n\nSet a property for the tests.  If the property is not found, CMake\nwill report an error.  Generator expressions will be expanded the same\nas supported by the test's add_test call.  The properties include:\n\nWILL_FAIL: If set to true, this will invert the pass/fail flag of the\ntest.\n\nPASS_REGULAR_EXPRESSION: If set, the test output will be checked\nagainst the specified regular expressions and at least one of the\nregular expressions has to match, otherwise the test will fail.\n\n::\n\n  Example: PASS_REGULAR_EXPRESSION \"TestPassed;All ok\"\n\nFAIL_REGULAR_EXPRESSION: If set, if the output will match to one of\nspecified regular expressions, the test will fail.\n\n::\n\n  Example: PASS_REGULAR_EXPRESSION \"[^a-z]Error;ERROR;Failed\"\n\nBoth PASS_REGULAR_EXPRESSION and FAIL_REGULAR_EXPRESSION expect a list\nof regular expressions.\n\nTIMEOUT: Setting this will limit the test runtime to the number of\nseconds specified.\n", 
    "elseif": "elseif\n------\n\nStarts the elseif portion of an if block.\n\n::\n\n  elseif(expression)\n\nSee the if command.\n", 
    "include": "include\n-------\n\nLoad and run CMake code from a file or module.\n\n::\n\n  include(<file|module> [OPTIONAL] [RESULT_VARIABLE <VAR>]\n                        [NO_POLICY_SCOPE])\n\nLoad and run CMake code from the file given.  Variable reads and\nwrites access the scope of the caller (dynamic scoping).  If OPTIONAL\nis present, then no error is raised if the file does not exist.  If\nRESULT_VARIABLE is given the variable will be set to the full filename\nwhich has been included or NOTFOUND if it failed.\n\nIf a module is specified instead of a file, the file with name\n<modulename>.cmake is searched first in CMAKE_MODULE_PATH, then in the\nCMake module directory.  There is one exception to this: if the file\nwhich calls include() is located itself in the CMake module directory,\nthen first the CMake module directory is searched and\nCMAKE_MODULE_PATH afterwards.  See also policy CMP0017.\n\nSee the cmake_policy() command documentation for discussion of the\nNO_POLICY_SCOPE option.\n", 
    "use_mangled_mesa": "use_mangled_mesa\n----------------\n\nDisallowed.  See CMake Policy :policy:`CMP0030`.\n\nCopy mesa headers for use in combination with system GL.\n\n::\n\n  use_mangled_mesa(PATH_TO_MESA OUTPUT_DIRECTORY)\n\nThe path to mesa includes, should contain gl_mangle.h.  The mesa\nheaders are copied to the specified output directory.  This allows\nmangled mesa headers to override other GL headers by being added to\nthe include directory path earlier.\n", 
    "export_library_dependencies": "export_library_dependencies\n---------------------------\n\nDisallowed.  See CMake Policy :policy:`CMP0033`.\n\nUse :command:`install(EXPORT)` or :command:`export` command.\n\nThis command generates an old-style library dependencies file.\nProjects requiring CMake 2.6 or later should not use the command.  Use\ninstead the install(EXPORT) command to help export targets from an\ninstallation tree and the export() command to export targets from a\nbuild tree.\n\nThe old-style library dependencies file does not take into account\nper-configuration names of libraries or the LINK_INTERFACE_LIBRARIES\ntarget property.\n\n::\n\n  export_library_dependencies(<file> [APPEND])\n\nCreate a file named <file> that can be included into a CMake listfile\nwith the INCLUDE command.  The file will contain a number of SET\ncommands that will set all the variables needed for library dependency\ninformation.  This should be the last command in the top level\nCMakeLists.txt file of the project.  If the APPEND option is\nspecified, the SET commands will be appended to the given file instead\nof replacing it.\n", 
    "target_link_libraries": "target_link_libraries\n---------------------\n\nLink a target to given libraries.\n\n::\n\n  target_link_libraries(<target> [item1 [item2 [...]]]\n                        [[debug|optimized|general] <item>] ...)\n\nSpecify libraries or flags to use when linking a given target.  The\nnamed ``<target>`` must have been created in the current directory by a\ncommand such as :command:`add_executable` or :command:`add_library`.  The\nremaining arguments specify library names or flags.  Repeated calls for\nthe same ``<target>`` append items in the order called.\n\nIf a library name matches that of another target in the project a\ndependency will automatically be added in the build system to make sure\nthe library being linked is up-to-date before the target links. Item names\nstarting with ``-``, but not ``-l`` or ``-framework``, are treated as\nlinker flags.\n\nA ``debug``, ``optimized``, or ``general`` keyword indicates that the\nlibrary immediately following it is to be used only for the\ncorresponding build configuration.  The ``debug`` keyword corresponds to\nthe Debug configuration (or to configurations named in the\n:prop_gbl:`DEBUG_CONFIGURATIONS` global property if it is set).  The\n``optimized`` keyword corresponds to all other configurations.  The\n``general`` keyword corresponds to all configurations, and is purely\noptional (assumed if omitted).  Higher granularity may be achieved for\nper-configuration rules by creating and linking to\n:ref:`IMPORTED library targets <Imported Targets>`.\n\nLibrary dependencies are transitive by default with this signature.\nWhen this target is linked into another target then the libraries\nlinked to this target will appear on the link line for the other\ntarget too.  This transitive \"link interface\" is stored in the\n:prop_tgt:`INTERFACE_LINK_LIBRARIES` target property and may be overridden\nby setting the property directly.  When :policy:`CMP0022` is not set to\n``NEW``, transitive linking is built in but may be overridden by the\n:prop_tgt:`LINK_INTERFACE_LIBRARIES` property.  Calls to other signatures\nof this command may set the property making any libraries linked\nexclusively by this signature private.\n\nCMake will also propagate :ref:`usage requirements <Target Usage Requirements>`\nfrom linked library targets.  Usage requirements of dependencies affect\ncompilation of sources in the ``<target>``.\n\nIf an ``<item>`` is a library in a Mac OX framework, the ``Headers``\ndirectory of the framework will also be processed as a\n:ref:`usage requirement <Target Usage Requirements>`.  This has the same\neffect as passing the framework directory as an include directory.\n\n--------------------------------------------------------------------------\n\n::\n\n  target_link_libraries(<target>\n                      <PRIVATE|PUBLIC|INTERFACE> <lib> ...\n                      [<PRIVATE|PUBLIC|INTERFACE> <lib> ... ] ...])\n\nThe ``PUBLIC``, ``PRIVATE`` and ``INTERFACE`` keywords can be used to\nspecify both the link dependencies and the link interface in one command.\nLibraries and targets following ``PUBLIC`` are linked to, and are made\npart of the link interface.  Libraries and targets following ``PRIVATE``\nare linked to, but are not made part of the link interface.  Libraries\nfollowing ``INTERFACE`` are appended to the link interface and are not\nused for linking ``<target>``.\n\n--------------------------------------------------------------------------\n\n::\n\n  target_link_libraries(<target> LINK_INTERFACE_LIBRARIES\n                        [[debug|optimized|general] <lib>] ...)\n\nThe ``LINK_INTERFACE_LIBRARIES`` mode appends the libraries to the\n:prop_tgt:`INTERFACE_LINK_LIBRARIES` target property instead of using them\nfor linking.  If policy :policy:`CMP0022` is not ``NEW``, then this mode\nalso appends libraries to the :prop_tgt:`LINK_INTERFACE_LIBRARIES` and its\nper-configuration equivalent.\n\nThis signature is for compatibility only.  Prefer the ``INTERFACE`` mode\ninstead.\n\nLibraries specified as ``debug`` are wrapped in a generator expression to\ncorrespond to debug builds.  If policy :policy:`CMP0022` is\nnot ``NEW``, the libraries are also appended to the\n:prop_tgt:`LINK_INTERFACE_LIBRARIES_DEBUG <LINK_INTERFACE_LIBRARIES_<CONFIG>>`\nproperty (or to the properties corresponding to configurations listed in\nthe :prop_gbl:`DEBUG_CONFIGURATIONS` global property if it is set).\nLibraries specified as ``optimized`` are appended to the\n:prop_tgt:`INTERFACE_LINK_LIBRARIES` property.  If policy :policy:`CMP0022`\nis not ``NEW``, they are also appended to the\n:prop_tgt:`LINK_INTERFACE_LIBRARIES` property.  Libraries specified as\n``general`` (or without any keyword) are treated as if specified for both\n``debug`` and ``optimized``.\n\n--------------------------------------------------------------------------\n\n::\n\n  target_link_libraries(<target>\n                        <LINK_PRIVATE|LINK_PUBLIC>\n                          [[debug|optimized|general] <lib>] ...\n                        [<LINK_PRIVATE|LINK_PUBLIC>\n                          [[debug|optimized|general] <lib>] ...])\n\nThe ``LINK_PUBLIC`` and ``LINK_PRIVATE`` modes can be used to specify both\nthe link dependencies and the link interface in one command.\n\nThis signature is for compatibility only.  Prefer the ``PUBLIC`` or\n``PRIVATE`` keywords instead.\n\nLibraries and targets following ``LINK_PUBLIC`` are linked to, and are\nmade part of the :prop_tgt:`INTERFACE_LINK_LIBRARIES`.  If policy\n:policy:`CMP0022` is not ``NEW``, they are also made part of the\n:prop_tgt:`LINK_INTERFACE_LIBRARIES`.  Libraries and targets following\n``LINK_PRIVATE`` are linked to, but are not made part of the\n:prop_tgt:`INTERFACE_LINK_LIBRARIES` (or :prop_tgt:`LINK_INTERFACE_LIBRARIES`).\n\nThe library dependency graph is normally acyclic (a DAG), but in the case\nof mutually-dependent ``STATIC`` libraries CMake allows the graph to\ncontain cycles (strongly connected components).  When another target links\nto one of the libraries, CMake repeats the entire connected component.\nFor example, the code\n\n.. code-block:: cmake\n\n  add_library(A STATIC a.c)\n  add_library(B STATIC b.c)\n  target_link_libraries(A B)\n  target_link_libraries(B A)\n  add_executable(main main.c)\n  target_link_libraries(main A)\n\nlinks ``main`` to ``A B A B``.  While one repetition is usually\nsufficient, pathological object file and symbol arrangements can require\nmore.  One may handle such cases by manually repeating the component in\nthe last ``target_link_libraries`` call.  However, if two archives are\nreally so interdependent they should probably be combined into a single\narchive.\n\nArguments to target_link_libraries may use \"generator expressions\"\nwith the syntax ``$<...>``.  Note however, that generator expressions\nwill not be used in OLD handling of :policy:`CMP0003` or :policy:`CMP0004`.\nSee the :manual:`cmake-generator-expressions(7)` manual for available\nexpressions.  See the :manual:`cmake-buildsystem(7)` manual for more on\ndefining buildsystem properties.\n", 
    "return": "return\n------\n\nReturn from a file, directory or function.\n\n::\n\n  return()\n\nReturns from a file, directory or function.  When this command is\nencountered in an included file (via include() or find_package()), it\ncauses processing of the current file to stop and control is returned\nto the including file.  If it is encountered in a file which is not\nincluded by another file, e.g.  a CMakeLists.txt, control is returned\nto the parent directory if there is one.  If return is called in a\nfunction, control is returned to the caller of the function.  Note\nthat a macro is not a function and does not handle return like a\nfunction does.\n", 
    "string": "string\n------\n\nString operations.\n\n::\n\n  string(REGEX MATCH <regular_expression>\n         <output variable> <input> [<input>...])\n  string(REGEX MATCHALL <regular_expression>\n         <output variable> <input> [<input>...])\n  string(REGEX REPLACE <regular_expression>\n         <replace_expression> <output variable>\n         <input> [<input>...])\n  string(REPLACE <match_string>\n         <replace_string> <output variable>\n         <input> [<input>...])\n  string(CONCAT <output variable> [<input>...])\n  string(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512>\n         <output variable> <input>)\n  string(COMPARE EQUAL <string1> <string2> <output variable>)\n  string(COMPARE NOTEQUAL <string1> <string2> <output variable>)\n  string(COMPARE LESS <string1> <string2> <output variable>)\n  string(COMPARE GREATER <string1> <string2> <output variable>)\n  string(ASCII <number> [<number> ...] <output variable>)\n  string(CONFIGURE <string1> <output variable>\n         [@ONLY] [ESCAPE_QUOTES])\n  string(TOUPPER <string1> <output variable>)\n  string(TOLOWER <string1> <output variable>)\n  string(LENGTH <string> <output variable>)\n  string(SUBSTRING <string> <begin> <length> <output variable>)\n  string(STRIP <string> <output variable>)\n  string(RANDOM [LENGTH <length>] [ALPHABET <alphabet>]\n         [RANDOM_SEED <seed>] <output variable>)\n  string(FIND <string> <substring> <output variable> [REVERSE])\n  string(TIMESTAMP <output variable> [<format string>] [UTC])\n  string(MAKE_C_IDENTIFIER <input string> <output variable>)\n\nREGEX MATCH will match the regular expression once and store the match\nin the output variable.\n\nREGEX MATCHALL will match the regular expression as many times as\npossible and store the matches in the output variable as a list.\n\nREGEX REPLACE will match the regular expression as many times as\npossible and substitute the replacement expression for the match in\nthe output.  The replace expression may refer to paren-delimited\nsubexpressions of the match using \\1, \\2, ..., \\9.  Note that two\nbackslashes (\\\\1) are required in CMake code to get a backslash\nthrough argument parsing.\n\nREPLACE will replace all occurrences of match_string in the input with\nreplace_string and store the result in the output.\n\nCONCAT will concatenate all the input arguments together and store\nthe result in the named output variable.\n\nMD5, SHA1, SHA224, SHA256, SHA384, and SHA512 will compute a\ncryptographic hash of the input string.\n\nCOMPARE EQUAL/NOTEQUAL/LESS/GREATER will compare the strings and store\ntrue or false in the output variable.\n\nASCII will convert all numbers into corresponding ASCII characters.\n\nCONFIGURE will transform a string like CONFIGURE_FILE transforms a\nfile.\n\nTOUPPER/TOLOWER will convert string to upper/lower characters.\n\nLENGTH will return a given string's length.\n\nSUBSTRING will return a substring of a given string.  If length is -1\nthe remainder of the string starting at begin will be returned.\n\nSTRIP will return a substring of a given string with leading and\ntrailing spaces removed.\n\nRANDOM will return a random string of given length consisting of\ncharacters from the given alphabet.  Default length is 5 characters\nand default alphabet is all numbers and upper and lower case letters.\nIf an integer RANDOM_SEED is given, its value will be used to seed the\nrandom number generator.\n\nFIND will return the position where the given substring was found in\nthe supplied string.  If the REVERSE flag was used, the command will\nsearch for the position of the last occurrence of the specified\nsubstring.\n\nThe following characters have special meaning in regular expressions:\n\n::\n\n   ^         Matches at beginning of input\n   $         Matches at end of input\n   .         Matches any single character\n   [ ]       Matches any character(s) inside the brackets\n   [^ ]      Matches any character(s) not inside the brackets\n    -        Inside brackets, specifies an inclusive range between\n             characters on either side e.g. [a-f] is [abcdef]\n             To match a literal - using brackets, make it the first\n             or the last character e.g. [+*/-] matches basic\n             mathematical operators.\n   *         Matches preceding pattern zero or more times\n   +         Matches preceding pattern one or more times\n   ?         Matches preceding pattern zero or once only\n   |         Matches a pattern on either side of the |\n   ()        Saves a matched subexpression, which can be referenced\n             in the REGEX REPLACE operation. Additionally it is saved\n             by all regular expression-related commands, including\n             e.g. if( MATCHES ), in the variables CMAKE_MATCH_(0..9).\n\n``*``, ``+`` and ``?`` have higher precedence than concatenation.  | has lower\nprecedence than concatenation.  This means that the regular expression\n\"^ab+d$\" matches \"abbd\" but not \"ababd\", and the regular expression\n\"^(ab|cd)$\" matches \"ab\" but not \"abd\".\n\nTIMESTAMP will write a string representation of the current date\nand/or time to the output variable.\n\nShould the command be unable to obtain a timestamp the output variable\nwill be set to the empty string \"\".\n\nThe optional UTC flag requests the current date/time representation to\nbe in Coordinated Universal Time (UTC) rather than local time.\n\nThe optional <format string> may contain the following format\nspecifiers:\n\n::\n\n   %d        The day of the current month (01-31).\n   %H        The hour on a 24-hour clock (00-23).\n   %I        The hour on a 12-hour clock (01-12).\n   %j        The day of the current year (001-366).\n   %m        The month of the current year (01-12).\n   %M        The minute of the current hour (00-59).\n   %S        The second of the current minute.\n             60 represents a leap second. (00-60)\n   %U        The week number of the current year (00-53).\n   %w        The day of the current week. 0 is Sunday. (0-6)\n   %y        The last two digits of the current year (00-99)\n   %Y        The current year.\n\nUnknown format specifiers will be ignored and copied to the output\nas-is.\n\nIf no explicit <format string> is given it will default to:\n\n::\n\n   %Y-%m-%dT%H:%M:%S    for local time.\n   %Y-%m-%dT%H:%M:%SZ   for UTC.\n\nMAKE_C_IDENTIFIER will write a string which can be used as an\nidentifier in C.\n", 
    "find_path": "find_path\n---------\n\n.. |FIND_XXX| replace:: find_path\n.. |NAMES| replace:: NAMES name1 [name2 ...]\n.. |SEARCH_XXX| replace:: file in a directory\n.. |SEARCH_XXX_DESC| replace:: directory containing the named file\n.. |XXX_SUBDIR| replace:: include\n\n.. |CMAKE_PREFIX_PATH_XXX| replace::\n   <prefix>/include/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and\n   |CMAKE_PREFIX_PATH_XXX_SUBDIR|\n.. |CMAKE_XXX_PATH| replace:: CMAKE_INCLUDE_PATH\n.. |CMAKE_XXX_MAC_PATH| replace:: CMAKE_FRAMEWORK_PATH\n\n.. |SYSTEM_ENVIRONMENT_PATH_XXX| replace:: PATH and INCLUDE\n\n.. |CMAKE_SYSTEM_PREFIX_PATH_XXX| replace::\n   <prefix>/include/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and\n   |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR|\n.. |CMAKE_SYSTEM_XXX_PATH| replace:: CMAKE_SYSTEM_INCLUDE_PATH\n.. |CMAKE_SYSTEM_XXX_MAC_PATH| replace:: CMAKE_SYSTEM_FRAMEWORK_PATH\n\n.. |CMAKE_FIND_ROOT_PATH_MODE_XXX| replace::\n   :variable:`CMAKE_FIND_ROOT_PATH_MODE_INCLUDE`\n\n.. include:: FIND_XXX.txt\n\nWhen searching for frameworks, if the file is specified as A/b.h, then\nthe framework search will look for A.framework/Headers/b.h.  If that\nis found the path will be set to the path to the framework.  CMake\nwill convert this to the correct -F option to include the file.\n", 
    "enable_language": "enable_language\n---------------\n\nEnable a language (CXX/C/Fortran/etc)\n\n::\n\n  enable_language(<lang> [OPTIONAL] )\n\nThis command enables support for the named language in CMake.  This is\nthe same as the project command but does not create any of the extra\nvariables that are created by the project command.  Example languages\nare CXX, C, Fortran.\n\nThis command must be called in file scope, not in a function call.\nFurthermore, it must be called in the highest directory common to all\ntargets using the named language directly for compiling sources or\nindirectly through link dependencies.  It is simplest to enable all\nneeded languages in the top-level directory of a project.\n\nThe OPTIONAL keyword is a placeholder for future implementation and\ndoes not currently work.\n", 
    "add_test": "add_test\n--------\n\nAdd a test to the project to be run by :manual:`ctest(1)`.\n\n::\n\n  add_test(NAME <name> COMMAND <command> [<arg>...]\n           [CONFIGURATIONS <config>...]\n           [WORKING_DIRECTORY <dir>])\n\nAdd a test called ``<name>``.  The test name may not contain spaces,\nquotes, or other characters special in CMake syntax.  The options are:\n\n``COMMAND``\n  Specify the test command-line.  If ``<command>`` specifies an\n  executable target (created by :command:`add_executable`) it will\n  automatically be replaced by the location of the executable created\n  at build time.\n\n``CONFIGURATIONS``\n  Restrict execution of the test only to the named configurations.\n\n``WORKING_DIRECTORY``\n  Set the :prop_test:`WORKING_DIRECTORY` test property to\n  specify the working directory in which to execute the test.\n  If not specified the test will be run with the current working\n  directory set to the build directory corresponding to the\n  current source directory.\n\nThe ``COMMAND`` and ``WORKING_DIRECTORY`` options may use \"generator\nexpressions\" with the syntax ``$<...>``.  See the\n:manual:`cmake-generator-expressions(7)` manual for available expressions.\n\nExample usage::\n\n  add_test(NAME mytest\n           COMMAND testDriver --config $<CONFIGURATION>\n                              --exe $<TARGET_FILE:myexe>)\n\nThis creates a test ``mytest`` whose command runs a ``testDriver`` tool\npassing the configuration name and the full path to the executable\nfile produced by target ``myexe``.\n\n.. note::\n\n  CMake will generate tests only if the :command:`enable_testing`\n  command has been invoked.  The :module:`CTest` module invokes the\n  command automatically when the ``BUILD_TESTING`` option is ``ON``.\n\n---------------------------------------------------------------------\n\n::\n\n  add_test(<name> <command> [<arg>...])\n\nAdd a test called ``<name>`` with the given command-line.  Unlike\nthe above ``NAME`` signature no transformation is performed on the\ncommand-line to support target names or generator expressions.\n", 
    "include_directories": "include_directories\n-------------------\n\nAdd include directories to the build.\n\n::\n\n  include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])\n\nAdd the given directories to those the compiler uses to search for\ninclude files.  Relative paths are interpreted as relative to the\ncurrent source directory.\n\nThe include directories are added to the :prop_dir:`INCLUDE_DIRECTORIES`\ndirectory property for the current ``CMakeLists`` file.  They are also\nadded to the :prop_tgt:`INCLUDE_DIRECTORIES` target property for each\ntarget in the current ``CMakeLists`` file.  The target property values\nare the ones used by the generators.\n\nBy default the directories specified are appended onto the current list of\ndirectories.  This default behavior can be changed by setting\n:variable:`CMAKE_INCLUDE_DIRECTORIES_BEFORE` to ``ON``.  By using\n``AFTER`` or ``BEFORE`` explicitly, you can select between appending and\nprepending, independent of the default.\n\nIf the ``SYSTEM`` option is given, the compiler will be told the\ndirectories are meant as system include directories on some platforms.\nSignalling this setting might achieve effects such as the compiler\nskipping warnings, or these fixed-install system files not being\nconsidered in dependency calculations - see compiler docs.\n\nArguments to ``include_directories`` may use \"generator expressions\" with\nthe syntax \"$<...>\".  See the :manual:`cmake-generator-expressions(7)`\nmanual for available expressions.  See the :manual:`cmake-buildsystem(7)`\nmanual for more on defining buildsystem properties.\n", 
    "ctest_build": "ctest_build\n-----------\n\nBuild the project.\n\n::\n\n  ctest_build([BUILD build_dir] [TARGET target] [RETURN_VALUE res]\n              [APPEND][NUMBER_ERRORS val] [NUMBER_WARNINGS val])\n\nBuilds the given build directory and stores results in Build.xml.  If\nno BUILD is given, the CTEST_BINARY_DIRECTORY variable is used.\n\nThe TARGET variable can be used to specify a build target.  If none is\nspecified, the \"all\" target will be built.\n\nThe RETURN_VALUE option specifies a variable in which to store the\nreturn value of the native build tool.  The NUMBER_ERRORS and\nNUMBER_WARNINGS options specify variables in which to store the number\nof build errors and warnings detected.\n\nThe APPEND option marks results for append to those previously\nsubmitted to a dashboard server since the last ctest_start.  Append\nsemantics are defined by the dashboard server in use.\n", 
    "find_program": "find_program\n------------\n\n.. |FIND_XXX| replace:: find_program\n.. |NAMES| replace:: NAMES name1 [name2 ...]\n.. |SEARCH_XXX| replace:: program\n.. |SEARCH_XXX_DESC| replace:: program\n.. |XXX_SUBDIR| replace:: [s]bin\n\n.. |CMAKE_PREFIX_PATH_XXX| replace::\n   |CMAKE_PREFIX_PATH_XXX_SUBDIR|\n.. |CMAKE_XXX_PATH| replace:: CMAKE_PROGRAM_PATH\n.. |CMAKE_XXX_MAC_PATH| replace:: CMAKE_APPBUNDLE_PATH\n\n.. |SYSTEM_ENVIRONMENT_PATH_XXX| replace:: PATH\n\n.. |CMAKE_SYSTEM_PREFIX_PATH_XXX| replace::\n   |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR|\n.. |CMAKE_SYSTEM_XXX_PATH| replace:: CMAKE_SYSTEM_PROGRAM_PATH\n.. |CMAKE_SYSTEM_XXX_MAC_PATH| replace:: CMAKE_SYSTEM_APPBUNDLE_PATH\n\n.. |CMAKE_FIND_ROOT_PATH_MODE_XXX| replace::\n   :variable:`CMAKE_FIND_ROOT_PATH_MODE_PROGRAM`\n\n.. include:: FIND_XXX.txt\n", 
    "remove_definitions": "remove_definitions\n------------------\n\nRemoves -D define flags added by add_definitions.\n\n::\n\n  remove_definitions(-DFOO -DBAR ...)\n\nRemoves flags (added by add_definitions) from the compiler command\nline for sources in the current directory and below.\n", 
    "ctest_configure": "ctest_configure\n---------------\n\nConfigure the project build tree.\n\n::\n\n  ctest_configure([BUILD build_dir] [SOURCE source_dir] [APPEND]\n                  [OPTIONS options] [RETURN_VALUE res])\n\nConfigures the given build directory and stores results in\nConfigure.xml.  If no BUILD is given, the CTEST_BINARY_DIRECTORY\nvariable is used.  If no SOURCE is given, the CTEST_SOURCE_DIRECTORY\nvariable is used.  The OPTIONS argument specifies command line\narguments to pass to the configuration tool.  The RETURN_VALUE option\nspecifies a variable in which to store the return value of the native\nbuild tool.\n\nThe APPEND option marks results for append to those previously\nsubmitted to a dashboard server since the last ctest_start.  Append\nsemantics are defined by the dashboard server in use.\n", 
    "install_files": "install_files\n-------------\n\nDeprecated.  Use the install(FILES ) command instead.\n\nThis command has been superceded by the install command.  It is\nprovided for compatibility with older CMake code.  The FILES form is\ndirectly replaced by the FILES form of the install command.  The\nregexp form can be expressed more clearly using the GLOB form of the\nfile command.\n\n::\n\n  install_files(<dir> extension file file ...)\n\nCreate rules to install the listed files with the given extension into\nthe given directory.  Only files existing in the current source tree\nor its corresponding location in the binary tree may be listed.  If a\nfile specified already has an extension, that extension will be\nremoved first.  This is useful for providing lists of source files\nsuch as foo.cxx when you want the corresponding foo.h to be installed.\nA typical extension is '.h'.\n\n::\n\n  install_files(<dir> regexp)\n\nAny files in the current source directory that match the regular\nexpression will be installed.\n\n::\n\n  install_files(<dir> FILES file file ...)\n\nAny files listed after the FILES keyword will be installed explicitly\nfrom the names given.  Full paths are allowed in this form.\n\nThe directory <dir> is relative to the installation prefix, which is\nstored in the variable CMAKE_INSTALL_PREFIX.\n", 
    "remove": "remove\n------\n\nDeprecated. Use the list(REMOVE_ITEM ) command instead.\n\n::\n\n  remove(VAR VALUE VALUE ...)\n\nRemoves VALUE from the variable VAR.  This is typically used to remove\nentries from a vector (e.g.  semicolon separated list).  VALUE is\nexpanded.\n", 
    "link_libraries": "link_libraries\n--------------\n\nDeprecated. Use the target_link_libraries() command instead.\n\nLink libraries to all targets added later.\n\n::\n\n  link_libraries(library1 <debug | optimized> library2 ...)\n\nSpecify a list of libraries to be linked into any following targets\n(typically added with the add_executable or add_library calls).  This\ncommand is passed down to all subdirectories.  The debug and optimized\nstrings may be used to indicate that the next library listed is to be\nused only for that specific type of build.\n", 
    "set": "set\n---\n\nSet a CMake, cache or environment variable to a given value.\n\n::\n\n  set(<variable> <value>\n      [[CACHE <type> <docstring> [FORCE]] | PARENT_SCOPE])\n\nWithin CMake sets <variable> to the value <value>.  <value> is\nexpanded before <variable> is set to it.  Normally, set will set a\nregular CMake variable.  If CACHE is present, then the <variable> is\nput in the cache instead, unless it is already in the cache.  See\nsection 'Variable types in CMake' below for details of regular and\ncache variables and their interactions.  If CACHE is used, <type> and\n<docstring> are required.  <type> is used by the CMake GUI to choose a\nwidget with which the user sets a value.  The value for <type> may be\none of\n\n::\n\n  FILEPATH = File chooser dialog.\n  PATH     = Directory chooser dialog.\n  STRING   = Arbitrary string.\n  BOOL     = Boolean ON/OFF checkbox.\n  INTERNAL = No GUI entry (used for persistent variables).\n\nIf <type> is INTERNAL, the cache variable is marked as internal, and\nwill not be shown to the user in tools like cmake-gui.  This is\nintended for values that should be persisted in the cache, but which\nusers should not normally change.  INTERNAL implies FORCE.\n\nNormally, set(...CACHE...) creates cache variables, but does not\nmodify them.  If FORCE is specified, the value of the cache variable\nis set, even if the variable is already in the cache.  This should\nnormally be avoided, as it will remove any changes to the cache\nvariable's value by the user.\n\nIf PARENT_SCOPE is present, the variable will be set in the scope\nabove the current scope.  Each new directory or function creates a new\nscope.  This command will set the value of a variable into the parent\ndirectory or calling function (whichever is applicable to the case at\nhand).  PARENT_SCOPE cannot be combined with CACHE.\n\nIf <value> is not specified then the variable is removed instead of\nset.  See also: the unset() command.\n\n::\n\n  set(<variable> <value1> ... <valueN>)\n\nIn this case <variable> is set to a semicolon separated list of\nvalues.\n\n<variable> can be an environment variable such as:\n\n::\n\n  set( ENV{PATH} /home/martink )\n\nin which case the environment variable will be set.\n\n*** Variable types in CMake ***\n\nIn CMake there are two types of variables: normal variables and cache\nvariables.  Normal variables are meant for the internal use of the\nscript (just like variables in most programming languages); they are\nnot persisted across CMake runs.  Cache variables (unless set with\nINTERNAL) are mostly intended for configuration settings where the\nfirst CMake run determines a suitable default value, which the user\ncan then override, by editing the cache with tools such as ccmake or\ncmake-gui.  Cache variables are stored in the CMake cache file, and\nare persisted across CMake runs.\n\nBoth types can exist at the same time with the same name but different\nvalues.  When ${FOO} is evaluated, CMake first looks for a normal\nvariable 'FOO' in scope and uses it if set.  If and only if no normal\nvariable exists then it falls back to the cache variable 'FOO'.\n\nSome examples:\n\nThe code 'set(FOO \"x\")' sets the normal variable 'FOO'.  It does not\ntouch the cache, but it will hide any existing cache value 'FOO'.\n\nThe code 'set(FOO \"x\" CACHE ...)' checks for 'FOO' in the cache,\nignoring any normal variable of the same name.  If 'FOO' is in the\ncache then nothing happens to either the normal variable or the cache\nvariable.  If 'FOO' is not in the cache, then it is added to the\ncache.\n\nFinally, whenever a cache variable is added or modified by a command,\nCMake also *removes* the normal variable of the same name from the\ncurrent scope so that an immediately following evaluation of it will\nexpose the newly cached value.\n\nNormally projects should avoid using normal and cache variables of the\nsame name, as this interaction can be hard to follow.  However, in\nsome situations it can be useful.  One example (used by some\nprojects):\n\nA project has a subproject in its source tree.  The child project has\nits own CMakeLists.txt, which is included from the parent\nCMakeLists.txt using add_subdirectory().  Now, if the parent and the\nchild project provide the same option (for example a compiler option),\nthe parent gets the first chance to add a user-editable option to the\ncache.  Normally, the child would then use the same value that the\nparent uses.  However, it may be necessary to hard-code the value for\nthe child project's option while still allowing the user to edit the\nvalue used by the parent project.  The parent project can achieve this\nsimply by setting a normal variable with the same name as the option\nin a scope sufficient to hide the option's cache variable from the\nchild completely.  The parent has already set the cache variable, so\nthe child's set(...CACHE...) will do nothing, and evaluating the\noption variable will use the value from the normal variable, which\nhides the cache variable.\n", 
    "list": "list\n----\n\nList operations.\n\n::\n\n  list(LENGTH <list> <output variable>)\n  list(GET <list> <element index> [<element index> ...]\n       <output variable>)\n  list(APPEND <list> [<element> ...])\n  list(FIND <list> <value> <output variable>)\n  list(INSERT <list> <element_index> <element> [<element> ...])\n  list(REMOVE_ITEM <list> <value> [<value> ...])\n  list(REMOVE_AT <list> <index> [<index> ...])\n  list(REMOVE_DUPLICATES <list>)\n  list(REVERSE <list>)\n  list(SORT <list>)\n\nLENGTH will return a given list's length.\n\nGET will return list of elements specified by indices from the list.\n\nAPPEND will append elements to the list.\n\nFIND will return the index of the element specified in the list or -1\nif it wasn't found.\n\nINSERT will insert elements to the list to the specified location.\n\nREMOVE_AT and REMOVE_ITEM will remove items from the list.  The\ndifference is that REMOVE_ITEM will remove the given items, while\nREMOVE_AT will remove the items at the given indices.\n\nREMOVE_DUPLICATES will remove duplicated items in the list.\n\nREVERSE reverses the contents of the list in-place.\n\nSORT sorts the list in-place alphabetically.\n\nThe list subcommands APPEND, INSERT, REMOVE_AT, REMOVE_ITEM,\nREMOVE_DUPLICATES, REVERSE and SORT may create new values for the list\nwithin the current CMake variable scope.  Similar to the SET command,\nthe LIST command creates new variable values in the current scope,\neven if the list itself is actually defined in a parent scope.  To\npropagate the results of these operations upwards, use SET with\nPARENT_SCOPE, SET with CACHE INTERNAL, or some other means of value\npropagation.\n\nNOTES: A list in cmake is a ; separated group of strings.  To create a\nlist the set command can be used.  For example, set(var a b c d e)\ncreates a list with a;b;c;d;e, and set(var \"a b c d e\") creates a\nstring or a list with one item in it.   (Note macro arguments are not\nvariables, and therefore cannot be used in LIST commands.)\n\nWhen specifying index values, if <element index> is 0 or greater, it\nis indexed from the beginning of the list, with 0 representing the\nfirst list element.  If <element index> is -1 or lesser, it is indexed\nfrom the end of the list, with -1 representing the last list element.\nBe careful when counting with negative indices: they do not start from\n0.  -0 is equivalent to 0, the first list element.\n", 
    "export": "export\n------\n\nExport targets from the build tree for use by outside projects.\n\n::\n\n  export(EXPORT <export-name> [NAMESPACE <namespace>] [FILE <filename>])\n\nCreate a file <filename> that may be included by outside projects to\nimport targets from the current project's build tree.  This is useful\nduring cross-compiling to build utility executables that can run on\nthe host platform in one project and then import them into another\nproject being compiled for the target platform.  If the NAMESPACE\noption is given the <namespace> string will be prepended to all target\nnames written to the file.\n\nTarget installations are associated with the export <export-name>\nusing the ``EXPORT`` option of the :command:`install(TARGETS)` command.\n\nThe file created by this command is specific to the build tree and\nshould never be installed.  See the install(EXPORT) command to export\ntargets from an installation tree.\n\nThe properties set on the generated IMPORTED targets will have the\nsame values as the final values of the input TARGETS.\n\n::\n\n  export(TARGETS [target1 [target2 [...]]] [NAMESPACE <namespace>]\n         [APPEND] FILE <filename> [EXPORT_LINK_INTERFACE_LIBRARIES])\n\nThis signature is similar to the ``EXPORT`` signature, but targets are listed\nexplicitly rather than specified as an export-name.  If the APPEND option is\ngiven the generated code will be appended to the file instead of overwriting it.\nThe EXPORT_LINK_INTERFACE_LIBRARIES keyword, if present, causes the\ncontents of the properties matching\n``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?`` to be exported, when\npolicy CMP0022 is NEW.  If a library target is included in the export\nbut a target to which it links is not included the behavior is\nunspecified.\n\n::\n\n  export(PACKAGE <name>)\n\nStore the current build directory in the CMake user package registry\nfor package <name>.  The find_package command may consider the\ndirectory while searching for package <name>.  This helps dependent\nprojects find and use a package from the current project's build tree\nwithout help from the user.  Note that the entry in the package\nregistry that this command creates works only in conjunction with a\npackage configuration file (<name>Config.cmake) that works with the\nbuild tree.\n", 
    "write_file": "write_file\n----------\n\nDeprecated. Use the file(WRITE ) command instead.\n\n::\n\n  write_file(filename \"message to write\"... [APPEND])\n\nThe first argument is the file name, the rest of the arguments are\nmessages to write.  If the argument APPEND is specified, then the\nmessage will be appended.\n\nNOTE 1: file(WRITE ...  and file(APPEND ...  do exactly the same as\nthis one but add some more functionality.\n\nNOTE 2: When using write_file the produced file cannot be used as an\ninput to CMake (CONFIGURE_FILE, source file ...) because it will lead\nto an infinite loop.  Use configure_file if you want to generate input\nfiles to CMake.\n", 
    "output_required_files": "output_required_files\n---------------------\n\nDisallowed.  See CMake Policy :policy:`CMP0032`.\n\nApproximate C preprocessor dependency scanning.\n\nThis command exists only because ancient CMake versions provided it.\nCMake handles preprocessor dependency scanning automatically using a\nmore advanced scanner.\n\n::\n\n  output_required_files(srcfile outputfile)\n\nOutputs a list of all the source files that are required by the\nspecified srcfile.  This list is written into outputfile.  This is\nsimilar to writing out the dependencies for srcfile except that it\njumps from .h files into .cxx, .c and .cpp files if possible.\n", 
    "project": "project\n-------\n\nSet a name, version, and enable languages for the entire project.\n\n.. code-block:: cmake\n\n project(<PROJECT-NAME> [LANGUAGES] [<language-name>...])\n project(<PROJECT-NAME>\n         [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]\n         [LANGUAGES <language-name>...])\n\nSets the name of the project and stores the name in the\n:variable:`PROJECT_NAME` variable.  Additionally this sets variables\n\n* :variable:`PROJECT_SOURCE_DIR`,\n  :variable:`<PROJECT-NAME>_SOURCE_DIR`\n* :variable:`PROJECT_BINARY_DIR`,\n  :variable:`<PROJECT-NAME>_BINARY_DIR`\n\nIf ``VERSION`` is specified, given components must be non-negative integers.\nIf ``VERSION`` is not specified, the default version is the empty string.\nThe ``VERSION`` option may not be used unless policy :policy:`CMP0048` is\nset to ``NEW``.\n\nThe :command:`project()` command stores the version number and its components\nin variables\n\n* :variable:`PROJECT_VERSION`,\n  :variable:`<PROJECT-NAME>_VERSION`\n* :variable:`PROJECT_VERSION_MAJOR`,\n  :variable:`<PROJECT-NAME>_VERSION_MAJOR`\n* :variable:`PROJECT_VERSION_MINOR`,\n  :variable:`<PROJECT-NAME>_VERSION_MINOR`\n* :variable:`PROJECT_VERSION_PATCH`,\n  :variable:`<PROJECT-NAME>_VERSION_PATCH`\n* :variable:`PROJECT_VERSION_TWEAK`,\n  :variable:`<PROJECT-NAME>_VERSION_TWEAK`\n\nVariables corresponding to unspecified versions are set to the empty string\n(if policy :policy:`CMP0048` is set to ``NEW``).\n\nOptionally you can specify which languages your project supports.\nExample languages are ``C``, ``CXX`` (i.e.  C++), ``Fortran``, etc.\nBy default ``C`` and ``CXX`` are enabled if no language options are\ngiven.  Specify language ``NONE``, or use the ``LANGUAGES`` keyword\nand list no languages, to skip enabling any languages.\n\nIf a variable exists called :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE`,\nthe file pointed to by that variable will be included as the last step of the\nproject command.\n\nThe top-level ``CMakeLists.txt`` file for a project must contain a\nliteral, direct call to the :command:`project` command; loading one\nthrough the :command:`include` command is not sufficient.  If no such\ncall exists CMake will implicitly add one to the top that enables the\ndefault languages (``C`` and ``CXX``).\n", 
    "find_file": "find_file\n---------\n\n.. |FIND_XXX| replace:: find_file\n.. |NAMES| replace:: NAMES name1 [name2 ...]\n.. |SEARCH_XXX| replace:: full path to a file\n.. |SEARCH_XXX_DESC| replace:: full path to named file\n.. |XXX_SUBDIR| replace:: include\n\n.. |CMAKE_PREFIX_PATH_XXX| replace::\n   <prefix>/include/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and\n   |CMAKE_PREFIX_PATH_XXX_SUBDIR|\n.. |CMAKE_XXX_PATH| replace:: CMAKE_INCLUDE_PATH\n.. |CMAKE_XXX_MAC_PATH| replace:: CMAKE_FRAMEWORK_PATH\n\n.. |SYSTEM_ENVIRONMENT_PATH_XXX| replace:: PATH and INCLUDE\n\n.. |CMAKE_SYSTEM_PREFIX_PATH_XXX| replace::\n   <prefix>/include/<arch> if CMAKE_LIBRARY_ARCHITECTURE is set, and\n   |CMAKE_SYSTEM_PREFIX_PATH_XXX_SUBDIR|\n.. |CMAKE_SYSTEM_XXX_PATH| replace:: CMAKE_SYSTEM_INCLUDE_PATH\n.. |CMAKE_SYSTEM_XXX_MAC_PATH| replace:: CMAKE_SYSTEM_FRAMEWORK_PATH\n\n.. |CMAKE_FIND_ROOT_PATH_MODE_XXX| replace::\n   :variable:`CMAKE_FIND_ROOT_PATH_MODE_INCLUDE`\n\n.. include:: FIND_XXX.txt\n", 
    "subdirs": "subdirs\n-------\n\nDeprecated. Use the add_subdirectory() command instead.\n\nAdd a list of subdirectories to the build.\n\n::\n\n  subdirs(dir1 dir2 ...[EXCLUDE_FROM_ALL exclude_dir1 exclude_dir2 ...]\n          [PREORDER] )\n\nAdd a list of subdirectories to the build.  The add_subdirectory\ncommand should be used instead of subdirs although subdirs will still\nwork.  This will cause any CMakeLists.txt files in the sub directories\nto be processed by CMake.  Any directories after the PREORDER flag are\ntraversed first by makefile builds, the PREORDER flag has no effect on\nIDE projects.  Any directories after the EXCLUDE_FROM_ALL marker will\nnot be included in the top level makefile or project file.  This is\nuseful for having CMake create makefiles or projects for a set of\nexamples in a project.  You would want CMake to generate makefiles or\nproject files for all the examples at the same time, but you would not\nwant them to show up in the top level project or be built each time\nmake is run from the top.\n", 
    "add_compile_options": "add_compile_options\n-------------------\n\nAdds options to the compilation of source files.\n\n::\n\n  add_compile_options(<option> ...)\n\nAdds options to the compiler command line for sources in the current\ndirectory and below.  This command can be used to add any options, but\nalternative commands exist to add preprocessor definitions\n(:command:`target_compile_definitions` and :command:`add_definitions`) or\ninclude directories (:command:`target_include_directories` and\n:command:`include_directories`).  See documentation of the\n:prop_tgt:`directory <COMPILE_OPTIONS>` and\n:prop_tgt:` target <COMPILE_OPTIONS>` ``COMPILE_OPTIONS`` properties.\n\nArguments to ``add_compile_options`` may use \"generator expressions\" with\nthe syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`\nmanual for available expressions.  See the :manual:`cmake-buildsystem(7)`\nmanual for more on defining buildsystem properties.\n", 
    "get_directory_property": "get_directory_property\n----------------------\n\nGet a property of DIRECTORY scope.\n\n::\n\n  get_directory_property(<variable> [DIRECTORY <dir>] <prop-name>)\n\nStore a property of directory scope in the named variable.  If the\nproperty is not defined the empty-string is returned.  The DIRECTORY\nargument specifies another directory from which to retrieve the\nproperty value.  The specified directory must have already been\ntraversed by CMake.\n\n::\n\n  get_directory_property(<variable> [DIRECTORY <dir>]\n                         DEFINITION <var-name>)\n\nGet a variable definition from a directory.  This form is useful to\nget a variable definition from another directory.\n\nSee also the more general get_property() command.\n", 
    "exec_program": "exec_program\n------------\n\nDeprecated.  Use the execute_process() command instead.\n\nRun an executable program during the processing of the CMakeList.txt\nfile.\n\n::\n\n  exec_program(Executable [directory in which to run]\n               [ARGS <arguments to executable>]\n               [OUTPUT_VARIABLE <var>]\n               [RETURN_VALUE <var>])\n\nThe executable is run in the optionally specified directory.  The\nexecutable can include arguments if it is double quoted, but it is\nbetter to use the optional ARGS argument to specify arguments to the\nprogram.  This is because cmake will then be able to escape spaces in\nthe executable path.  An optional argument OUTPUT_VARIABLE specifies a\nvariable in which to store the output.  To capture the return value of\nthe execution, provide a RETURN_VALUE.  If OUTPUT_VARIABLE is\nspecified, then no output will go to the stdout/stderr of the console\nrunning cmake.\n", 
    "math": "math\n----\n\nMathematical expressions.\n\n::\n\n  math(EXPR <output variable> <math expression>)\n\nEXPR evaluates mathematical expression and returns result in the\noutput variable.  Example mathematical expression is '5 * ( 10 + 13\n)'.  Supported operators are + - * / % | & ^ ~ << >> * / %.  They have\nthe same meaning as they do in C code.\n", 
    "get_target_property": "get_target_property\n-------------------\n\nGet a property from a target.\n\n::\n\n  get_target_property(VAR target property)\n\nGet a property from a target.  The value of the property is stored in\nthe variable VAR.  If the property is not found, VAR will be set to\n\"NOTFOUND\".  Use set_target_properties to set property values.\nProperties are usually used to control how a target is built, but some\nquery the target instead.  This command can get properties for any\ntarget so far created.  The targets do not need to be in the current\nCMakeLists.txt file.\n\nSee also the more general get_property() command.\n", 
    "endfunction": "endfunction\n-----------\n\nEnds a list of commands in a function block.\n\n::\n\n  endfunction(expression)\n\nSee the function command.\n", 
    "set_target_properties": "set_target_properties\n---------------------\n\nTargets can have properties that affect how they are built.\n\n::\n\n  set_target_properties(target1 target2 ...\n                        PROPERTIES prop1 value1\n                        prop2 value2 ...)\n\nSet properties on a target.  The syntax for the command is to list all\nthe files you want to change, and then provide the values you want to\nset next.  You can use any prop value pair you want and extract it\nlater with the GET_TARGET_PROPERTY command.\n\nProperties that affect the name of a target's output file are as\nfollows.  The PREFIX and SUFFIX properties override the default target\nname prefix (such as \"lib\") and suffix (such as \".so\").  IMPORT_PREFIX\nand IMPORT_SUFFIX are the equivalent properties for the import library\ncorresponding to a DLL (for SHARED library targets).  OUTPUT_NAME sets\nthe real name of a target when it is built and can be used to help\ncreate two targets of the same name even though CMake requires unique\nlogical target names.  There is also a <CONFIG>_OUTPUT_NAME that can\nset the output name on a per-configuration basis.  <CONFIG>_POSTFIX\nsets a postfix for the real name of the target when it is built under\nthe configuration named by <CONFIG> (in upper-case, such as\n\"DEBUG_POSTFIX\").  The value of this property is initialized when the\ntarget is created to the value of the variable CMAKE_<CONFIG>_POSTFIX\n(except for executable targets because earlier CMake versions which\ndid not use this variable for executables).\n\nThe LINK_FLAGS property can be used to add extra flags to the link\nstep of a target.  LINK_FLAGS_<CONFIG> will add to the configuration\n<CONFIG>, for example, DEBUG, RELEASE, MINSIZEREL, RELWITHDEBINFO.\nDEFINE_SYMBOL sets the name of the preprocessor symbol defined when\ncompiling sources in a shared library.  If not set here then it is set\nto target_EXPORTS by default (with some substitutions if the target is\nnot a valid C identifier).  This is useful for headers to know whether\nthey are being included from inside their library or outside to\nproperly setup dllexport/dllimport decorations.  The COMPILE_FLAGS\nproperty sets additional compiler flags used to build sources within\nthe target.  It may also be used to pass additional preprocessor\ndefinitions.\n\nThe LINKER_LANGUAGE property is used to change the tool used to link\nan executable or shared library.  The default is set the language to\nmatch the files in the library.  CXX and C are common values for this\nproperty.\n\nFor shared libraries VERSION and SOVERSION can be used to specify the\nbuild version and API version respectively.  When building or\ninstalling appropriate symlinks are created if the platform supports\nsymlinks and the linker supports so-names.  If only one of both is\nspecified the missing is assumed to have the same version number.  For\nexecutables VERSION can be used to specify the build version.  When\nbuilding or installing appropriate symlinks are created if the\nplatform supports symlinks.  For shared libraries and executables on\nWindows the VERSION attribute is parsed to extract a \"major.minor\"\nversion number.  These numbers are used as the image version of the\nbinary.\n\nThere are a few properties used to specify RPATH rules.  INSTALL_RPATH\nis a semicolon-separated list specifying the rpath to use in installed\ntargets (for platforms that support it).  INSTALL_RPATH_USE_LINK_PATH\nis a boolean that if set to true will append directories in the linker\nsearch path and outside the project to the INSTALL_RPATH.\nSKIP_BUILD_RPATH is a boolean specifying whether to skip automatic\ngeneration of an rpath allowing the target to run from the build tree.\nBUILD_WITH_INSTALL_RPATH is a boolean specifying whether to link the\ntarget in the build tree with the INSTALL_RPATH.  This takes\nprecedence over SKIP_BUILD_RPATH and avoids the need for relinking\nbefore installation.  INSTALL_NAME_DIR is a string specifying the\ndirectory portion of the \"install_name\" field of shared libraries on\nMac OSX to use in the installed targets.  When the target is created\nthe values of the variables CMAKE_INSTALL_RPATH,\nCMAKE_INSTALL_RPATH_USE_LINK_PATH, CMAKE_SKIP_BUILD_RPATH,\nCMAKE_BUILD_WITH_INSTALL_RPATH, and CMAKE_INSTALL_NAME_DIR are used to\ninitialize these properties.\n\nPROJECT_LABEL can be used to change the name of the target in an IDE\nlike visual studio.  VS_KEYWORD can be set to change the visual studio\nkeyword, for example Qt integration works better if this is set to\nQt4VSv1.0.\n\nVS_SCC_PROJECTNAME, VS_SCC_LOCALPATH, VS_SCC_PROVIDER and\nVS_SCC_AUXPATH can be set to add support for source control bindings\nin a Visual Studio project file.\n\nVS_GLOBAL_<variable> can be set to add a Visual Studio\nproject-specific global variable.  Qt integration works better if\nVS_GLOBAL_QtVersion is set to the Qt version FindQt4.cmake found.  For\nexample, \"4.7.3\"\n\nThe PRE_INSTALL_SCRIPT and POST_INSTALL_SCRIPT properties are the old\nway to specify CMake scripts to run before and after installing a\ntarget.  They are used only when the old INSTALL_TARGETS command is\nused to install the target.  Use the INSTALL command instead.\n\nThe EXCLUDE_FROM_DEFAULT_BUILD property is used by the visual studio\ngenerators.  If it is set to 1 the target will not be part of the\ndefault build when you select \"Build Solution\".  This can also be set\non a per-configuration basis using\nEXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>.\n", 
    "enable_testing": "enable_testing\n--------------\n\nEnable testing for current directory and below.\n\n::\n\n  enable_testing()\n\nEnables testing for this directory and below.  See also the add_test\ncommand.  Note that ctest expects to find a test file in the build\ndirectory root.  Therefore, this command should be in the source\ndirectory root.\n", 
    "ctest_coverage": "ctest_coverage\n--------------\n\nCollect coverage tool results.\n\n::\n\n  ctest_coverage([BUILD build_dir] [RETURN_VALUE res] [APPEND]\n                 [LABELS label1 [label2 [...]]])\n\nPerform the coverage of the given build directory and stores results\nin Coverage.xml.  The second argument is a variable that will hold\nvalue.\n\nThe LABELS option filters the coverage report to include only source\nfiles labeled with at least one of the labels specified.\n\nThe APPEND option marks results for append to those previously\nsubmitted to a dashboard server since the last ctest_start.  Append\nsemantics are defined by the dashboard server in use.\n", 
    "ctest_empty_binary_directory": "ctest_empty_binary_directory\n----------------------------\n\nempties the binary directory\n\n::\n\n  ctest_empty_binary_directory( directory )\n\nRemoves a binary directory.  This command will perform some checks\nprior to deleting the directory in an attempt to avoid malicious or\naccidental directory deletion.\n", 
    "include_regular_expression": "include_regular_expression\n--------------------------\n\nSet the regular expression used for dependency checking.\n\n::\n\n  include_regular_expression(regex_match [regex_complain])\n\nSet the regular expressions used in dependency checking.  Only files\nmatching regex_match will be traced as dependencies.  Only files\nmatching regex_complain will generate warnings if they cannot be found\n(standard header paths are not searched).  The defaults are:\n\n::\n\n  regex_match    = \"^.*$\" (match everything)\n  regex_complain = \"^$\" (match empty string only)\n", 
    "add_custom_command": "add_custom_command\n------------------\n\nAdd a custom build rule to the generated build system.\n\nThere are two main signatures for add_custom_command The first\nsignature is for adding a custom command to produce an output.\n\n::\n\n  add_custom_command(OUTPUT output1 [output2 ...]\n                     COMMAND command1 [ARGS] [args1...]\n                     [COMMAND command2 [ARGS] [args2...] ...]\n                     [MAIN_DEPENDENCY depend]\n                     [DEPENDS [depends...]]\n                     [IMPLICIT_DEPENDS <lang1> depend1\n                                      [<lang2> depend2] ...]\n                     [WORKING_DIRECTORY dir]\n                     [COMMENT comment] [VERBATIM] [APPEND])\n\nThis defines a command to generate specified OUTPUT file(s).  A target\ncreated in the same directory (CMakeLists.txt file) that specifies any\noutput of the custom command as a source file is given a rule to\ngenerate the file using the command at build time.  Do not list the\noutput in more than one independent target that may build in parallel\nor the two instances of the rule may conflict (instead use\nadd_custom_target to drive the command and make the other targets\ndepend on that one).  If an output name is a relative path it will be\ninterpreted relative to the build tree directory corresponding to the\ncurrent source directory.  Note that MAIN_DEPENDENCY is completely\noptional and is used as a suggestion to visual studio about where to\nhang the custom command.  In makefile terms this creates a new target\nin the following form:\n\n::\n\n  OUTPUT: MAIN_DEPENDENCY DEPENDS\n          COMMAND\n\nIf more than one command is specified they will be executed in order.\nThe optional ARGS argument is for backward compatibility and will be\nignored.\n\nThe second signature adds a custom command to a target such as a\nlibrary or executable.  This is useful for performing an operation\nbefore or after building the target.  The command becomes part of the\ntarget and will only execute when the target itself is built.  If the\ntarget is already built, the command will not execute.\n\n::\n\n  add_custom_command(TARGET target\n                     PRE_BUILD | PRE_LINK | POST_BUILD\n                     COMMAND command1 [ARGS] [args1...]\n                     [COMMAND command2 [ARGS] [args2...] ...]\n                     [WORKING_DIRECTORY dir]\n                     [COMMENT comment] [VERBATIM])\n\nThis defines a new command that will be associated with building the\nspecified target.  When the command will happen is determined by which\nof the following is specified:\n\n::\n\n  PRE_BUILD - run before all other dependencies\n  PRE_LINK - run after other dependencies\n  POST_BUILD - run after the target has been built\n\nNote that the PRE_BUILD option is only supported on Visual Studio 7 or\nlater.  For all other generators PRE_BUILD will be treated as\nPRE_LINK.\n\nIf WORKING_DIRECTORY is specified the command will be executed in the\ndirectory given.  If it is a relative path it will be interpreted\nrelative to the build tree directory corresponding to the current\nsource directory.  If COMMENT is set, the value will be displayed as a\nmessage before the commands are executed at build time.  If APPEND is\nspecified the COMMAND and DEPENDS option values are appended to the\ncustom command for the first output specified.  There must have\nalready been a previous call to this command with the same output.\nThe COMMENT, WORKING_DIRECTORY, and MAIN_DEPENDENCY options are\ncurrently ignored when APPEND is given, but may be used in the future.\n\nIf VERBATIM is given then all arguments to the commands will be\nescaped properly for the build tool so that the invoked command\nreceives each argument unchanged.  Note that one level of escapes is\nstill used by the CMake language processor before add_custom_command\neven sees the arguments.  Use of VERBATIM is recommended as it enables\ncorrect behavior.  When VERBATIM is not given the behavior is platform\nspecific because there is no protection of tool-specific special\ncharacters.\n\nIf the output of the custom command is not actually created as a file\non disk it should be marked as SYMBOLIC with\nSET_SOURCE_FILES_PROPERTIES.\n\nThe IMPLICIT_DEPENDS option requests scanning of implicit dependencies\nof an input file.  The language given specifies the programming\nlanguage whose corresponding dependency scanner should be used.\nCurrently only C and CXX language scanners are supported.  The\nlanguage has to be specified for every file in the IMPLICIT_DEPENDS\nlist.  Dependencies discovered from the scanning are added to those of\nthe custom command at build time.  Note that the IMPLICIT_DEPENDS\noption is currently supported only for Makefile generators and will be\nignored by other generators.\n\nIf COMMAND specifies an executable target (created by ADD_EXECUTABLE)\nit will automatically be replaced by the location of the executable\ncreated at build time.  Additionally a target-level dependency will be\nadded so that the executable target will be built before any target\nusing this custom command.  However this does NOT add a file-level\ndependency that would cause the custom command to re-run whenever the\nexecutable is recompiled.\n\nArguments to COMMAND may use \"generator expressions\" with the syntax\n``$<...>``.  See the :manual:`cmake-generator-expressions(7)` manual for\navailable expressions.\n\nNote that tgt is not added as a dependency of the target this\nexpression is evaluated on.\n\n::\n\n  $<TARGET_POLICY:pol>          = '1' if the policy was NEW when the 'head' target was created, else '0'.  If the policy was not set, the warning message for the policy will be emitted.  This generator expression only works for a subset of policies.\n  $<INSTALL_PREFIX>         = Content of the install prefix when the target is exported via INSTALL(EXPORT) and empty otherwise.\n\nBoolean expressions:\n\n::\n\n  $<AND:?[,?]...>           = '1' if all '?' are '1', else '0'\n  $<OR:?[,?]...>            = '0' if all '?' are '0', else '1'\n  $<NOT:?>                  = '0' if '?' is '1', else '1'\n\nwhere '?' is always either '0' or '1'.\n\nExpressions with an implicit 'this' target:\n\n::\n\n  $<TARGET_PROPERTY:prop>   = The value of the property prop on the target on which the generator expression is evaluated.\n\nReferences to target names in generator expressions imply target-level\ndependencies, but NOT file-level dependencies.  List target names with\nthe DEPENDS option to add file dependencies.\n\nThe DEPENDS option specifies files on which the command depends.  If\nany dependency is an OUTPUT of another custom command in the same\ndirectory (CMakeLists.txt file) CMake automatically brings the other\ncustom command into the target in which this command is built.  If\nDEPENDS is not specified the command will run whenever the OUTPUT is\nmissing; if the command does not actually create the OUTPUT then the\nrule will always run.  If DEPENDS specifies any target (created by an\nADD_* command) a target-level dependency is created to make sure the\ntarget is built before any target using this custom command.\nAdditionally, if the target is an executable or library a file-level\ndependency is created to cause the custom command to re-run whenever\nthe target is recompiled.\n", 
    "ctest_update": "ctest_update\n------------\n\nUpdate the work tree from version control.\n\n::\n\n  ctest_update([SOURCE source] [RETURN_VALUE res])\n\nUpdates the given source directory and stores results in Update.xml.\nIf no SOURCE is given, the CTEST_SOURCE_DIRECTORY variable is used.\nThe RETURN_VALUE option specifies a variable in which to store the\nresult, which is the number of files updated or -1 on error.\n", 
    "separate_arguments": "separate_arguments\n------------------\n\nParse space-separated arguments into a semicolon-separated list.\n\n::\n\n  separate_arguments(<var> <UNIX|WINDOWS>_COMMAND \"<args>\")\n\nParses a unix- or windows-style command-line string \"<args>\" and\nstores a semicolon-separated list of the arguments in <var>.  The\nentire command line must be given in one \"<args>\" argument.\n\nThe UNIX_COMMAND mode separates arguments by unquoted whitespace.  It\nrecognizes both single-quote and double-quote pairs.  A backslash\nescapes the next literal character (\\\" is \"); there are no special\nescapes (\\n is just n).\n\nThe WINDOWS_COMMAND mode parses a windows command-line using the same\nsyntax the runtime library uses to construct argv at startup.  It\nseparates arguments by whitespace that is not double-quoted.\nBackslashes are literal unless they precede double-quotes.  See the\nMSDN article \"Parsing C Command-Line Arguments\" for details.\n\n::\n\n  separate_arguments(VARIABLE)\n\nConvert the value of VARIABLE to a semi-colon separated list.  All\nspaces are replaced with ';'.  This helps with generating command\nlines.\n", 
    "aux_source_directory": "aux_source_directory\n--------------------\n\nFind all source files in a directory.\n\n::\n\n  aux_source_directory(<dir> <variable>)\n\nCollects the names of all the source files in the specified directory\nand stores the list in the <variable> provided.  This command is\nintended to be used by projects that use explicit template\ninstantiation.  Template instantiation files can be stored in a\n\"Templates\" subdirectory and collected automatically using this\ncommand to avoid manually listing all instantiations.\n\nIt is tempting to use this command to avoid writing the list of source\nfiles for a library or executable target.  While this seems to work,\nthere is no way for CMake to generate a build system that knows when a\nnew source file has been added.  Normally the generated build system\nknows when it needs to rerun CMake because the CMakeLists.txt file is\nmodified to add a new source.  When the source is just added to the\ndirectory without modifying this file, one would have to manually\nrerun CMake to generate a build system incorporating the new file.\n", 
    "get_property": "get_property\n------------\n\nGet a property.\n\n::\n\n  get_property(<variable>\n               <GLOBAL             |\n                DIRECTORY [dir]    |\n                TARGET    <target> |\n                SOURCE    <source> |\n                TEST      <test>   |\n                CACHE     <entry>  |\n                VARIABLE>\n               PROPERTY <name>\n               [SET | DEFINED | BRIEF_DOCS | FULL_DOCS])\n\nGet one property from one object in a scope.  The first argument\nspecifies the variable in which to store the result.  The second\nargument determines the scope from which to get the property.  It must\nbe one of the following:\n\nGLOBAL scope is unique and does not accept a name.\n\nDIRECTORY scope defaults to the current directory but another\ndirectory (already processed by CMake) may be named by full or\nrelative path.\n\nTARGET scope must name one existing target.\n\nSOURCE scope must name one source file.\n\nTEST scope must name one existing test.\n\nCACHE scope must name one cache entry.\n\nVARIABLE scope is unique and does not accept a name.\n\nThe required PROPERTY option is immediately followed by the name of\nthe property to get.  If the property is not set an empty value is\nreturned.  If the SET option is given the variable is set to a boolean\nvalue indicating whether the property has been set.  If the DEFINED\noption is given the variable is set to a boolean value indicating\nwhether the property has been defined such as with define_property.\nIf BRIEF_DOCS or FULL_DOCS is given then the variable is set to a\nstring containing documentation for the requested property.  If\ndocumentation is requested for a property that has not been defined\nNOTFOUND is returned.\n", 
    "load_cache": "load_cache\n----------\n\nLoad in the values from another project's CMake cache.\n\n::\n\n  load_cache(pathToCacheFile READ_WITH_PREFIX\n             prefix entry1...)\n\nRead the cache and store the requested entries in variables with their\nname prefixed with the given prefix.  This only reads the values, and\ndoes not create entries in the local project's cache.\n\n::\n\n  load_cache(pathToCacheFile [EXCLUDE entry1...]\n             [INCLUDE_INTERNALS entry1...])\n\nLoad in the values from another cache and store them in the local\nproject's cache as internal entries.  This is useful for a project\nthat depends on another project built in a different tree.  EXCLUDE\noption can be used to provide a list of entries to be excluded.\nINCLUDE_INTERNALS can be used to provide a list of internal entries to\nbe included.  Normally, no internal entries are brought in.  Use of\nthis form of the command is strongly discouraged, but it is provided\nfor backward compatibility.\n", 
    "add_dependencies": "add_dependencies\n----------------\n\nAdd a dependency between top-level targets.\n\n::\n\n  add_dependencies(<target> [<target-dependency>]...)\n\nMake a top-level <target> depend on other top-level targets to ensure\nthat they build before <target> does.  A top-level target is one\ncreated by ADD_EXECUTABLE, ADD_LIBRARY, or ADD_CUSTOM_TARGET.\nDependencies added to an IMPORTED target are followed transitively in\nits place since the target itself does not build.\n\nSee the DEPENDS option of ADD_CUSTOM_TARGET and ADD_CUSTOM_COMMAND for\nadding file-level dependencies in custom rules.  See the\nOBJECT_DEPENDS option in SET_SOURCE_FILES_PROPERTIES to add file-level\ndependencies to object files.\n", 
    "variable_requires": "variable_requires\n-----------------\n\nDisallowed.  See CMake Policy :policy:`CMP0035`.\n\nUse the if() command instead.\n\nAssert satisfaction of an option's required variables.\n\n::\n\n  variable_requires(TEST_VARIABLE RESULT_VARIABLE\n                    REQUIRED_VARIABLE1\n                    REQUIRED_VARIABLE2 ...)\n\nThe first argument (TEST_VARIABLE) is the name of the variable to be\ntested, if that variable is false nothing else is done.  If\nTEST_VARIABLE is true, then the next argument (RESULT_VARIABLE) is a\nvariable that is set to true if all the required variables are set.\nThe rest of the arguments are variables that must be true or not set\nto NOTFOUND to avoid an error.  If any are not true, an error is\nreported.\n", 
    "install_programs": "install_programs\n----------------\n\nDeprecated. Use the install(PROGRAMS ) command instead.\n\nThis command has been superceded by the install command.  It is\nprovided for compatibility with older CMake code.  The FILES form is\ndirectly replaced by the PROGRAMS form of the INSTALL command.  The\nregexp form can be expressed more clearly using the GLOB form of the\nFILE command.\n\n::\n\n  install_programs(<dir> file1 file2 [file3 ...])\n  install_programs(<dir> FILES file1 [file2 ...])\n\nCreate rules to install the listed programs into the given directory.\nUse the FILES argument to guarantee that the file list version of the\ncommand will be used even when there is only one argument.\n\n::\n\n  install_programs(<dir> regexp)\n\nIn the second form any program in the current source directory that\nmatches the regular expression will be installed.\n\nThis command is intended to install programs that are not built by\ncmake, such as shell scripts.  See the TARGETS form of the INSTALL\ncommand to create installation rules for targets built by cmake.\n\nThe directory <dir> is relative to the installation prefix, which is\nstored in the variable CMAKE_INSTALL_PREFIX.\n", 
    "ctest_test": "ctest_test\n----------\n\nRun tests in the project build tree.\n\n::\n\n  ctest_test([BUILD build_dir] [APPEND]\n             [START start number] [END end number]\n             [STRIDE stride number] [EXCLUDE exclude regex ]\n             [INCLUDE include regex] [RETURN_VALUE res]\n             [EXCLUDE_LABEL exclude regex]\n             [INCLUDE_LABEL label regex]\n             [PARALLEL_LEVEL level]\n             [SCHEDULE_RANDOM on]\n             [STOP_TIME time of day])\n\nTests the given build directory and stores results in Test.xml.  The\nsecond argument is a variable that will hold value.  Optionally, you\ncan specify the starting test number START, the ending test number\nEND, the number of tests to skip between each test STRIDE, a regular\nexpression for tests to run INCLUDE, or a regular expression for tests\nto not run EXCLUDE.  EXCLUDE_LABEL and INCLUDE_LABEL are regular\nexpression for test to be included or excluded by the test property\nLABEL.  PARALLEL_LEVEL should be set to a positive number representing\nthe number of tests to be run in parallel.  SCHEDULE_RANDOM will\nlaunch tests in a random order, and is typically used to detect\nimplicit test dependencies.  STOP_TIME is the time of day at which the\ntests should all stop running.\n\nThe APPEND option marks results for append to those previously\nsubmitted to a dashboard server since the last ctest_start.  Append\nsemantics are defined by the dashboard server in use.\n", 
    "try_run": "try_run\n-------\n\nTry compiling and then running some code.\n\n::\n\n  try_run(RUN_RESULT_VAR COMPILE_RESULT_VAR\n          bindir srcfile [CMAKE_FLAGS <Flags>]\n          [COMPILE_DEFINITIONS <flags>]\n          [COMPILE_OUTPUT_VARIABLE comp]\n          [RUN_OUTPUT_VARIABLE run]\n          [OUTPUT_VARIABLE var]\n          [ARGS <arg1> <arg2>...])\n\nTry compiling a srcfile.  Return TRUE or FALSE for success or failure\nin COMPILE_RESULT_VAR.  Then if the compile succeeded, run the\nexecutable and return its exit code in RUN_RESULT_VAR.  If the\nexecutable was built, but failed to run, then RUN_RESULT_VAR will be\nset to FAILED_TO_RUN.  COMPILE_OUTPUT_VARIABLE specifies the variable\nwhere the output from the compile step goes.  RUN_OUTPUT_VARIABLE\nspecifies the variable where the output from the running executable\ngoes.\n\nFor compatibility reasons OUTPUT_VARIABLE is still supported, which\ngives you the output from the compile and run step combined.\n\nCross compiling issues\n\nWhen cross compiling, the executable compiled in the first step\nusually cannot be run on the build host.  try_run() checks the\nCMAKE_CROSSCOMPILING variable to detect whether CMake is in\ncrosscompiling mode.  If that's the case, it will still try to compile\nthe executable, but it will not try to run the executable.  Instead it\nwill create cache variables which must be filled by the user or by\npresetting them in some CMake script file to the values the executable\nwould have produced if it had been run on its actual target platform.\nThese variables are RUN_RESULT_VAR (explanation see above) and if\nRUN_OUTPUT_VARIABLE (or OUTPUT_VARIABLE) was used, an additional cache\nvariable RUN_RESULT_VAR__COMPILE_RESULT_VAR__TRYRUN_OUTPUT.This is\nintended to hold stdout and stderr from the executable.\n\nIn order to make cross compiling your project easier, use try_run only\nif really required.  If you use try_run, use RUN_OUTPUT_VARIABLE (or\nOUTPUT_VARIABLE) only if really required.  Using them will require\nthat when crosscompiling, the cache variables will have to be set\nmanually to the output of the executable.  You can also \"guard\" the\ncalls to try_run with if(CMAKE_CROSSCOMPILING) and provide an\neasy-to-preset alternative for this case.\n\nSet variable CMAKE_TRY_COMPILE_CONFIGURATION to choose a build\nconfiguration.\n", 
    "message": "message\n-------\n\nDisplay a message to the user.\n\n::\n\n  message([<mode>] \"message to display\" ...)\n\nThe optional <mode> keyword determines the type of message:\n\n::\n\n  (none)         = Important information\n  STATUS         = Incidental information\n  WARNING        = CMake Warning, continue processing\n  AUTHOR_WARNING = CMake Warning (dev), continue processing\n  SEND_ERROR     = CMake Error, continue processing,\n                                but skip generation\n  FATAL_ERROR    = CMake Error, stop processing and generation\n  DEPRECATION    = CMake Deprecation Error or Warning if variable\n                   CMAKE_ERROR_DEPRECATED or CMAKE_WARN_DEPRECATED\n                   is enabled, respectively, else no message.\n\nThe CMake command-line tool displays STATUS messages on stdout and all\nother message types on stderr.  The CMake GUI displays all messages in\nits log area.  The interactive dialogs (ccmake and CMakeSetup) show\nSTATUS messages one at a time on a status line and other messages in\ninteractive pop-up boxes.\n\nCMake Warning and Error message text displays using a simple markup\nlanguage.  Non-indented text is formatted in line-wrapped paragraphs\ndelimited by newlines.  Indented text is considered pre-formatted.\n", 
    "subdir_depends": "subdir_depends\n--------------\n\nDisallowed.  See CMake Policy :policy:`CMP0029`.\n\nDoes nothing.\n\n::\n\n  subdir_depends(subdir dep1 dep2 ...)\n\nDoes not do anything.  This command used to help projects order\nparallel builds correctly.  This functionality is now automatic.\n", 
    "endwhile": "endwhile\n--------\n\nEnds a list of commands in a while block.\n\n::\n\n  endwhile(expression)\n\nSee the while command.\n", 
    "build_command": "build_command\n-------------\n\nGet a command line to build the current project.\nThis is mainly intended for internal use by the :module:`CTest` module.\n\n.. code-block:: cmake\n\n  build_command(<variable>\n                [CONFIGURATION <config>]\n                [TARGET <target>]\n                [PROJECT_NAME <projname>] # legacy, causes warning\n               )\n\nSets the given ``<variable>`` to a command-line string of the form::\n\n <cmake> --build . [--config <config>] [--target <target>] [-- -i]\n\nwhere ``<cmake>`` is the location of the :manual:`cmake(1)` command-line\ntool, and ``<config>`` and ``<target>`` are the values provided to the\n``CONFIGURATION`` and ``TARGET`` options, if any.  The trailing ``-- -i``\noption is added for Makefile generators.\n\nWhen invoked, this ``cmake --build`` command line will launch the\nunderlying build system tool.\n\n.. code-block:: cmake\n\n  build_command(<cachevariable> <makecommand>)\n\nThis second signature is deprecated, but still available for backwards\ncompatibility.  Use the first signature instead.\n\nIt sets the given ``<cachevariable>`` to a command-line string as\nabove but without the ``--config`` or ``--target`` options.\nThe ``<makecommand>`` is ignored but should be the full path to\nmsdev, devenv, nmake, make or one of the end user build tools\nfor legacy invocations.\n\n.. note::\n In CMake versions prior to 3.0 this command returned a command\n line that directly invokes the native build tool for the current\n generator.  Their implementation of the ``PROJECT_NAME`` option\n had no useful effects, so CMake now warns on use of the option.\n", 
    "endforeach": "endforeach\n----------\n\nEnds a list of commands in a FOREACH block.\n\n::\n\n  endforeach(expression)\n\nSee the FOREACH command.\n", 
    "ctest_memcheck": "ctest_memcheck\n--------------\n\nRun tests with a dynamic analysis tool.\n\n::\n\n  ctest_memcheck([BUILD build_dir] [RETURN_VALUE res] [APPEND]\n             [START start number] [END end number]\n             [STRIDE stride number] [EXCLUDE exclude regex ]\n             [INCLUDE include regex]\n             [EXCLUDE_LABEL exclude regex]\n             [INCLUDE_LABEL label regex]\n             [PARALLEL_LEVEL level] )\n\nTests the given build directory and stores results in MemCheck.xml.\nThe second argument is a variable that will hold value.  Optionally,\nyou can specify the starting test number START, the ending test number\nEND, the number of tests to skip between each test STRIDE, a regular\nexpression for tests to run INCLUDE, or a regular expression for tests\nnot to run EXCLUDE.  EXCLUDE_LABEL and INCLUDE_LABEL are regular\nexpressions for tests to be included or excluded by the test property\nLABEL.  PARALLEL_LEVEL should be set to a positive number representing\nthe number of tests to be run in parallel.\n\nThe APPEND option marks results for append to those previously\nsubmitted to a dashboard server since the last ctest_start.  Append\nsemantics are defined by the dashboard server in use.\n", 
    "get_cmake_property": "get_cmake_property\n------------------\n\nGet a property of the CMake instance.\n\n::\n\n  get_cmake_property(VAR property)\n\nGet a property from the CMake instance.  The value of the property is\nstored in the variable VAR.  If the property is not found, VAR will be\nset to \"NOTFOUND\".  Some supported properties include: VARIABLES,\nCACHE_VARIABLES, COMMANDS, MACROS, and COMPONENTS.\n\nSee also the more general get_property() command.\n", 
    "function": "function\n--------\n\nStart recording a function for later invocation as a command.\n\n::\n\n  function(<name> [arg1 [arg2 [arg3 ...]]])\n    COMMAND1(ARGS ...)\n    COMMAND2(ARGS ...)\n    ...\n  endfunction(<name>)\n\nDefine a function named <name> that takes arguments named arg1 arg2\narg3 (...).  Commands listed after function, but before the matching\nendfunction, are not invoked until the function is invoked.  When it\nis invoked, the commands recorded in the function are first modified\nby replacing formal parameters (${arg1}) with the arguments passed,\nand then invoked as normal commands.  In addition to referencing the\nformal parameters you can reference the variable ARGC which will be\nset to the number of arguments passed into the function as well as\nARGV0 ARGV1 ARGV2 ...  which will have the actual values of the\narguments passed in.  This facilitates creating functions with\noptional arguments.  Additionally ARGV holds the list of all arguments\ngiven to the function and ARGN holds the list of arguments past the\nlast expected argument.\n\nA function opens a new scope: see set(var PARENT_SCOPE) for details.\n\nSee the cmake_policy() command documentation for the behavior of\npolicies inside functions.\n", 
    "get_test_property": "get_test_property\n-----------------\n\nGet a property of the test.\n\n::\n\n  get_test_property(test property VAR)\n\nGet a property from the Test.  The value of the property is stored in\nthe variable VAR.  If the property is not found, VAR will be set to\n\"NOTFOUND\".  For a list of standard properties you can type cmake\n--help-property-list\n\nSee also the more general get_property() command.\n", 
    "option": "option\n------\n\nProvides an option that the user can optionally select.\n\n::\n\n  option(<option_variable> \"help string describing option\"\n         [initial value])\n\nProvide an option for the user to select as ON or OFF.  If no initial\nvalue is provided, OFF is used.\n\nIf you have options that depend on the values of other options, see\nthe module help for CMakeDependentOption.\n", 
    "link_directories": "link_directories\n----------------\n\nSpecify directories in which the linker will look for libraries.\n\n::\n\n  link_directories(directory1 directory2 ...)\n\nSpecify the paths in which the linker should search for libraries.\nThe command will apply only to targets created after it is called.\nRelative paths given to this command are interpreted as relative to\nthe current source directory, see CMP0015.\n\nNote that this command is rarely necessary.  Library locations\nreturned by find_package() and find_library() are absolute paths.\nPass these absolute library file paths directly to the\ntarget_link_libraries() command.  CMake will ensure the linker finds\nthem.\n", 
    "else": "else\n----\n\nStarts the else portion of an if block.\n\n::\n\n  else(expression)\n\nSee the if command.\n", 
    "build_name": "build_name\n----------\n\nDisallowed.  See CMake Policy :policy:`CMP0036`.\n\nUse ${CMAKE_SYSTEM} and ${CMAKE_CXX_COMPILER} instead.\n\n::\n\n  build_name(variable)\n\nSets the specified variable to a string representing the platform and\ncompiler settings.  These values are now available through the\nCMAKE_SYSTEM and CMAKE_CXX_COMPILER variables.\n", 
    "fltk_wrap_ui": "fltk_wrap_ui\n------------\n\nCreate FLTK user interfaces Wrappers.\n\n::\n\n  fltk_wrap_ui(resultingLibraryName source1\n               source2 ... sourceN )\n\nProduce .h and .cxx files for all the .fl and .fld files listed.  The\nresulting .h and .cxx files will be added to a variable named\nresultingLibraryName_FLTK_UI_SRCS which should be added to your\nlibrary.\n", 
    "source_group": "source_group\n------------\n\nDefine a grouping for source files in IDE project generation.\n\n.. code-block:: cmake\n\n  source_group(<name> [FILES <src>...] [REGULAR_EXPRESSION <regex>])\n\nDefines a group into which sources will be placed in project files.\nThis is intended to set up file tabs in Visual Studio.\nThe options are:\n\n``FILES``\n Any source file specified explicitly will be placed in group\n ``<name>``.  Relative paths are interpreted with respect to the\n current source directory.\n\n``REGULAR_EXPRESSION``\n Any source file whose name matches the regular expression will\n be placed in group ``<name>``.\n\nIf a source file matches multiple groups, the *last* group that\nexplicitly lists the file with ``FILES`` will be favored, if any.\nIf no group explicitly lists the file, the *last* group whose\nregular expression matches the file will be favored.\n\nThe ``<name>`` of the group may contain backslashes to specify subgroups:\n\n.. code-block:: cmake\n\n  source_group(outer\\\\inner ...)\n\nFor backwards compatibility, the short-hand signature\n\n.. code-block:: cmake\n\n  source_group(<name> <regex>)\n\nis equivalent to\n\n.. code-block:: cmake\n\n  source_group(<name> REGULAR_EXPRESSION <regex>)\n", 
    "ctest_submit": "ctest_submit\n------------\n\nSubmit results to a dashboard server.\n\n::\n\n  ctest_submit([PARTS ...] [FILES ...] [RETRY_COUNT count]                [RETRY_DELAY delay][RETURN_VALUE res])\n\nBy default all available parts are submitted if no PARTS or FILES are\nspecified.  The PARTS option lists a subset of parts to be submitted.\nValid part names are:\n\n::\n\n  Start      = nothing\n  Update     = ctest_update results, in Update.xml\n  Configure  = ctest_configure results, in Configure.xml\n  Build      = ctest_build results, in Build.xml\n  Test       = ctest_test results, in Test.xml\n  Coverage   = ctest_coverage results, in Coverage.xml\n  MemCheck   = ctest_memcheck results, in DynamicAnalysis.xml\n  Notes      = Files listed by CTEST_NOTES_FILES, in Notes.xml\n  ExtraFiles = Files listed by CTEST_EXTRA_SUBMIT_FILES\n  Upload     = Files prepared for upload by ctest_upload(), in Upload.xml\n  Submit     = nothing\n\nThe FILES option explicitly lists specific files to be submitted.\nEach individual file must exist at the time of the call.\n\nThe RETRY_DELAY option specifies how long in seconds to wait after a\ntimed-out submission before attempting to re-submit.\n\nThe RETRY_COUNT option specifies how many times to retry a timed-out\nsubmission.\n", 
    "target_compile_definitions": "target_compile_definitions\n--------------------------\n\nAdd compile definitions to a target.\n\n::\n\n  target_compile_definitions(<target>\n    <INTERFACE|PUBLIC|PRIVATE> [items1...]\n    [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\n\nSpecify compile definitions to use when compiling a given <target.  The\nnamed ``<target>`` must have been created by a command such as\n:command:`add_executable` or :command:`add_library` and must not be an\n:ref:`Imported Target <Imported Targets>`.\n\nThe ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to\nspecify the scope of the following arguments.  ``PRIVATE`` and ``PUBLIC``\nitems will populate the :prop_tgt:`COMPILE_DEFINITIONS` property of\n``<target>``. ``PUBLIC`` and ``INTERFACE`` items will populate the\n:prop_tgt:`INTERFACE_COMPILE_DEFINITIONS` property of ``<target>``.  The\nfollowing arguments specify compile definitions.  Repeated calls for the\nsame ``<target>`` append items in the order called.\n\nArguments to ``target_compile_definitions`` may use \"generator expressions\"\nwith the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`\nmanual for available expressions.  See the :manual:`cmake-buildsystem(7)`\nmanual for more on defining buildsystem properties.\n", 
    "add_library": "add_library\n-----------\n\nAdd a library to the project using the specified source files.\n\n::\n\n  add_library(<name> [STATIC | SHARED | MODULE]\n              [EXCLUDE_FROM_ALL]\n              source1 [source2 ...])\n\nAdds a library target called ``<name>`` to be built from the source files\nlisted in the command invocation.  The ``<name>`` corresponds to the\nlogical target name and must be globally unique within a project.  The\nactual file name of the library built is constructed based on\nconventions of the native platform (such as ``lib<name>.a`` or\n``<name>.lib``).\n\n``STATIC``, ``SHARED``, or ``MODULE`` may be given to specify the type of\nlibrary to be created.  ``STATIC`` libraries are archives of object files\nfor use when linking other targets.  ``SHARED`` libraries are linked\ndynamically and loaded at runtime.  ``MODULE`` libraries are plugins that\nare not linked into other targets but may be loaded dynamically at runtime\nusing dlopen-like functionality.  If no type is given explicitly the\ntype is ``STATIC`` or ``SHARED`` based on whether the current value of the\nvariable :variable:`BUILD_SHARED_LIBS` is ``ON``.  For ``SHARED`` and\n``MODULE`` libraries the :prop_tgt:`POSITION_INDEPENDENT_CODE` target\nproperty is set to ``ON`` automatically.\n\nBy default the library file will be created in the build tree directory\ncorresponding to the source tree directory in which thecommand was\ninvoked.  See documentation of the :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY`,\n:prop_tgt:`LIBRARY_OUTPUT_DIRECTORY`, and\n:prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` target properties to change this\nlocation.  See documentation of the :prop_tgt:`OUTPUT_NAME` target\nproperty to change the ``<name>`` part of the final file name.\n\nIf ``EXCLUDE_FROM_ALL`` is given the corresponding property will be set on\nthe created target.  See documentation of the :prop_tgt:`EXCLUDE_FROM_ALL`\ntarget property for details.\n\nSee the :manual:`cmake-buildsystem(7)` manual for more on defining buildsystem\nproperties.\n\n--------------------------------------------------------------------------\n\n::\n\n  add_library(<name> <SHARED|STATIC|MODULE|UNKNOWN> IMPORTED\n              [GLOBAL])\n\nAn :ref:`IMPORTED library target <Imported Targets>` references a library\nfile located outside the project.  No rules are generated to build it, and\nthe :prop_tgt:`IMPORTED` target property is ``True``.  The target name has\nscope in the directory in which it is created and below, but the ``GLOBAL``\noption extends visibility.  It may be referenced like any target built\nwithin the project.  ``IMPORTED`` libraries are useful for convenient\nreference from commands like :command:`target_link_libraries`.  Details\nabout the imported library are specified by setting properties whose names\nbegin in ``IMPORTED_`` and ``INTERFACE_``.  The most important such\nproperty is :prop_tgt:`IMPORTED_LOCATION` (and its per-configuration\nvariant :prop_tgt:`IMPORTED_LOCATION_<CONFIG>`) which specifies the\nlocation of the main library file on disk.  See documentation of the\n``IMPORTED_*`` and ``INTERFACE_*`` properties for more information.\n\n--------------------------------------------------------------------------\n\n::\n\n  add_library(<name> OBJECT <src>...)\n\nCreates a special \"object library\" target.  An object library compiles\nsource files but does not archive or link their object files into a\nlibrary.  Instead other targets created by :command:`add_library` or\n:command:`add_executable` may reference the objects using an expression of the\nform ``$<TARGET_OBJECTS:objlib>`` as a source, where ``objlib`` is the\nobject library name.  For example:\n\n.. code-block:: cmake\n\n  add_library(... $<TARGET_OBJECTS:objlib> ...)\n  add_executable(... $<TARGET_OBJECTS:objlib> ...)\n\nwill include objlib's object files in a library and an executable\nalong with those compiled from their own sources.  Object libraries\nmay contain only sources (and headers) that compile to object files.\nThey may contain custom commands generating such sources, but not\n``PRE_BUILD``, ``PRE_LINK``, or ``POST_BUILD`` commands.  Object libraries\ncannot be imported, exported, installed, or linked.  Some native build\nsystems may not like targets that have only object files, so consider\nadding at least one real source file to any target that references\n``$<TARGET_OBJECTS:objlib>``.\n\n--------------------------------------------------------------------------\n\n::\n\n  add_library(<name> ALIAS <target>)\n\nCreates an :ref:`Alias Target <Alias Targets>`, such that ``<name>`` can be\nused to refer to ``<target>`` in subsequent commands.  The ``<name>`` does\nnot appear in the generatedbuildsystem as a make target.  The ``<target>``\nmay not be an :ref:`Imported Target <Imported Targets>` or an ``ALIAS``.\n``ALIAS`` targets can be used as linkable targets and as targets to\nread properties from.  They can also be tested for existance with the\nregular :command:`if(TARGET)` subcommand.  The ``<name>`` may not be used\nto modify properties of ``<target>``, that is, it may not be used as the\noperand of :command:`set_property`, :command:`set_target_properties`,\n:command:`target_link_libraries` etc.  An ``ALIAS`` target may not be\ninstalled or exported.\n\n--------------------------------------------------------------------------\n\n::\n\n  add_library(<name> INTERFACE [IMPORTED [GLOBAL]])\n\nCreates an :ref:`Interface Library <Interface Libraries>`.  An ``INTERFACE``\nlibrary target does not directly create build output, though it may\nhave properties set on it and it may be installed, exported and\nimported. Typically the ``INTERFACE_*`` properties are populated on\nthe interface target using the :command:`set_property`,\n:command:`target_link_libraries(INTERFACE)`,\n:command:`target_include_directories(INTERFACE)`,\n:command:`target_compile_options(INTERFACE)`\nand :command:`target_compile_definitions(INTERFACE)` commands, and then it\nis used as an argument to :command:`target_link_libraries` like any other\ntarget.\n\nAn ``INTERFACE`` :ref:`Imported Target <Imported Targets>` may also be\ncreated with this signature.  An ``IMPORTED`` library target references a\nlibrary defined outside the project.  The target name has scope in the\ndirectory in which it is created and below, but the ``GLOBAL`` option\nextends visibility.  It may be referenced like any target built within\nthe project.  ``IMPORTED`` libraries are useful for convenient reference\nfrom commands like :command:`target_link_libraries`.\n", 
    "target_compile_options": "target_compile_options\n----------------------\n\nAdd compile options to a target.\n\n::\n\n  target_compile_options(<target> [BEFORE]\n    <INTERFACE|PUBLIC|PRIVATE> [items1...]\n    [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\n\nSpecify compile options to use when compiling a given target.  The\nnamed ``<target>`` must have been created by a command such as\n:command:`add_executable` or :command:`add_library` and must not be an\n:prop_tgt:`IMPORTED Target`.  If ``BEFORE`` is specified, the content will\nbe prepended to the property instead of being appended.\n\nThis command can be used to add any options, but\nalternative commands exist to add preprocessor definitions\n(:command:`target_compile_definitions` and :command:`add_definitions`) or\ninclude directories (:command:`target_include_directories` and\n:command:`include_directories`).  See documentation of the\n:prop_tgt:`directory <COMPILE_OPTIONS>` and\n:prop_tgt:` target <COMPILE_OPTIONS>` ``COMPILE_OPTIONS`` properties.\n\nThe ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to\nspecify the scope of the following arguments.  ``PRIVATE`` and ``PUBLIC``\nitems will populate the :prop_tgt:`COMPILE_OPTIONS` property of\n``<target>``.  ``PUBLIC`` and ``INTERFACE`` items will populate the\n:prop_tgt:`INTERFACE_COMPILE_OPTIONS` property of ``<target>``.  The\nfollowing arguments specify compile options.  Repeated calls for the same\n``<target>`` append items in the order called.\n\nArguments to ``target_compile_options`` may use \"generator expressions\"\nwith the syntax ``$<...>``. See the :manual:`cmake-generator-expressions(7)`\nmanual for available expressions.  See the :manual:`cmake-buildsystem(7)`\nmanual for more on defining buildsystem properties.\n", 
    "install_targets": "install_targets\n---------------\n\nDeprecated. Use the install(TARGETS )  command instead.\n\nThis command has been superceded by the install command.  It is\nprovided for compatibility with older CMake code.\n\n::\n\n  install_targets(<dir> [RUNTIME_DIRECTORY dir] target target)\n\nCreate rules to install the listed targets into the given directory.\nThe directory <dir> is relative to the installation prefix, which is\nstored in the variable CMAKE_INSTALL_PREFIX.  If RUNTIME_DIRECTORY is\nspecified, then on systems with special runtime files (Windows DLL),\nthe files will be copied to that directory.\n", 
    "while": "while\n-----\n\nEvaluate a group of commands while a condition is true\n\n::\n\n  while(condition)\n    COMMAND1(ARGS ...)\n    COMMAND2(ARGS ...)\n    ...\n  endwhile(condition)\n\nAll commands between while and the matching endwhile are recorded\nwithout being invoked.  Once the endwhile is evaluated, the recorded\nlist of commands is invoked as long as the condition is true.  The\ncondition is evaluated using the same logic as the if command.\n", 
    "configure_file": "configure_file\n--------------\n\nCopy a file to another location and modify its contents.\n\n::\n\n  configure_file(<input> <output>\n                 [COPYONLY] [ESCAPE_QUOTES] [@ONLY]\n                 [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])\n\nCopies a file <input> to file <output> and substitutes variable values\nreferenced in the file content.  If <input> is a relative path it is\nevaluated with respect to the current source directory.  The <input>\nmust be a file, not a directory.  If <output> is a relative path it is\nevaluated with respect to the current binary directory.  If <output>\nnames an existing directory the input file is placed in that directory\nwith its original name.\n\nIf the <input> file is modified the build system will re-run CMake to\nre-configure the file and generate the build system again.\n\nThis command replaces any variables in the input file referenced as\n${VAR} or @VAR@ with their values as determined by CMake.  If a\nvariable is not defined, it will be replaced with nothing.  If\nCOPYONLY is specified, then no variable expansion will take place.  If\nESCAPE_QUOTES is specified then any substituted quotes will be C-style\nescaped.  The file will be configured with the current values of CMake\nvariables.  If @ONLY is specified, only variables of the form @VAR@\nwill be replaced and ${VAR} will be ignored.  This is useful for\nconfiguring scripts that use ${VAR}.\n\nInput file lines of the form \"#cmakedefine VAR ...\" will be replaced\nwith either \"#define VAR ...\" or ``/* #undef VAR */`` depending on\nwhether VAR is set in CMake to any value not considered a false\nconstant by the if() command.  (Content of \"...\", if any, is processed\nas above.) Input file lines of the form \"#cmakedefine01 VAR\" will be\nreplaced with either \"#define VAR 1\" or \"#define VAR 0\" similarly.\n\nWith NEWLINE_STYLE the line ending could be adjusted:\n\n::\n\n    'UNIX' or 'LF' for \\n, 'DOS', 'WIN32' or 'CRLF' for \\r\\n.\n\nCOPYONLY must not be used with NEWLINE_STYLE.\n", 
    "install": "install\n-------\n\nSpecify rules to run at install time.\n\nThis command generates installation rules for a project.  Rules\nspecified by calls to this command within a source directory are\nexecuted in order during installation.  The order across directories\nis not defined.\n\nThere are multiple signatures for this command.  Some of them define\ninstallation options for files and targets.  Options common to\nmultiple signatures are covered here but they are valid only for\nsignatures that specify them.  The common options are:\n\n``DESTINATION``\n  Specify the directory on disk to which a file will be installed.\n  If a full path (with a leading slash or drive letter) is given\n  it is used directly.  If a relative path is given it is interpreted\n  relative to the value of the :variable:`CMAKE_INSTALL_PREFIX` variable.\n  The prefix can be relocated at install time using the ``DESTDIR``\n  mechanism explained in the :variable:`CMAKE_INSTALL_PREFIX` variable\n  documentation.\n\n``PERMISSIONS``\n  Specify permissions for installed files.  Valid permissions are\n  ``OWNER_READ``, ``OWNER_WRITE``, ``OWNER_EXECUTE``, ``GROUP_READ``,\n  ``GROUP_WRITE``, ``GROUP_EXECUTE``, ``WORLD_READ``, ``WORLD_WRITE``,\n  ``WORLD_EXECUTE``, ``SETUID``, and ``SETGID``.  Permissions that do\n  not make sense on certain platforms are ignored on those platforms.\n\n``CONFIGURATIONS``\n  Specify a list of build configurations for which the install rule\n  applies (Debug, Release, etc.).\n\n``COMPONENT``\n  Specify an installation component name with which the install rule\n  is associated, such as \"runtime\" or \"development\".  During\n  component-specific installation only install rules associated with\n  the given component name will be executed.  During a full installation\n  all components are installed.  If ``COMPONENT`` is not provided a\n  default component \"Unspecified\" is created.  The default component\n  name may be controlled with the\n  :variable:`CMAKE_INSTALL_DEFAULT_COMPONENT_NAME` variable.\n\n``RENAME``\n  Specify a name for an installed file that may be different from the\n  original file.  Renaming is allowed only when a single file is\n  installed by the command.\n\n``OPTIONAL``\n  Specify that it is not an error if the file to be installed does\n  not exist.\n\n------------------------------------------------------------------------------\n\n::\n\n  install(TARGETS targets... [EXPORT <export-name>]\n          [[ARCHIVE|LIBRARY|RUNTIME|FRAMEWORK|BUNDLE|\n            PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]\n           [DESTINATION <dir>]\n           [INCLUDES DESTINATION [<dir> ...]]\n           [PERMISSIONS permissions...]\n           [CONFIGURATIONS [Debug|Release|...]]\n           [COMPONENT <component>]\n           [OPTIONAL] [NAMELINK_ONLY|NAMELINK_SKIP]\n          ] [...])\n\nThe ``TARGETS`` form specifies rules for installing targets from a\nproject.  There are five kinds of target files that may be installed:\n``ARCHIVE``, ``LIBRARY``, ``RUNTIME``, ``FRAMEWORK``, and ``BUNDLE``.\nExecutables are treated as ``RUNTIME`` targets, except that those\nmarked with the ``MACOSX_BUNDLE`` property are treated as ``BUNDLE``\ntargets on OS X.  Static libraries are always treated as ``ARCHIVE``\ntargets.  Module libraries are always treated as ``LIBRARY`` targets.\nFor non-DLL platforms shared libraries are treated as ``LIBRARY``\ntargets, except that those marked with the ``FRAMEWORK`` property are\ntreated as ``FRAMEWORK`` targets on OS X.  For DLL platforms the DLL\npart of a shared library is treated as a ``RUNTIME`` target and the\ncorresponding import library is treated as an ``ARCHIVE`` target.\nAll Windows-based systems including Cygwin are DLL platforms.\nThe ``ARCHIVE``, ``LIBRARY``, ``RUNTIME``, and ``FRAMEWORK`` arguments\nchange the type of target to which the subsequent properties apply.\nIf none is given the installation properties apply to all target\ntypes.  If only one is given then only targets of that type will be\ninstalled (which can be used to install just a DLL or just an import\nlibrary).  The ``INCLUDES DESTINATION`` specifies a list of directories\nwhich will be added to the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`\ntarget property of the ``<targets>`` when exported by the\n:command:`install(EXPORT)` command.  If a relative path is\nspecified, it is treated as relative to the ``$<INSTALL_PREFIX>``.\n\nThe ``PRIVATE_HEADER``, ``PUBLIC_HEADER``, and ``RESOURCE`` arguments\ncause subsequent properties to be applied to installing a ``FRAMEWORK``\nshared library target's associated files on non-Apple platforms.  Rules\ndefined by these arguments are ignored on Apple platforms because the\nassociated files are installed into the appropriate locations inside\nthe framework folder.  See documentation of the\n:prop_tgt:`PRIVATE_HEADER`, :prop_tgt:`PUBLIC_HEADER`, and\n:prop_tgt:`RESOURCE` target properties for details.\n\nEither ``NAMELINK_ONLY`` or ``NAMELINK_SKIP`` may be specified as a\n``LIBRARY`` option.  On some platforms a versioned shared library\nhas a symbolic link such as::\n\n  lib<name>.so -> lib<name>.so.1\n\nwhere ``lib<name>.so.1`` is the soname of the library and ``lib<name>.so``\nis a \"namelink\" allowing linkers to find the library when given\n``-l<name>``.  The ``NAMELINK_ONLY`` option causes installation of only the\nnamelink when a library target is installed.  The ``NAMELINK_SKIP`` option\ncauses installation of library files other than the namelink when a\nlibrary target is installed.  When neither option is given both\nportions are installed.  On platforms where versioned shared libraries\ndo not have namelinks or when a library is not versioned the\n``NAMELINK_SKIP`` option installs the library and the ``NAMELINK_ONLY``\noption installs nothing.  See the :prop_tgt:`VERSION` and\n:prop_tgt:`SOVERSION` target properties for details on creating versioned\nshared libraries.\n\nOne or more groups of properties may be specified in a single call to\nthe ``TARGETS`` form of this command.  A target may be installed more than\nonce to different locations.  Consider hypothetical targets ``myExe``,\n``mySharedLib``, and ``myStaticLib``.  The code:\n\n.. code-block:: cmake\n\n  install(TARGETS myExe mySharedLib myStaticLib\n          RUNTIME DESTINATION bin\n          LIBRARY DESTINATION lib\n          ARCHIVE DESTINATION lib/static)\n  install(TARGETS mySharedLib DESTINATION /some/full/path)\n\nwill install ``myExe`` to ``<prefix>/bin`` and ``myStaticLib`` to\n``<prefix>/lib/static``.  On non-DLL platforms ``mySharedLib`` will be\ninstalled to ``<prefix>/lib`` and ``/some/full/path``.  On DLL platforms\nthe ``mySharedLib`` DLL will be installed to ``<prefix>/bin`` and\n``/some/full/path`` and its import library will be installed to\n``<prefix>/lib/static`` and ``/some/full/path``.\n\nThe ``EXPORT`` option associates the installed target files with an\nexport called ``<export-name>``.  It must appear before any ``RUNTIME``,\n``LIBRARY``, or ``ARCHIVE`` options.  To actually install the export\nfile itself, call ``install(EXPORT)``, documented below.\n\nInstalling a target with the :prop_tgt:`EXCLUDE_FROM_ALL` target property\nset to ``TRUE`` has undefined behavior.\n\n------------------------------------------------------------------------------\n\n::\n\n  install(<FILES|PROGRAMS> files... DESTINATION <dir>\n          [PERMISSIONS permissions...]\n          [CONFIGURATIONS [Debug|Release|...]]\n          [COMPONENT <component>]\n          [RENAME <name>] [OPTIONAL])\n\nThe ``FILES`` form specifies rules for installing files for a project.\nFile names given as relative paths are interpreted with respect to the\ncurrent source directory.  Files installed by this form are by default\ngiven permissions ``OWNER_WRITE``, ``OWNER_READ``, ``GROUP_READ``, and\n``WORLD_READ`` if no ``PERMISSIONS`` argument is given.\n\nThe ``PROGRAMS`` form is identical to the ``FILES`` form except that the\ndefault permissions for the installed file also include ``OWNER_EXECUTE``,\n``GROUP_EXECUTE``, and ``WORLD_EXECUTE``.  This form is intended to install\nprograms that are not targets, such as shell scripts.  Use the ``TARGETS``\nform to install targets built within the project.\n\nThe list of ``files...`` given to ``FILES`` or ``PROGRAMS`` may use\n\"generator expressions\" with the syntax ``$<...>``.  See the\n:manual:`cmake-generator-expressions(7)` manual for available expressions.\nHowever, if any item begins in a generator expression it must evaluate\nto a full path.\n\n------------------------------------------------------------------------------\n\n::\n\n  install(DIRECTORY dirs... DESTINATION <dir>\n          [FILE_PERMISSIONS permissions...]\n          [DIRECTORY_PERMISSIONS permissions...]\n          [USE_SOURCE_PERMISSIONS] [OPTIONAL]\n          [CONFIGURATIONS [Debug|Release|...]]\n          [COMPONENT <component>] [FILES_MATCHING]\n          [[PATTERN <pattern> | REGEX <regex>]\n           [EXCLUDE] [PERMISSIONS permissions...]] [...])\n\nThe ``DIRECTORY`` form installs contents of one or more directories to a\ngiven destination.  The directory structure is copied verbatim to the\ndestination.  The last component of each directory name is appended to\nthe destination directory but a trailing slash may be used to avoid\nthis because it leaves the last component empty.  Directory names\ngiven as relative paths are interpreted with respect to the current\nsource directory.  If no input directory names are given the\ndestination directory will be created but nothing will be installed\ninto it.  The ``FILE_PERMISSIONS`` and ``DIRECTORY_PERMISSIONS`` options\nspecify permissions given to files and directories in the destination.\nIf ``USE_SOURCE_PERMISSIONS`` is specified and ``FILE_PERMISSIONS`` is not,\nfile permissions will be copied from the source directory structure.\nIf no permissions are specified files will be given the default\npermissions specified in the ``FILES`` form of the command, and the\ndirectories will be given the default permissions specified in the\n``PROGRAMS`` form of the command.\n\nInstallation of directories may be controlled with fine granularity\nusing the ``PATTERN`` or ``REGEX`` options.  These \"match\" options specify a\nglobbing pattern or regular expression to match directories or files\nencountered within input directories.  They may be used to apply\ncertain options (see below) to a subset of the files and directories\nencountered.  The full path to each input file or directory (with\nforward slashes) is matched against the expression.  A ``PATTERN`` will\nmatch only complete file names: the portion of the full path matching\nthe pattern must occur at the end of the file name and be preceded by\na slash.  A ``REGEX`` will match any portion of the full path but it may\nuse ``/`` and ``$`` to simulate the ``PATTERN`` behavior.  By default all\nfiles and directories are installed whether or not they are matched.\nThe ``FILES_MATCHING`` option may be given before the first match option\nto disable installation of files (but not directories) not matched by\nany expression.  For example, the code\n\n.. code-block:: cmake\n\n  install(DIRECTORY src/ DESTINATION include/myproj\n          FILES_MATCHING PATTERN \"*.h\")\n\nwill extract and install header files from a source tree.\n\nSome options may follow a ``PATTERN`` or ``REGEX`` expression and are applied\nonly to files or directories matching them.  The ``EXCLUDE`` option will\nskip the matched file or directory.  The ``PERMISSIONS`` option overrides\nthe permissions setting for the matched file or directory.  For\nexample the code\n\n.. code-block:: cmake\n\n  install(DIRECTORY icons scripts/ DESTINATION share/myproj\n          PATTERN \"CVS\" EXCLUDE\n          PATTERN \"scripts/*\"\n          PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ\n                      GROUP_EXECUTE GROUP_READ)\n\nwill install the ``icons`` directory to ``share/myproj/icons`` and the\n``scripts`` directory to ``share/myproj``.  The icons will get default\nfile permissions, the scripts will be given specific permissions, and any\n``CVS`` directories will be excluded.\n\n------------------------------------------------------------------------------\n\n::\n\n  install([[SCRIPT <file>] [CODE <code>]] [...])\n\nThe ``SCRIPT`` form will invoke the given CMake script files during\ninstallation.  If the script file name is a relative path it will be\ninterpreted with respect to the current source directory.  The ``CODE``\nform will invoke the given CMake code during installation.  Code is\nspecified as a single argument inside a double-quoted string.  For\nexample, the code\n\n.. code-block:: cmake\n\n  install(CODE \"MESSAGE(\\\"Sample install message.\\\")\")\n\nwill print a message during installation.\n\n------------------------------------------------------------------------------\n\n::\n\n  install(EXPORT <export-name> DESTINATION <dir>\n          [NAMESPACE <namespace>] [FILE <name>.cmake]\n          [PERMISSIONS permissions...]\n          [CONFIGURATIONS [Debug|Release|...]]\n          [EXPORT_LINK_INTERFACE_LIBRARIES]\n          [COMPONENT <component>])\n\nThe ``EXPORT`` form generates and installs a CMake file containing code to\nimport targets from the installation tree into another project.\nTarget installations are associated with the export ``<export-name>``\nusing the ``EXPORT`` option of the ``install(TARGETS)`` signature\ndocumented above.  The ``NAMESPACE`` option will prepend ``<namespace>`` to\nthe target names as they are written to the import file.  By default\nthe generated file will be called ``<export-name>.cmake`` but the ``FILE``\noption may be used to specify a different name.  The value given to\nthe ``FILE`` option must be a file name with the ``.cmake`` extension.\nIf a ``CONFIGURATIONS`` option is given then the file will only be installed\nwhen one of the named configurations is installed.  Additionally, the\ngenerated import file will reference only the matching target\nconfigurations.  The ``EXPORT_LINK_INTERFACE_LIBRARIES`` keyword, if\npresent, causes the contents of the properties matching\n``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?`` to be exported, when\npolicy :policy:`CMP0022` is ``NEW``.  If a ``COMPONENT`` option is\nspecified that does not match that given to the targets associated with\n``<export-name>`` the behavior is undefined.  If a library target is\nincluded in the export but a target to which it links is not included\nthe behavior is unspecified.\n\nThe ``EXPORT`` form is useful to help outside projects use targets built\nand installed by the current project.  For example, the code\n\n.. code-block:: cmake\n\n  install(TARGETS myexe EXPORT myproj DESTINATION bin)\n  install(EXPORT myproj NAMESPACE mp_ DESTINATION lib/myproj)\n\nwill install the executable myexe to ``<prefix>/bin`` and code to import\nit in the file ``<prefix>/lib/myproj/myproj.cmake``.  An outside project\nmay load this file with the include command and reference the ``myexe``\nexecutable from the installation tree using the imported target name\n``mp_myexe`` as if the target were built in its own tree.\n\n.. note::\n  This command supercedes the :command:`install_targets` command and\n  the :prop_tgt:`PRE_INSTALL_SCRIPT` and :prop_tgt:`POST_INSTALL_SCRIPT`\n  target properties.  It also replaces the ``FILES`` forms of the\n  :command:`install_files` and :command:`install_programs` commands.\n  The processing order of these install rules relative to\n  those generated by :command:`install_targets`,\n  :command:`install_files`, and :command:`install_programs` commands\n  is not defined.\n", 
    "macro": "macro\n-----\n\nStart recording a macro for later invocation as a command.\n\n::\n\n  macro(<name> [arg1 [arg2 [arg3 ...]]])\n    COMMAND1(ARGS ...)\n    COMMAND2(ARGS ...)\n    ...\n  endmacro(<name>)\n\nDefine a macro named <name> that takes arguments named arg1 arg2 arg3\n(...).  Commands listed after macro, but before the matching endmacro,\nare not invoked until the macro is invoked.  When it is invoked, the\ncommands recorded in the macro are first modified by replacing formal\nparameters (``${arg1}``) with the arguments passed, and then invoked as\nnormal commands.  In addition to referencing the formal parameters you\ncan reference the values ``${ARGC}`` which will be set to the number of\narguments passed into the function as well as ``${ARGV0}`` ``${ARGV1}``\n``${ARGV2}`` ...  which will have the actual values of the arguments\npassed in.  This facilitates creating macros with optional arguments.\nAdditionally ``${ARGV}`` holds the list of all arguments given to the\nmacro and ``${ARGN}`` holds the list of arguments past the last expected\nargument.\n\nSee the cmake_policy() command documentation for the behavior of\npolicies inside macros.\n\nMacro Argument Caveats\n^^^^^^^^^^^^^^^^^^^^^^\n\nNote that the parameters to a macro and values such as ``ARGN`` are\nnot variables in the usual CMake sense.  They are string\nreplacements much like the C preprocessor would do with a macro.\nTherefore you will NOT be able to use commands like::\n\n if(ARGV1) # ARGV1 is not a variable\n foreach(loop_var IN LISTS ARGN) # ARGN is not a variable\n\nIn the first case you can use ``if(${ARGV1})``, in the second case, you can\nuse ``foreach(loop_var ${ARGN})`` but this will skip empty arguments.\nIf you need to include them, you can use::\n\n set(list_var \"${ARGN}\")\n foreach(loop_var IN LISTS list_var)\n\nNote that if you have a variable with the same name in the scope from\nwhich the macro is called, using unreferenced names will use the\nexisting variable instead of the arguments. For example::\n\n macro(_BAR)\n   foreach(arg IN LISTS ARGN)\n     [...]\n   endforeach()\n endmacro()\n\n function(_FOO)\n   _bar(x y z)\n endfunction()\n\n _foo(a b c)\n\nWill loop over ``a;b;c`` and not over ``x;y;z`` as one might be expecting.\nIf you want true CMake variables and/or better CMake scope control you\nshould look at the function command.\n", 
    "create_test_sourcelist": "create_test_sourcelist\n----------------------\n\nCreate a test driver and source list for building test programs.\n\n::\n\n  create_test_sourcelist(sourceListName driverName\n                         test1 test2 test3\n                         EXTRA_INCLUDE include.h\n                         FUNCTION function)\n\nA test driver is a program that links together many small tests into a\nsingle executable.  This is useful when building static executables\nwith large libraries to shrink the total required size.  The list of\nsource files needed to build the test driver will be in\nsourceListName.  DriverName is the name of the test driver program.\nThe rest of the arguments consist of a list of test source files, can\nbe semicolon separated.  Each test source file should have a function\nin it that is the same name as the file with no extension (foo.cxx\nshould have int foo(int, char*[]);) DriverName will be able to call\neach of the tests by name on the command line.  If EXTRA_INCLUDE is\nspecified, then the next argument is included into the generated file.\nIf FUNCTION is specified, then the next argument is taken as a\nfunction name that is passed a pointer to ac and av.  This can be used\nto add extra command line processing to each test.  The cmake variable\nCMAKE_TESTDRIVER_BEFORE_TESTMAIN can be set to have code that will be\nplaced directly before calling the test main function.\nCMAKE_TESTDRIVER_AFTER_TESTMAIN can be set to have code that will be\nplaced directly after the call to the test main function.\n", 
    "load_command": "load_command\n------------\n\nDisallowed.  See CMake Policy :policy:`CMP0031`.\n\nLoad a command into a running CMake.\n\n::\n\n  load_command(COMMAND_NAME <loc1> [loc2 ...])\n\nThe given locations are searched for a library whose name is\ncmCOMMAND_NAME.  If found, it is loaded as a module and the command is\nadded to the set of available CMake commands.  Usually, TRY_COMPILE is\nused before this command to compile the module.  If the command is\nsuccessfully loaded a variable named\n\n::\n\n  CMAKE_LOADED_COMMAND_<COMMAND_NAME>\n\nwill be set to the full path of the module that was loaded.  Otherwise\nthe variable will not be set.\n", 
    "set_source_files_properties": "set_source_files_properties\n---------------------------\n\nSource files can have properties that affect how they are built.\n\n::\n\n  set_source_files_properties([file1 [file2 [...]]]\n                              PROPERTIES prop1 value1\n                              [prop2 value2 [...]])\n\nSet properties associated with source files using a key/value paired\nlist.  See properties documentation for those known to CMake.\nUnrecognized properties are ignored.  Source file properties are\nvisible only to targets added in the same directory (CMakeLists.txt).\n", 
    "include_external_msproject": "include_external_msproject\n--------------------------\n\nInclude an external Microsoft project file in a workspace.\n\n::\n\n  include_external_msproject(projectname location\n                             [TYPE projectTypeGUID]\n                             [GUID projectGUID]\n                             [PLATFORM platformName]\n                             dep1 dep2 ...)\n\nIncludes an external Microsoft project in the generated workspace\nfile.  Currently does nothing on UNIX.  This will create a target\nnamed [projectname].  This can be used in the add_dependencies command\nto make things depend on the external project.\n\nTYPE, GUID and PLATFORM are optional parameters that allow one to\nspecify the type of project, id (GUID) of the project and the name of\nthe target platform.  This is useful for projects requiring values\nother than the default (e.g.  WIX projects).  These options are not\nsupported by the Visual Studio 6 generator.\n", 
    "site_name": "site_name\n---------\n\nSet the given variable to the name of the computer.\n\n::\n\n  site_name(variable)\n", 
    "ctest_read_custom_files": "ctest_read_custom_files\n-----------------------\n\nread CTestCustom files.\n\n::\n\n  ctest_read_custom_files( directory ... )\n\nRead all the CTestCustom.ctest or CTestCustom.cmake files from the\ngiven directory.\n", 
    "file": "file\n----\n\nFile manipulation command.\n\n::\n\n  file(WRITE filename \"message to write\"... )\n  file(APPEND filename \"message to write\"... )\n  file(READ filename variable [LIMIT numBytes] [OFFSET offset] [HEX])\n  file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)\n  file(STRINGS filename variable [LIMIT_COUNT num]\n       [LIMIT_INPUT numBytes] [LIMIT_OUTPUT numBytes]\n       [LENGTH_MINIMUM numBytes] [LENGTH_MAXIMUM numBytes]\n       [NEWLINE_CONSUME] [REGEX regex]\n       [NO_HEX_CONVERSION])\n  file(GLOB variable [RELATIVE path] [globbing expressions]...)\n  file(GLOB_RECURSE variable [RELATIVE path]\n       [FOLLOW_SYMLINKS] [globbing expressions]...)\n  file(RENAME <oldname> <newname>)\n  file(REMOVE [file1 ...])\n  file(REMOVE_RECURSE [file1 ...])\n  file(MAKE_DIRECTORY [directory1 directory2 ...])\n  file(RELATIVE_PATH variable directory file)\n  file(TO_CMAKE_PATH path result)\n  file(TO_NATIVE_PATH path result)\n  file(DOWNLOAD url file [INACTIVITY_TIMEOUT timeout]\n       [TIMEOUT timeout] [STATUS status] [LOG log] [SHOW_PROGRESS]\n       [EXPECTED_HASH ALGO=value] [EXPECTED_MD5 sum]\n       [TLS_VERIFY on|off] [TLS_CAINFO file])\n  file(UPLOAD filename url [INACTIVITY_TIMEOUT timeout]\n       [TIMEOUT timeout] [STATUS status] [LOG log] [SHOW_PROGRESS])\n  file(TIMESTAMP filename variable [<format string>] [UTC])\n  file(GENERATE OUTPUT output_file\n       <INPUT input_file|CONTENT input_content>\n       [CONDITION expression])\n\nWRITE will write a message into a file called 'filename'.  It\noverwrites the file if it already exists, and creates the file if it\ndoes not exist.  (If the file is a build input, use configure_file to\nupdate the file only when its content changes.)\n\nAPPEND will write a message into a file same as WRITE, except it will\nappend it to the end of the file\n\nREAD will read the content of a file and store it into the variable.\nIt will start at the given offset and read up to numBytes.  If the\nargument HEX is given, the binary data will be converted to\nhexadecimal representation and this will be stored in the variable.\n\nMD5, SHA1, SHA224, SHA256, SHA384, and SHA512 will compute a\ncryptographic hash of the content of a file.\n\nSTRINGS will parse a list of ASCII strings from a file and store it in\na variable.  Binary data in the file are ignored.  Carriage return\n(CR) characters are ignored.  It works also for Intel Hex and Motorola\nS-record files, which are automatically converted to binary format\nwhen reading them.  Disable this using NO_HEX_CONVERSION.\n\nLIMIT_COUNT sets the maximum number of strings to return.  LIMIT_INPUT\nsets the maximum number of bytes to read from the input file.\nLIMIT_OUTPUT sets the maximum number of bytes to store in the output\nvariable.  LENGTH_MINIMUM sets the minimum length of a string to\nreturn.  Shorter strings are ignored.  LENGTH_MAXIMUM sets the maximum\nlength of a string to return.  Longer strings are split into strings\nno longer than the maximum length.  NEWLINE_CONSUME allows newlines to\nbe included in strings instead of terminating them.\n\nREGEX specifies a regular expression that a string must match to be\nreturned.  Typical usage\n\n::\n\n  file(STRINGS myfile.txt myfile)\n\nstores a list in the variable \"myfile\" in which each item is a line\nfrom the input file.\n\nGLOB will generate a list of all files that match the globbing\nexpressions and store it into the variable.  Globbing expressions are\nsimilar to regular expressions, but much simpler.  If RELATIVE flag is\nspecified for an expression, the results will be returned as a\nrelative path to the given path.  (We do not recommend using GLOB to\ncollect a list of source files from your source tree.  If no\nCMakeLists.txt file changes when a source is added or removed then the\ngenerated build system cannot know when to ask CMake to regenerate.)\n\nExamples of globbing expressions include:\n\n::\n\n   *.cxx      - match all files with extension cxx\n   *.vt?      - match all files with extension vta,...,vtz\n   f[3-5].txt - match files f3.txt, f4.txt, f5.txt\n\nGLOB_RECURSE will generate a list similar to the regular GLOB, except\nit will traverse all the subdirectories of the matched directory and\nmatch the files.  Subdirectories that are symlinks are only traversed\nif FOLLOW_SYMLINKS is given or cmake policy CMP0009 is not set to NEW.\nSee cmake --help-policy CMP0009 for more information.\n\nExamples of recursive globbing include:\n\n::\n\n   /dir/*.py  - match all python files in /dir and subdirectories\n\nMAKE_DIRECTORY will create the given directories, also if their parent\ndirectories don't exist yet\n\nRENAME moves a file or directory within a filesystem, replacing the\ndestination atomically.\n\nREMOVE will remove the given files, also in subdirectories\n\nREMOVE_RECURSE will remove the given files and directories, also\nnon-empty directories\n\nRELATIVE_PATH will determine relative path from directory to the given\nfile.\n\nTO_CMAKE_PATH will convert path into a cmake style path with unix /.\nThe input can be a single path or a system path like \"$ENV{PATH}\".\nNote the double quotes around the ENV call TO_CMAKE_PATH only takes\none argument.  This command will also convert the native list\ndelimiters for a list of paths like the PATH environment variable.\n\nTO_NATIVE_PATH works just like TO_CMAKE_PATH, but will convert from a\ncmake style path into the native path style \\ for windows and / for\nUNIX.\n\nDOWNLOAD will download the given URL to the given file.  If LOG var is\nspecified a log of the download will be put in var.  If STATUS var is\nspecified the status of the operation will be put in var.  The status\nis returned in a list of length 2.  The first element is the numeric\nreturn value for the operation, and the second element is a string\nvalue for the error.  A 0 numeric error means no error in the\noperation.  If TIMEOUT time is specified, the operation will timeout\nafter time seconds, time should be specified as an integer.  The\nINACTIVITY_TIMEOUT specifies an integer number of seconds of\ninactivity after which the operation should terminate.  If\nEXPECTED_HASH ALGO=value is specified, the operation will verify that\nthe downloaded file's actual hash matches the expected value, where\nALGO is one of MD5, SHA1, SHA224, SHA256, SHA384, or SHA512.  If it\ndoes not match, the operation fails with an error.  (\"EXPECTED_MD5\nsum\" is short-hand for \"EXPECTED_HASH MD5=sum\".) If SHOW_PROGRESS is\nspecified, progress information will be printed as status messages\nuntil the operation is complete.  For https URLs CMake must be built\nwith OpenSSL.  TLS/SSL certificates are not checked by default.  Set\nTLS_VERIFY to ON to check certificates and/or use EXPECTED_HASH to\nverify downloaded content.  Set TLS_CAINFO to specify a custom\nCertificate Authority file.  If either TLS option is not given CMake\nwill check variables CMAKE_TLS_VERIFY and CMAKE_TLS_CAINFO,\nrespectively.\n\nUPLOAD will upload the given file to the given URL.  If LOG var is\nspecified a log of the upload will be put in var.  If STATUS var is\nspecified the status of the operation will be put in var.  The status\nis returned in a list of length 2.  The first element is the numeric\nreturn value for the operation, and the second element is a string\nvalue for the error.  A 0 numeric error means no error in the\noperation.  If TIMEOUT time is specified, the operation will timeout\nafter time seconds, time should be specified as an integer.  The\nINACTIVITY_TIMEOUT specifies an integer number of seconds of\ninactivity after which the operation should terminate.  If\nSHOW_PROGRESS is specified, progress information will be printed as\nstatus messages until the operation is complete.\n\nTIMESTAMP will write a string representation of the modification time\nof filename to variable.\n\nShould the command be unable to obtain a timestamp variable will be\nset to the empty string \"\".\n\nSee documentation of the string TIMESTAMP sub-command for more\ndetails.\n\nThe file() command also provides COPY and INSTALL signatures:\n\n::\n\n  file(<COPY|INSTALL> files... DESTINATION <dir>\n       [FILE_PERMISSIONS permissions...]\n       [DIRECTORY_PERMISSIONS permissions...]\n       [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS]\n       [FILES_MATCHING]\n       [[PATTERN <pattern> | REGEX <regex>]\n        [EXCLUDE] [PERMISSIONS permissions...]] [...])\n\nThe COPY signature copies files, directories, and symlinks to a\ndestination folder.  Relative input paths are evaluated with respect\nto the current source directory, and a relative destination is\nevaluated with respect to the current build directory.  Copying\npreserves input file timestamps, and optimizes out a file if it exists\nat the destination with the same timestamp.  Copying preserves input\npermissions unless explicit permissions or NO_SOURCE_PERMISSIONS are\ngiven (default is USE_SOURCE_PERMISSIONS).  See the install(DIRECTORY)\ncommand for documentation of permissions, PATTERN, REGEX, and EXCLUDE\noptions.\n\nThe INSTALL signature differs slightly from COPY: it prints status\nmessages, and NO_SOURCE_PERMISSIONS is default.  Installation scripts\ngenerated by the install() command use this signature (with some\nundocumented options for internal use).\n\nGENERATE will write an <output_file> with content from an\n<input_file>, or from <input_content>.  The output is generated\nconditionally based on the content of the <condition>.  The file is\nwritten at CMake generate-time and the input may contain generator\nexpressions.  The <condition>, <output_file> and <input_file> may also\ncontain generator expressions.  The <condition> must evaluate to\neither '0' or '1'.  The <output_file> must evaluate to a unique name\namong all configurations and among all invocations of file(GENERATE).\n", 
    "variable_watch": "variable_watch\n--------------\n\nWatch the CMake variable for change.\n\n::\n\n  variable_watch(<variable name> [<command to execute>])\n\nIf the specified variable changes, the message will be printed about\nthe variable being changed.  If the command is specified, the command\nwill be executed.  The command will receive the following arguments:\nCOMMAND(<variable> <access> <value> <current list file> <stack>)\n", 
    "if": "if\n--\n\nConditionally execute a group of commands.\n\n.. code-block:: cmake\n\n if(expression)\n   # then section.\n   COMMAND1(ARGS ...)\n   COMMAND2(ARGS ...)\n   ...\n elseif(expression2)\n   # elseif section.\n   COMMAND1(ARGS ...)\n   COMMAND2(ARGS ...)\n   ...\n else(expression)\n   # else section.\n   COMMAND1(ARGS ...)\n   COMMAND2(ARGS ...)\n   ...\n endif(expression)\n\nEvaluates the given expression.  If the result is true, the commands\nin the THEN section are invoked.  Otherwise, the commands in the else\nsection are invoked.  The elseif and else sections are optional.  You\nmay have multiple elseif clauses.  Note that the expression in the\nelse and endif clause is optional.  Long expressions can be used and\nthere is a traditional order of precedence.  Parenthetical expressions\nare evaluated first followed by unary tests such as ``EXISTS``,\n``COMMAND``, and ``DEFINED``.  Then any binary tests such as\n``EQUAL``, ``LESS``, ``GREATER``, ``STRLESS``, ``STRGREATER``,\n``STREQUAL``, and ``MATCHES`` will be evaluated.  Then boolean ``NOT``\noperators and finally boolean ``AND`` and then ``OR`` operators will\nbe evaluated.\n\nPossible expressions are:\n\n``if(<constant>)``\n True if the constant is ``1``, ``ON``, ``YES``, ``TRUE``, ``Y``,\n or a non-zero number.  False if the constant is ``0``, ``OFF``,\n ``NO``, ``FALSE``, ``N``, ``IGNORE``, ``NOTFOUND``, the empty string,\n or ends in the suffix ``-NOTFOUND``.  Named boolean constants are\n case-insensitive.  If the argument is not one of these constants, it\n is treated as a variable.\n\n``if(<variable>)``\n True if the variable is defined to a value that is not a false\n constant.  False otherwise.  (Note macro arguments are not variables.)\n\n``if(NOT <expression>)``\n True if the expression is not true.\n\n``if(<expr1> AND <expr2>)``\n True if both expressions would be considered true individually.\n\n``if(<expr1> OR <expr2>)``\n True if either expression would be considered true individually.\n\n``if(COMMAND command-name)``\n True if the given name is a command, macro or function that can be\n invoked.\n\n``if(POLICY policy-id)``\n True if the given name is an existing policy (of the form ``CMP<NNNN>``).\n\n``if(TARGET target-name)``\n True if the given name is an existing logical target name such as those\n created by the :command:`add_executable`, :command:`add_library`, or\n :command:`add_custom_target` commands.\n\n``if(EXISTS path-to-file-or-directory)``\n True if the named file or directory exists.  Behavior is well-defined\n only for full paths.\n\n``if(file1 IS_NEWER_THAN file2)``\n True if file1 is newer than file2 or if one of the two files doesn't\n exist.  Behavior is well-defined only for full paths.  If the file\n time stamps are exactly the same, an ``IS_NEWER_THAN`` comparison returns\n true, so that any dependent build operations will occur in the event\n of a tie.  This includes the case of passing the same file name for\n both file1 and file2.\n\n``if(IS_DIRECTORY path-to-directory)``\n True if the given name is a directory.  Behavior is well-defined only\n for full paths.\n\n``if(IS_SYMLINK file-name)``\n True if the given name is a symbolic link.  Behavior is well-defined\n only for full paths.\n\n``if(IS_ABSOLUTE path)``\n True if the given path is an absolute path.\n\n``if(<variable|string> MATCHES regex)``\n True if the given string or variable's value matches the given regular\n expression.\n\n``if(<variable|string> LESS <variable|string>)``\n True if the given string or variable's value is a valid number and less\n than that on the right.\n\n``if(<variable|string> GREATER <variable|string>)``\n True if the given string or variable's value is a valid number and greater\n than that on the right.\n\n``if(<variable|string> EQUAL <variable|string>)``\n True if the given string or variable's value is a valid number and equal\n to that on the right.\n\n``if(<variable|string> STRLESS <variable|string>)``\n True if the given string or variable's value is lexicographically less\n than the string or variable on the right.\n\n``if(<variable|string> STRGREATER <variable|string>)``\n True if the given string or variable's value is lexicographically greater\n than the string or variable on the right.\n\n``if(<variable|string> STREQUAL <variable|string>)``\n True if the given string or variable's value is lexicographically equal\n to the string or variable on the right.\n\n``if(<variable|string> VERSION_LESS <variable|string>)``\n Component-wise integer version number comparison (version format is\n ``major[.minor[.patch[.tweak]]]``).\n\n``if(<variable|string> VERSION_EQUAL <variable|string>)``\n Component-wise integer version number comparison (version format is\n ``major[.minor[.patch[.tweak]]]``).\n\n``if(<variable|string> VERSION_GREATER <variable|string>)``\n Component-wise integer version number comparison (version format is\n ``major[.minor[.patch[.tweak]]]``).\n\n``if(DEFINED <variable>)``\n True if the given variable is defined.  It does not matter if the\n variable is true or false just if it has been set.  (Note macro\n arguments are not variables.)\n\n``if((expression) AND (expression OR (expression)))``\n The expressions inside the parenthesis are evaluated first and then\n the remaining expression is evaluated as in the previous examples.\n Where there are nested parenthesis the innermost are evaluated as part\n of evaluating the expression that contains them.\n\nThe if command was written very early in CMake's history, predating\nthe ``${}`` variable evaluation syntax, and for convenience evaluates\nvariables named by its arguments as shown in the above signatures.\nNote that normal variable evaluation with ``${}`` applies before the if\ncommand even receives the arguments.  Therefore code like::\n\n set(var1 OFF)\n set(var2 \"var1\")\n if(${var2})\n\nappears to the if command as::\n\n if(var1)\n\nand is evaluated according to the ``if(<variable>)`` case documented\nabove.  The result is ``OFF`` which is false.  However, if we remove the\n``${}`` from the example then the command sees::\n\n if(var2)\n\nwhich is true because ``var2`` is defined to \"var1\" which is not a false\nconstant.\n\nAutomatic evaluation applies in the other cases whenever the\nabove-documented signature accepts ``<variable|string>``:\n\n* The left hand argument to ``MATCHES`` is first checked to see if it is\n  a defined variable, if so the variable's value is used, otherwise the\n  original value is used.\n\n* If the left hand argument to ``MATCHES`` is missing it returns false\n  without error\n\n* Both left and right hand arguments to ``LESS``, ``GREATER``, and\n  ``EQUAL`` are independently tested to see if they are defined\n  variables, if so their defined values are used otherwise the original\n  value is used.\n\n* Both left and right hand arguments to ``STRLESS``, ``STREQUAL``, and\n  ``STRGREATER`` are independently tested to see if they are defined\n  variables, if so their defined values are used otherwise the original\n  value is used.\n\n* Both left and right hand arguments to ``VERSION_LESS``,\n  ``VERSION_EQUAL``, and ``VERSION_GREATER`` are independently tested\n  to see if they are defined variables, if so their defined values are\n  used otherwise the original value is used.\n\n* The right hand argument to ``NOT`` is tested to see if it is a boolean\n  constant, if so the value is used, otherwise it is assumed to be a\n  variable and it is dereferenced.\n\n* The left and right hand arguments to ``AND`` and ``OR`` are independently\n  tested to see if they are boolean constants, if so they are used as\n  such, otherwise they are assumed to be variables and are dereferenced.\n", 
    "utility_source": "utility_source\n--------------\n\nDisallowed.  See CMake Policy :policy:`CMP0034`.\n\nSpecify the source tree of a third-party utility.\n\n::\n\n  utility_source(cache_entry executable_name\n                 path_to_source [file1 file2 ...])\n\nWhen a third-party utility's source is included in the distribution,\nthis command specifies its location and name.  The cache entry will\nnot be set unless the path_to_source and all listed files exist.  It\nis assumed that the source tree of the utility will have been built\nbefore it is needed.\n\nWhen cross compiling CMake will print a warning if a utility_source()\ncommand is executed, because in many cases it is used to build an\nexecutable which is executed later on.  This doesn't work when cross\ncompiling, since the executable can run only on their target platform.\nSo in this case the cache entry has to be adjusted manually so it\npoints to an executable which is runnable on the build host.\n", 
    "get_filename_component": "get_filename_component\n----------------------\n\nGet a specific component of a full filename.\n\n::\n\n  get_filename_component(<VAR> <FileName> <COMP> [CACHE])\n\nSet <VAR> to a component of <FileName>, where <COMP> is one of:\n\n::\n\n DIRECTORY = Directory without file name\n NAME      = File name without directory\n EXT       = File name longest extension (.b.c from d/a.b.c)\n NAME_WE   = File name without directory or longest extension\n ABSOLUTE  = Full path to file\n REALPATH  = Full path to existing file with symlinks resolved\n PATH      = Legacy alias for DIRECTORY (use for CMake <= 2.8.11)\n\nPaths are returned with forward slashes and have no trailing slahes.\nThe longest file extension is always considered.  If the optional\nCACHE argument is specified, the result variable is added to the\ncache.\n\n::\n\n  get_filename_component(<VAR> FileName\n                         PROGRAM [PROGRAM_ARGS <ARG_VAR>]\n                         [CACHE])\n\nThe program in FileName will be found in the system search path or\nleft as a full path.  If PROGRAM_ARGS is present with PROGRAM, then\nany command-line arguments present in the FileName string are split\nfrom the program name and stored in <ARG_VAR>.  This is used to\nseparate a program name from its arguments in a command line string.\n", 
    "foreach": "foreach\n-------\n\nEvaluate a group of commands for each value in a list.\n\n::\n\n  foreach(loop_var arg1 arg2 ...)\n    COMMAND1(ARGS ...)\n    COMMAND2(ARGS ...)\n    ...\n  endforeach(loop_var)\n\nAll commands between foreach and the matching endforeach are recorded\nwithout being invoked.  Once the endforeach is evaluated, the recorded\nlist of commands is invoked once for each argument listed in the\noriginal foreach command.  Before each iteration of the loop\n\"${loop_var}\" will be set as a variable with the current value in the\nlist.\n\n::\n\n  foreach(loop_var RANGE total)\n  foreach(loop_var RANGE start stop [step])\n\nForeach can also iterate over a generated range of numbers.  There are\nthree types of this iteration:\n\n* When specifying single number, the range will have elements 0 to\n  \"total\".\n\n* When specifying two numbers, the range will have elements from the\n  first number to the second number.\n\n* The third optional number is the increment used to iterate from the\n  first number to the second number.\n\n::\n\n  foreach(loop_var IN [LISTS [list1 [...]]]\n                      [ITEMS [item1 [...]]])\n\nIterates over a precise list of items.  The LISTS option names\nlist-valued variables to be traversed, including empty elements (an\nempty string is a zero-length list).  (Note macro\narguments are not variables.)  The ITEMS option ends argument\nparsing and includes all arguments following it in the iteration.\n", 
    "set_directory_properties": "set_directory_properties\n------------------------\n\nSet a property of the directory.\n\n::\n\n  set_directory_properties(PROPERTIES prop1 value1 prop2 value2)\n\nSet a property for the current directory and subdirectories.  If the\nproperty is not found, CMake will report an error.  The properties\ninclude: INCLUDE_DIRECTORIES, LINK_DIRECTORIES,\nINCLUDE_REGULAR_EXPRESSION, and ADDITIONAL_MAKE_CLEAN_FILES.\nADDITIONAL_MAKE_CLEAN_FILES is a list of files that will be cleaned as\na part of \"make clean\" stage.\n", 
    "qt_wrap_cpp": "qt_wrap_cpp\n-----------\n\nCreate Qt Wrappers.\n\n::\n\n  qt_wrap_cpp(resultingLibraryName DestName\n              SourceLists ...)\n\nProduce moc files for all the .h files listed in the SourceLists.  The\nmoc files will be added to the library using the DestName source list.\n", 
    "endmacro": "endmacro\n--------\n\nEnds a list of commands in a macro block.\n\n::\n\n  endmacro(expression)\n\nSee the macro command.\n", 
    "target_include_directories": "target_include_directories\n--------------------------\n\nAdd include directories to a target.\n\n::\n\n  target_include_directories(<target> [SYSTEM] [BEFORE]\n    <INTERFACE|PUBLIC|PRIVATE> [items1...]\n    [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\n\nSpecify include directories or targets to use when compiling a given\ntarget.  The named ``<target>`` must have been created by a command such\nas :command:`add_executable` or :command:`add_library` and must not be an\n:prop_tgt:`IMPORTED` target.\n\nIf ``BEFORE`` is specified, the content will be prepended to the property\ninstead of being appended.\n\nThe ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to specify\nthe scope of the following arguments.  ``PRIVATE`` and ``PUBLIC`` items will\npopulate the :prop_tgt:`INCLUDE_DIRECTORIES` property of ``<target>``.\n``PUBLIC`` and ``INTERFACE`` items will populate the\n:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`\nproperty of ``<target>``.  The following arguments specify include\ndirectories.\n\nSpecified include directories may be absolute paths or relative paths.\nRepeated calls for the same <target> append items in the order called.  If\n``SYSTEM`` is specified, the compiler will be told the\ndirectories are meant as system include directories on some platforms\n(signalling this setting might achieve effects such as the compiler\nskipping warnings, or these fixed-install system files not being\nconsidered in dependency calculations - see compiler docs).  If ``SYSTEM``\nis used together with ``PUBLIC`` or ``INTERFACE``, the\n:prop_tgt:`INTERFACE_SYSTEM_INCLUDE_DIRECTORIES` target property will be\npopulated with the specified directories.\n\nArguments to ``target_include_directories`` may use \"generator expressions\"\nwith the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)`\nmanual for available expressions.  See the :manual:`cmake-buildsystem(7)`\nmanual for more on defining buildsystem properties.\n\nInclude directories usage requirements commonly differ between the build-tree\nand the install-tree.  The ``BUILD_INTERFACE`` and ``INSTALL_INTERFACE``\ngenerator expressions can be used to describe separate usage requirements\nbased on the usage location.  Relative paths are allowed within the\n``INSTALL_INTERFACE`` expression and are interpreted relative to the\ninstallation prefix.  For example:\n\n.. code-block:: cmake\n\n  target_include_directories(mylib PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/mylib>\n    $<INSTALL_INTERFACE:include/mylib>  # <prefix>/include/mylib\n  )\n", 
    "make_directory": "make_directory\n--------------\n\nDeprecated. Use the file(MAKE_DIRECTORY ) command instead.\n\n::\n\n  make_directory(directory)\n\nCreates the specified directory.  Full paths should be given.  Any\nparent directories that do not exist will also be created.  Use with\ncare.\n", 
    "ctest_run_script": "ctest_run_script\n----------------\n\nruns a ctest -S script\n\n::\n\n  ctest_run_script([NEW_PROCESS] script_file_name script_file_name1\n              script_file_name2 ... [RETURN_VALUE var])\n\nRuns a script or scripts much like if it was run from ctest -S.  If no\nargument is provided then the current script is run using the current\nsettings of the variables.  If NEW_PROCESS is specified then each\nscript will be run in a separate process.If RETURN_VALUE is specified\nthe return value of the last script run will be put into var.\n", 
    "add_subdirectory": "add_subdirectory\n----------------\n\nAdd a subdirectory to the build.\n\n::\n\n  add_subdirectory(source_dir [binary_dir]\n                   [EXCLUDE_FROM_ALL])\n\nAdd a subdirectory to the build.  The source_dir specifies the\ndirectory in which the source CMakeLists.txt and code files are\nlocated.  If it is a relative path it will be evaluated with respect\nto the current directory (the typical usage), but it may also be an\nabsolute path.  The binary_dir specifies the directory in which to\nplace the output files.  If it is a relative path it will be evaluated\nwith respect to the current output directory, but it may also be an\nabsolute path.  If binary_dir is not specified, the value of\nsource_dir, before expanding any relative path, will be used (the\ntypical usage).  The CMakeLists.txt file in the specified source\ndirectory will be processed immediately by CMake before processing in\nthe current input file continues beyond this command.\n\nIf the EXCLUDE_FROM_ALL argument is provided then targets in the\nsubdirectory will not be included in the ALL target of the parent\ndirectory by default, and will be excluded from IDE project files.\nUsers must explicitly build targets in the subdirectory.  This is\nmeant for use when the subdirectory contains a separate part of the\nproject that is useful but not necessary, such as a set of examples.\nTypically the subdirectory should contain its own project() command\ninvocation so that a full build system will be generated in the\nsubdirectory (such as a VS IDE solution file).  Note that inter-target\ndependencies supercede this exclusion.  If a target built by the\nparent project depends on a target in the subdirectory, the dependee\ntarget will be included in the parent project build system to satisfy\nthe dependency.\n", 
    "break": "break\n-----\n\nBreak from an enclosing foreach or while loop.\n\n::\n\n  break()\n\nBreaks from an enclosing foreach loop or while loop\n", 
    "ctest_upload": "ctest_upload\n------------\n\nUpload files to a dashboard server.\n\n::\n\n  ctest_upload(FILES ...)\n\nPass a list of files to be sent along with the build results to the\ndashboard server.\n", 
    "qt_wrap_ui": "qt_wrap_ui\n----------\n\nCreate Qt user interfaces Wrappers.\n\n::\n\n  qt_wrap_ui(resultingLibraryName HeadersDestName\n             SourcesDestName SourceLists ...)\n\nProduce .h and .cxx files for all the .ui files listed in the\nSourceLists.  The .h files will be added to the library using the\nHeadersDestNamesource list.  The .cxx files will be added to the\nlibrary using the SourcesDestNamesource list.\n", 
    "cmake_minimum_required": "cmake_minimum_required\n----------------------\n\nSet the minimum required version of cmake for a project.\n\n::\n\n  cmake_minimum_required(VERSION major[.minor[.patch[.tweak]]]\n                         [FATAL_ERROR])\n\nIf the current version of CMake is lower than that required it will\nstop processing the project and report an error.  When a version\nhigher than 2.4 is specified the command implicitly invokes\n\n::\n\n  cmake_policy(VERSION major[.minor[.patch[.tweak]]])\n\nwhich sets the cmake policy version level to the version specified.\nWhen version 2.4 or lower is given the command implicitly invokes\n\n::\n\n  cmake_policy(VERSION 2.4)\n\nwhich enables compatibility features for CMake 2.4 and lower.\n\nThe FATAL_ERROR option is accepted but ignored by CMake 2.6 and\nhigher.  It should be specified so CMake versions 2.4 and lower fail\nwith an error instead of just a warning.\n", 
    "add_custom_target": "add_custom_target\n-----------------\n\nAdd a target with no output so it will always be built.\n\n::\n\n  add_custom_target(Name [ALL] [command1 [args1...]]\n                    [COMMAND command2 [args2...] ...]\n                    [DEPENDS depend depend depend ... ]\n                    [WORKING_DIRECTORY dir]\n                    [COMMENT comment] [VERBATIM]\n                    [SOURCES src1 [src2...]])\n\nAdds a target with the given name that executes the given commands.\nThe target has no output file and is ALWAYS CONSIDERED OUT OF DATE\neven if the commands try to create a file with the name of the target.\nUse ADD_CUSTOM_COMMAND to generate a file with dependencies.  By\ndefault nothing depends on the custom target.  Use ADD_DEPENDENCIES to\nadd dependencies to or from other targets.  If the ALL option is\nspecified it indicates that this target should be added to the default\nbuild target so that it will be run every time (the command cannot be\ncalled ALL).  The command and arguments are optional and if not\nspecified an empty target will be created.  If WORKING_DIRECTORY is\nset, then the command will be run in that directory.  If it is a\nrelative path it will be interpreted relative to the build tree\ndirectory corresponding to the current source directory.  If COMMENT\nis set, the value will be displayed as a message before the commands\nare executed at build time.  Dependencies listed with the DEPENDS\nargument may reference files and outputs of custom commands created\nwith add_custom_command() in the same directory (CMakeLists.txt file).\n\nIf VERBATIM is given then all arguments to the commands will be\nescaped properly for the build tool so that the invoked command\nreceives each argument unchanged.  Note that one level of escapes is\nstill used by the CMake language processor before add_custom_target\neven sees the arguments.  Use of VERBATIM is recommended as it enables\ncorrect behavior.  When VERBATIM is not given the behavior is platform\nspecific because there is no protection of tool-specific special\ncharacters.\n\nThe SOURCES option specifies additional source files to be included in\nthe custom target.  Specified source files will be added to IDE\nproject files for convenience in editing even if they have not build\nrules.\n", 
    "endif": "endif\n-----\n\nEnds a list of commands in an if block.\n\n::\n\n  endif(expression)\n\nSee the if command.\n", 
    "set_property": "set_property\n------------\n\nSet a named property in a given scope.\n\n::\n\n  set_property(<GLOBAL                            |\n                DIRECTORY [dir]                   |\n                TARGET    [target1 [target2 ...]] |\n                SOURCE    [src1 [src2 ...]]       |\n                TEST      [test1 [test2 ...]]     |\n                CACHE     [entry1 [entry2 ...]]>\n               [APPEND] [APPEND_STRING]\n               PROPERTY <name> [value1 [value2 ...]])\n\nSet one property on zero or more objects of a scope.  The first\nargument determines the scope in which the property is set.  It must\nbe one of the following:\n\nGLOBAL scope is unique and does not accept a name.\n\nDIRECTORY scope defaults to the current directory but another\ndirectory (already processed by CMake) may be named by full or\nrelative path.\n\nTARGET scope may name zero or more existing targets.\n\nSOURCE scope may name zero or more source files.  Note that source\nfile properties are visible only to targets added in the same\ndirectory (CMakeLists.txt).\n\nTEST scope may name zero or more existing tests.\n\nCACHE scope must name zero or more cache existing entries.\n\nThe required PROPERTY option is immediately followed by the name of\nthe property to set.  Remaining arguments are used to compose the\nproperty value in the form of a semicolon-separated list.  If the\nAPPEND option is given the list is appended to any existing property\nvalue.If the APPEND_STRING option is given the string is append to any\nexisting property value as string, i.e.  it results in a longer string\nand not a list of strings.\n", 
    "unset": "unset\n-----\n\nUnset a variable, cache variable, or environment variable.\n\n::\n\n  unset(<variable> [CACHE | PARENT_SCOPE])\n\nRemoves the specified variable causing it to become undefined.  If\nCACHE is present then the variable is removed from the cache instead\nof the current scope.\n\nIf PARENT_SCOPE is present then the variable is removed from the scope\nabove the current scope.  See the same option in the set() command for\nfurther details.\n\n<variable> can be an environment variable such as:\n\n::\n\n  unset(ENV{LD_LIBRARY_PATH})\n\nin which case the variable will be removed from the current\nenvironment.\n"
}